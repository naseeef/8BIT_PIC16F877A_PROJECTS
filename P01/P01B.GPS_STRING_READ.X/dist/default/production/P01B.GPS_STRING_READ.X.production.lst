

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat May 21 19:11:39 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 2.40
    39                           ; Generated 17/11/2021 GMT
    40                           ; 
    41                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F877A Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0008                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0088                     	;# 
   113  0089                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  010F                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193                           
   194                           	psect	idataBANK0
   195  01F7                     __pidataBANK0:
   196                           
   197                           ;initializer for _randx
   198  01F7  3401               	retlw	1
   199  01F8  3400               	retlw	0
   200  01F9  3400               	retlw	0
   201  01FA  3400               	retlw	0
   202                           
   203                           ;initializer for _pv
   204  01FB  3447               	retlw	71
   205  01FC  3450               	retlw	80
   206  01FD  3452               	retlw	82
   207                           
   208                           	psect	idataBANK1
   209  0253                     __pidataBANK1:
   210                           
   211                           ;initializer for main@F1148
   212  0253  34C0               	retlw	192
   213  0254  3400               	retlw	0
   214  0255  34F9               	retlw	249
   215  0256  3400               	retlw	0
   216  0257  34A4               	retlw	164
   217  0258  3400               	retlw	0
   218  0259  34B0               	retlw	176
   219  025A  3400               	retlw	0
   220  025B  3499               	retlw	153
   221  025C  3400               	retlw	0
   222  025D  3492               	retlw	146
   223  025E  3400               	retlw	0
   224  025F  3482               	retlw	130
   225  0260  3400               	retlw	0
   226  0261  34F8               	retlw	248
   227  0262  3400               	retlw	0
   228  0263  3480               	retlw	128
   229  0264  3400               	retlw	0
   230  0265  3490               	retlw	144
   231  0266  3400               	retlw	0
   232  0267  34C0               	retlw	192
   233  0268  3400               	retlw	0
   234  0018                     _RCSTA	set	24
   235  001A                     _RCREG	set	26
   236  0008                     _PORTD	set	8
   237  0006                     _PORTB	set	6
   238  0065                     _RCIF	set	101
   239  003D                     _RC5	set	61
   240  003C                     _RC4	set	60
   241  003B                     _RC3	set	59
   242  0099                     _SPBRG	set	153
   243  0086                     _TRISB	set	134
   244  0088                     _TRISD	set	136
   245  043D                     _TRISC5	set	1085
   246  043C                     _TRISC4	set	1084
   247  043B                     _TRISC3	set	1083
   248                           
   249                           	psect	strings
   250  0003                     __pstrings:
   251  0003                     stringtab:
   252  0003                     __stringtab:
   253  0003                     stringcode:	
   254                           ;	String table - string pointers are 1 byte each
   255                           
   256  0003                     stringdir:
   257  0003  3000               	movlw	high stringdir
   258  0004  008A               	movwf	10
   259  0005  0804               	movf	4,w
   260  0006  0A84               	incf	4,f
   261  0007  0782               	addwf	2,f
   262  0008                     __stringbase:
   263  0008  3400               	retlw	0
   264  0009                     __end_of__stringtab:
   265  0009                     STR_11:
   266  0009  3421               	retlw	33	;'!'
   267  000A  3421               	retlw	33	;'!'
   268  000B  3443               	retlw	67	;'C'
   269  000C  3441               	retlw	65	;'A'
   270  000D  344E               	retlw	78	;'N'
   271  000E  3427               	retlw	39	;'''
   272  000F  3454               	retlw	84	;'T'
   273  0010  3420               	retlw	32	;' '
   274  0011  3446               	retlw	70	;'F'
   275  0012  3445               	retlw	69	;'E'
   276  0013  3454               	retlw	84	;'T'
   277  0014  3443               	retlw	67	;'C'
   278  0015  3448               	retlw	72	;'H'
   279  0016  3420               	retlw	32	;' '
   280  0017  3444               	retlw	68	;'D'
   281  0018  3441               	retlw	65	;'A'
   282  0019  3454               	retlw	84	;'T'
   283  001A  3441               	retlw	65	;'A'
   284  001B  3421               	retlw	33	;'!'
   285  001C  3421               	retlw	33	;'!'
   286  001D  3400               	retlw	0
   287  001E                     STR_10:
   288  001E  3421               	retlw	33	;'!'
   289  001F  3443               	retlw	67	;'C'
   290  0020  344C               	retlw	76	;'L'
   291  0021  344F               	retlw	79	;'O'
   292  0022  3455               	retlw	85	;'U'
   293  0023  3444               	retlw	68	;'D'
   294  0024  3459               	retlw	89	;'Y'
   295  0025  3420               	retlw	32	;' '
   296  0026  3445               	retlw	69	;'E'
   297  0027  344E               	retlw	78	;'N'
   298  0028  3456               	retlw	86	;'V'
   299  0029  3449               	retlw	73	;'I'
   300  002A  3452               	retlw	82	;'R'
   301  002B  344F               	retlw	79	;'O'
   302  002C  344E               	retlw	78	;'N'
   303  002D  344D               	retlw	77	;'M'
   304  002E  3445               	retlw	69	;'E'
   305  002F  344E               	retlw	78	;'N'
   306  0030  3454               	retlw	84	;'T'
   307  0031  3421               	retlw	33	;'!'
   308  0032  3400               	retlw	0
   309  0033                     STR_13:
   310  0033  342D               	retlw	45	;'-'
   311  0034  342D               	retlw	45	;'-'
   312  0035  342D               	retlw	45	;'-'
   313  0036  3454               	retlw	84	;'T'
   314  0037  3452               	retlw	82	;'R'
   315  0038  3459               	retlw	89	;'Y'
   316  0039  3420               	retlw	32	;' '
   317  003A  3420               	retlw	32	;' '
   318  003B  3452               	retlw	82	;'R'
   319  003C  3445               	retlw	69	;'E'
   320  003D  3453               	retlw	83	;'S'
   321  003E  3445               	retlw	69	;'E'
   322  003F  3454               	retlw	84	;'T'
   323  0040  3454               	retlw	84	;'T'
   324  0041  3449               	retlw	73	;'I'
   325  0042  344E               	retlw	78	;'N'
   326  0043  3447               	retlw	71	;'G'
   327  0044  342D               	retlw	45	;'-'
   328  0045  342D               	retlw	45	;'-'
   329  0046  342D               	retlw	45	;'-'
   330  0047  3400               	retlw	0
   331  0048                     STR_16:
   332  0048  3452               	retlw	82	;'R'
   333  0049  3445               	retlw	69	;'E'
   334  004A  3443               	retlw	67	;'C'
   335  004B  3448               	retlw	72	;'H'
   336  004C  3441               	retlw	65	;'A'
   337  004D  3452               	retlw	82	;'R'
   338  004E  3447               	retlw	71	;'G'
   339  004F  3445               	retlw	69	;'E'
   340  0050  3420               	retlw	32	;' '
   341  0051  3449               	retlw	73	;'I'
   342  0052  344D               	retlw	77	;'M'
   343  0053  344D               	retlw	77	;'M'
   344  0054  3445               	retlw	69	;'E'
   345  0055  3444               	retlw	68	;'D'
   346  0056  3449               	retlw	73	;'I'
   347  0057  3441               	retlw	65	;'A'
   348  0058  3454               	retlw	84	;'T'
   349  0059  3445               	retlw	69	;'E'
   350  005A  344C               	retlw	76	;'L'
   351  005B  3459               	retlw	89	;'Y'
   352  005C  3400               	retlw	0
   353  005D                     STR_14:
   354  005D  342D               	retlw	45	;'-'
   355  005E  3421               	retlw	33	;'!'
   356  005F  3421               	retlw	33	;'!'
   357  0060  3421               	retlw	33	;'!'
   358  0061  3442               	retlw	66	;'B'
   359  0062  3441               	retlw	65	;'A'
   360  0063  3454               	retlw	84	;'T'
   361  0064  3454               	retlw	84	;'T'
   362  0065  3445               	retlw	69	;'E'
   363  0066  3452               	retlw	82	;'R'
   364  0067  3459               	retlw	89	;'Y'
   365  0068  3420               	retlw	32	;' '
   366  0069  344C               	retlw	76	;'L'
   367  006A  344F               	retlw	79	;'O'
   368  006B  3457               	retlw	87	;'W'
   369  006C  3421               	retlw	33	;'!'
   370  006D  3421               	retlw	33	;'!'
   371  006E  3421               	retlw	33	;'!'
   372  006F  342D               	retlw	45	;'-'
   373  0070  3400               	retlw	0
   374  0071                     STR_9:
   375  0071  3446               	retlw	70	;'F'
   376  0072  344F               	retlw	79	;'O'
   377  0073  3452               	retlw	82	;'R'
   378  0074  3420               	retlw	32	;' '
   379  0075  3452               	retlw	82	;'R'
   380  0076  3445               	retlw	69	;'E'
   381  0077  3453               	retlw	83	;'S'
   382  0078  3454               	retlw	84	;'T'
   383  0079  3454               	retlw	84	;'T'
   384  007A  3449               	retlw	73	;'I'
   385  007B  344E               	retlw	78	;'N'
   386  007C  3447               	retlw	71	;'G'
   387  007D  3420               	retlw	32	;' '
   388  007E  3444               	retlw	68	;'D'
   389  007F  3445               	retlw	69	;'E'
   390  0080  3456               	retlw	86	;'V'
   391  0081  3449               	retlw	73	;'I'
   392  0082  3443               	retlw	67	;'C'
   393  0083  3445               	retlw	69	;'E'
   394  0084  3400               	retlw	0
   395  0085                     STR_8:
   396  0085  3450               	retlw	80	;'P'
   397  0086  3452               	retlw	82	;'R'
   398  0087  3445               	retlw	69	;'E'
   399  0088  3453               	retlw	83	;'S'
   400  0089  3453               	retlw	83	;'S'
   401  008A  3420               	retlw	32	;' '
   402  008B  3450               	retlw	80	;'P'
   403  008C  3455               	retlw	85	;'U'
   404  008D  3453               	retlw	83	;'S'
   405  008E  3448               	retlw	72	;'H'
   406  008F  3420               	retlw	32	;' '
   407  0090  3442               	retlw	66	;'B'
   408  0091  3455               	retlw	85	;'U'
   409  0092  3454               	retlw	84	;'T'
   410  0093  3454               	retlw	84	;'T'
   411  0094  344F               	retlw	79	;'O'
   412  0095  344E               	retlw	78	;'N'
   413  0096  3400               	retlw	0
   414  0097                     STR_5:
   415  0097  344E               	retlw	78	;'N'
   416  0098  344F               	retlw	79	;'O'
   417  0099  3420               	retlw	32	;' '
   418  009A  3447               	retlw	71	;'G'
   419  009B  3450               	retlw	80	;'P'
   420  009C  3452               	retlw	82	;'R'
   421  009D  344D               	retlw	77	;'M'
   422  009E  3443               	retlw	67	;'C'
   423  009F  3420               	retlw	32	;' '
   424  00A0  3446               	retlw	70	;'F'
   425  00A1  344F               	retlw	79	;'O'
   426  00A2  3455               	retlw	85	;'U'
   427  00A3  344E               	retlw	78	;'N'
   428  00A4  3444               	retlw	68	;'D'
   429  00A5  3400               	retlw	0
   430  00A6                     STR_2:
   431  00A6  3443               	retlw	67	;'C'
   432  00A7  346F               	retlw	111	;'o'
   433  00A8  346E               	retlw	110	;'n'
   434  00A9  346E               	retlw	110	;'n'
   435  00AA  3465               	retlw	101	;'e'
   436  00AB  3463               	retlw	99	;'c'
   437  00AC  3474               	retlw	116	;'t'
   438  00AD  3469               	retlw	105	;'i'
   439  00AE  346E               	retlw	110	;'n'
   440  00AF  3467               	retlw	103	;'g'
   441  00B0  342E               	retlw	46	;'.'
   442  00B1  342E               	retlw	46	;'.'
   443  00B2  342E               	retlw	46	;'.'
   444  00B3  3400               	retlw	0
   445  00B4                     STR_17:
   446  00B4  3453               	retlw	83	;'S'
   447  00B5  3457               	retlw	87	;'W'
   448  00B6  3449               	retlw	73	;'I'
   449  00B7  3454               	retlw	84	;'T'
   450  00B8  3443               	retlw	67	;'C'
   451  00B9  3448               	retlw	72	;'H'
   452  00BA  3449               	retlw	73	;'I'
   453  00BB  344E               	retlw	78	;'N'
   454  00BC  3447               	retlw	71	;'G'
   455  00BD  3420               	retlw	32	;' '
   456  00BE  344F               	retlw	79	;'O'
   457  00BF  3446               	retlw	70	;'F'
   458  00C0  3446               	retlw	70	;'F'
   459  00C1  3400               	retlw	0
   460  00C2                     STR_3:
   461  00C2  3452               	retlw	82	;'R'
   462  00C3  3465               	retlw	101	;'e'
   463  00C4  3473               	retlw	115	;'s'
   464  00C5  3465               	retlw	101	;'e'
   465  00C6  3474               	retlw	116	;'t'
   466  00C7  3474               	retlw	116	;'t'
   467  00C8  3469               	retlw	105	;'i'
   468  00C9  346E               	retlw	110	;'n'
   469  00CA  3467               	retlw	103	;'g'
   470  00CB  342E               	retlw	46	;'.'
   471  00CC  342E               	retlw	46	;'.'
   472  00CD  342E               	retlw	46	;'.'
   473  00CE  3400               	retlw	0
   474  00CF                     STR_1:
   475  00CF  3457               	retlw	87	;'W'
   476  00D0  3445               	retlw	69	;'E'
   477  00D1  344C               	retlw	76	;'L'
   478  00D2  3443               	retlw	67	;'C'
   479  00D3  344F               	retlw	79	;'O'
   480  00D4  344D               	retlw	77	;'M'
   481  00D5  3445               	retlw	69	;'E'
   482  00D6  342E               	retlw	46	;'.'
   483  00D7  342E               	retlw	46	;'.'
   484  00D8  342E               	retlw	46	;'.'
   485  00D9  3400               	retlw	0
   486  00DA                     STR_4:
   487  00DA  3445               	retlw	69	;'E'
   488  00DB  3452               	retlw	82	;'R'
   489  00DC  3452               	retlw	82	;'R'
   490  00DD  344F               	retlw	79	;'O'
   491  00DE  3452               	retlw	82	;'R'
   492  00DF  342C               	retlw	44	;','
   493  00E0  3400               	retlw	0
   494  00E1                     STR_6:
   495  00E1  344C               	retlw	76	;'L'
   496  00E2  344F               	retlw	79	;'O'
   497  00E3  344E               	retlw	78	;'N'
   498  00E4  343A               	retlw	58	;':'
   499  00E5  3400               	retlw	0
   500  00E6                     STR_7:
   501  00E6  344C               	retlw	76	;'L'
   502  00E7  3441               	retlw	65	;'A'
   503  00E8  3454               	retlw	84	;'T'
   504  00E9  343A               	retlw	58	;':'
   505  00EA  3400               	retlw	0
   506  00EB                     STR_12:
   507  00EB  3420               	retlw	32	;' '
   508  00EC  3400               	retlw	0
   509  005D                     
   510                           	psect	cinit
   511  07D1                     start_initialization:	
   512                           ; #config settings
   513                           
   514  07D1                     __initialization:
   515                           
   516                           ; Initialize objects allocated to BANK1
   517  07D1  1383               	bcf	3,7	;select IRP bank0
   518  07D2  30B6               	movlw	low (__pdataBANK1+22)
   519  07D3  00FD               	movwf	btemp+-1
   520  07D4  3002               	movlw	high __pidataBANK1
   521  07D5  00FE               	movwf	btemp
   522  07D6  3053               	movlw	low __pidataBANK1
   523  07D7  00FF               	movwf	btemp+1
   524  07D8  30A0               	movlw	low __pdataBANK1
   525  07D9  0084               	movwf	4
   526  07DA  120A  118A  221C  120A  118A  	fcall	init_ram0
   527                           
   528                           ; Initialize objects allocated to BANK0
   529  07DF  306D               	movlw	low (__pdataBANK0+7)
   530  07E0  00FD               	movwf	btemp+-1
   531  07E1  3001               	movlw	high __pidataBANK0
   532  07E2  00FE               	movwf	btemp
   533  07E3  30F7               	movlw	low __pidataBANK0
   534  07E4  00FF               	movwf	btemp+1
   535  07E5  3066               	movlw	low __pdataBANK0
   536  07E6  0084               	movwf	4
   537  07E7  120A  118A  221C  120A  118A  	fcall	init_ram0
   538                           
   539                           ; Clear objects allocated to BANK3
   540  07EC  1783               	bsf	3,7	;select IRP bank2
   541  07ED  3090               	movlw	low __pbssBANK3
   542  07EE  0084               	movwf	4
   543  07EF  30EF               	movlw	low (__pbssBANK3+95)
   544  07F0  120A  118A  21FE  120A  118A  	fcall	clear_ram0
   545                           
   546                           ; Clear objects allocated to BANK0
   547  07F5  01DF               	clrf	__pbssBANK0& (0+127)
   548  07F6  01E0               	clrf	(__pbssBANK0+1)& (0+127)
   549  07F7  01E1               	clrf	(__pbssBANK0+2)& (0+127)
   550  07F8  01E2               	clrf	(__pbssBANK0+3)& (0+127)
   551  07F9  01E3               	clrf	(__pbssBANK0+4)& (0+127)
   552  07FA  01E4               	clrf	(__pbssBANK0+5)& (0+127)
   553  07FB  01E5               	clrf	(__pbssBANK0+6)& (0+127)
   554  07FC                     end_of_initialization:	
   555                           ;End of C runtime variable initialization code
   556                           
   557  07FC                     __end_of__initialization:
   558  07FC  0183               	clrf	3
   559  07FD  120A  118A  2DD6   	ljmp	_main	;jump to C main() function
   560                           
   561                           	psect	bssBANK0
   562  005F                     __pbssBANK0:
   563  005F                     _r:
   564  005F                     	ds	3
   565  0062                     _reset_counter:
   566  0062                     	ds	2
   567  0064                     _random_case:
   568  0064                     	ds	2
   569                           
   570                           	psect	dataBANK0
   571  0066                     __pdataBANK0:
   572  0066                     _randx:
   573  0066                     	ds	4
   574  006A                     _pv:
   575  006A                     	ds	3
   576                           
   577                           	psect	dataBANK1
   578  00A0                     __pdataBANK1:
   579  00A0                     main@F1148:
   580  00A0                     	ds	22
   581                           
   582                           	psect	bssBANK3
   583  0190                     __pbssBANK3:
   584  0190                     _a:
   585  0190                     	ds	95
   586                           
   587                           	psect	inittext
   588  0218                     init_fetch0:	
   589                           ;	Called with low address in FSR and high address in W
   590                           
   591  0218  087E               	movf	btemp,w
   592  0219  008A               	movwf	10
   593  021A  087F               	movf	btemp+1,w
   594  021B  0082               	movwf	2
   595  021C                     init_ram0:	
   596                           ;Called with:
   597                           ;	high address of idata address in btemp 
   598                           ;	low address of idata address in btemp+1 
   599                           ;	low address of data in FSR
   600                           ;	high address + 1 of data in btemp-1
   601                           
   602  021C  120A  118A  2218  120A  118A  	fcall	init_fetch0
   603  0221  0080               	movwf	0
   604  0222  0A84               	incf	4,f
   605  0223  0804               	movf	4,w
   606  0224  067D               	xorwf	btemp+-1,w
   607  0225  1903               	btfsc	3,2
   608  0226  3400               	retlw	0
   609  0227  0AFF               	incf	btemp+1,f
   610  0228  1903               	btfsc	3,2
   611  0229  0AFE               	incf	btemp,f
   612  022A  2A1C               	goto	init_ram0
   613                           
   614                           	psect	clrtext
   615  01FE                     clear_ram0:	
   616                           ;	Called with FSR containing the base address, and
   617                           ;	W with the last address+1
   618                           
   619  01FE  0064               	clrwdt	;clear the watchdog before getting into this loop
   620  01FF                     clrloop0:
   621  01FF  0180               	clrf	0	;clear RAM location pointed to by FSR
   622  0200  0A84               	incf	4,f	;increment pointer
   623  0201  0604               	xorwf	4,w	;XOR with final address
   624  0202  1903               	btfsc	3,2	;have we reached the end yet?
   625  0203  3400               	retlw	0	;all done for this memory range, return
   626  0204  0604               	xorwf	4,w	;XOR again to restore value
   627  0205  29FF               	goto	clrloop0	;do the next byte
   628                           
   629                           	psect	cstackCOMMON
   630  0070                     __pcstackCOMMON:
   631  0070                     ?_ser_int:
   632  0070                     ??_ser_int:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_LCD_init:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_read_data:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_show:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ?_LCD_command:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ??_LCD_command:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_low_battery:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_refresh_text:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_cloudy:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_main:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_LCD_data:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ??_LCD_data:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_rx:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ??_rx:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_print_data:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?___lmul:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ___lmul@multiplier:	
   681                           ; 4 bytes @ 0x0
   682                           
   683                           
   684                           ; 4 bytes @ 0x0
   685  0070                     	ds	2
   686  0072                     LCD_command@cmd:
   687  0072                     LCD_data@data:	
   688                           ; 1 bytes @ 0x2
   689                           
   690                           
   691                           ; 1 bytes @ 0x2
   692  0072                     	ds	1
   693  0073                     ??_LCD_init:
   694  0073                     ??_show:	
   695                           ; 1 bytes @ 0x3
   696                           
   697                           
   698                           ; 1 bytes @ 0x3
   699  0073                     	ds	1
   700  0074                     show@s:
   701  0074                     ___lmul@multiplicand:	
   702                           ; 1 bytes @ 0x4
   703                           
   704                           
   705                           ; 4 bytes @ 0x4
   706  0074                     	ds	1
   707  0075                     ??_read_data:
   708  0075                     ??_low_battery:	
   709                           ; 1 bytes @ 0x5
   710                           
   711  0075                     ??_refresh_text:	
   712                           ; 1 bytes @ 0x5
   713                           
   714  0075                     ??_cloudy:	
   715                           ; 1 bytes @ 0x5
   716                           
   717  0075                     ??_print_data:	
   718                           ; 1 bytes @ 0x5
   719                           
   720  0075                     print_data@h:	
   721                           ; 1 bytes @ 0x5
   722                           
   723                           
   724                           ; 2 bytes @ 0x5
   725  0075                     	ds	3
   726  0078                     ?_corner_cases:
   727  0078                     ??___lmul:	
   728                           ; 1 bytes @ 0x8
   729                           
   730  0078                     corner_cases@number:	
   731                           ; 1 bytes @ 0x8
   732                           
   733                           
   734                           ; 2 bytes @ 0x8
   735  0078                     	ds	1
   736  0079                     ___lmul@product:
   737                           
   738                           ; 4 bytes @ 0x9
   739  0079                     	ds	1
   740  007A                     ??_corner_cases:
   741                           
   742                           ; 1 bytes @ 0xA
   743  007A                     	ds	3
   744  007D                     ??___awmod:
   745                           
   746                           ; 1 bytes @ 0xD
   747  007D                     	ds	1
   748  007E                     ??_random_number:
   749                           
   750                           	psect	cstackBANK0
   751  0020                     __pcstackBANK0:	
   752                           ; 1 bytes @ 0xE
   753                           
   754  0020                     ?_rand:
   755  0020                     read_data@flag:	
   756                           ; 2 bytes @ 0x0
   757                           
   758                           
   759                           ; 2 bytes @ 0x0
   760  0020                     	ds	2
   761  0022                     ??_rand:
   762  0022                     read_data@gps:	
   763                           ; 1 bytes @ 0x2
   764                           
   765                           
   766                           ; 1 bytes @ 0x2
   767  0022                     	ds	1
   768  0023                     read_data@j:
   769                           
   770                           ; 2 bytes @ 0x3
   771  0023                     	ds	2
   772  0025                     read_data@i:
   773                           
   774                           ; 2 bytes @ 0x5
   775  0025                     	ds	2
   776  0027                     ?___awmod:
   777  0027                     read_data@f:	
   778                           ; 2 bytes @ 0x7
   779                           
   780  0027                     ___awmod@divisor:	
   781                           ; 2 bytes @ 0x7
   782                           
   783                           
   784                           ; 2 bytes @ 0x7
   785  0027                     	ds	2
   786  0029                     ___awmod@dividend:
   787                           
   788                           ; 2 bytes @ 0x9
   789  0029                     	ds	2
   790  002B                     ___awmod@counter:
   791                           
   792                           ; 1 bytes @ 0xB
   793  002B                     	ds	1
   794  002C                     ___awmod@sign:
   795                           
   796                           ; 1 bytes @ 0xC
   797  002C                     	ds	1
   798  002D                     ?_printRandoms:
   799  002D                     printRandoms@lower:	
   800                           ; 2 bytes @ 0xD
   801                           
   802                           
   803                           ; 2 bytes @ 0xD
   804  002D                     	ds	2
   805  002F                     printRandoms@upper:
   806                           
   807                           ; 2 bytes @ 0xF
   808  002F                     	ds	2
   809  0031                     printRandoms@count:
   810                           
   811                           ; 2 bytes @ 0x11
   812  0031                     	ds	2
   813  0033                     ??_printRandoms:
   814                           
   815                           ; 1 bytes @ 0x13
   816  0033                     	ds	2
   817  0035                     printRandoms@num:
   818                           
   819                           ; 2 bytes @ 0x15
   820  0035                     	ds	2
   821  0037                     ?_random_number:
   822  0037                     random_number@l:	
   823                           ; 2 bytes @ 0x17
   824                           
   825                           
   826                           ; 2 bytes @ 0x17
   827  0037                     	ds	2
   828  0039                     random_number@u:
   829                           
   830                           ; 2 bytes @ 0x19
   831  0039                     	ds	2
   832  003B                     random_number@c:
   833                           
   834                           ; 2 bytes @ 0x1B
   835  003B                     	ds	2
   836  003D                     random_number@lower:
   837                           
   838                           ; 2 bytes @ 0x1D
   839  003D                     	ds	2
   840  003F                     random_number@upper:
   841                           
   842                           ; 2 bytes @ 0x1F
   843  003F                     	ds	2
   844  0041                     random_number@count:
   845                           
   846                           ; 2 bytes @ 0x21
   847  0041                     	ds	2
   848  0043                     random_number@rn:
   849                           
   850                           ; 2 bytes @ 0x23
   851  0043                     	ds	2
   852  0045                     ??_main:
   853                           
   854                           ; 1 bytes @ 0x25
   855  0045                     	ds	4
   856  0049                     main@seven:
   857                           
   858                           ; 22 bytes @ 0x29
   859  0049                     	ds	22
   860                           
   861                           	psect	maintext
   862  05D6                     __pmaintext:	
   863 ;;
   864 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   865 ;;
   866 ;; *************** function _main *****************
   867 ;; Defined at:
   868 ;;		line 43 in file "main.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  seven          22   41[BANK0 ] int [11]
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   877 ;; Tracked objects:
   878 ;;		On entry : B00/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   882 ;;      Params:         0       0       0       0       0
   883 ;;      Locals:         0      22       0       0       0
   884 ;;      Temps:          0       4       0       0       0
   885 ;;      Totals:         0      26       0       0       0
   886 ;;Total ram usage:       26 bytes
   887 ;; Hardware stack levels required when called: 5
   888 ;; This function calls:
   889 ;;		_LCD_command
   890 ;;		_LCD_init
   891 ;;		_corner_cases
   892 ;;		_low_battery
   893 ;;		_random_number
   894 ;;		_read_data
   895 ;;		_ser_int
   896 ;;		_show
   897 ;; This function is called by:
   898 ;;		Startup code after reset
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _main
   904  05D6                     _main:
   905  05D6                     l1510:	
   906                           ;incstack = 0
   907                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   908                           
   909                           
   910                           ;main.c: 46: TRISD=0x00;
   911  05D6  1683               	bsf	3,5	;RP0=1, select bank1
   912  05D7  1303               	bcf	3,6	;RP1=0, select bank1
   913  05D8  0188               	clrf	8	;volatile
   914                           
   915                           ;main.c: 47: TRISB=0x00;
   916  05D9  0186               	clrf	6	;volatile
   917  05DA                     l1512:
   918                           
   919                           ;main.c: 48: TRISC3 = 1;
   920  05DA  1587               	bsf	7,3	;volatile
   921  05DB                     l1514:
   922                           
   923                           ;main.c: 49: TRISC4 = TRISC5 = 0;
   924  05DB  1287               	bcf	7,5	;volatile
   925  05DC  1207               	bcf	7,4	;volatile
   926  05DD                     l1516:
   927                           
   928                           ;main.c: 50: ser_int();
   929  05DD  120A  118A  220F  120A  118A  	fcall	_ser_int
   930  05E2                     l1518:
   931                           
   932                           ;main.c: 51: LCD_init();
   933  05E2  120A  118A  229D  120A  118A  	fcall	_LCD_init
   934  05E7                     l1520:
   935                           
   936                           ;main.c: 52: read_data();
   937  05E7  120A  118A  2511  120A  118A  	fcall	_read_data
   938  05EC                     l1522:
   939                           
   940                           ;main.c: 55:     show("WELCOME...");
   941  05EC  30C7               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   942  05ED  120A  118A  22BC  120A  118A  	fcall	_show
   943  05F2                     l1524:
   944                           
   945                           ;main.c: 56:     _delay((unsigned long)((200)*(20000000/4000.0)));
   946  05F2  3006               	movlw	6
   947  05F3  1283               	bcf	3,5	;RP0=0, select bank0
   948  05F4  1303               	bcf	3,6	;RP1=0, select bank0
   949  05F5  00C7               	movwf	??_main+2
   950  05F6  3013               	movlw	19
   951  05F7  00C6               	movwf	??_main+1
   952  05F8  30AD               	movlw	173
   953  05F9  00C5               	movwf	??_main
   954  05FA                     u717:
   955  05FA  0BC5               	decfsz	??_main,f
   956  05FB  2DFA               	goto	u717
   957  05FC  0BC6               	decfsz	??_main+1,f
   958  05FD  2DFA               	goto	u717
   959  05FE  0BC7               	decfsz	??_main+2,f
   960  05FF  2DFA               	goto	u717
   961  0600                     l1526:
   962                           
   963                           ;main.c: 57:     LCD_command(0x01);
   964  0600  3001               	movlw	1
   965  0601  120A  118A  222B  120A  118A  	fcall	_LCD_command
   966  0606                     l1528:
   967                           
   968                           ;main.c: 59:     LCD_command(0x80);
   969  0606  3080               	movlw	128
   970  0607  120A  118A  222B  120A  118A  	fcall	_LCD_command
   971  060C                     l1530:
   972                           
   973                           ;main.c: 60:     show("Connecting...");
   974  060C  309E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   975  060D  120A  118A  22BC  120A  118A  	fcall	_show
   976  0612                     l1532:
   977                           
   978                           ;main.c: 61:     _delay((unsigned long)((500)*(20000000/4000.0)));
   979  0612  300D               	movlw	13
   980  0613  1283               	bcf	3,5	;RP0=0, select bank0
   981  0614  1303               	bcf	3,6	;RP1=0, select bank0
   982  0615  00C7               	movwf	??_main+2
   983  0616  30AF               	movlw	175
   984  0617  00C6               	movwf	??_main+1
   985  0618  30B5               	movlw	181
   986  0619  00C5               	movwf	??_main
   987  061A                     u727:
   988  061A  0BC5               	decfsz	??_main,f
   989  061B  2E1A               	goto	u727
   990  061C  0BC6               	decfsz	??_main+1,f
   991  061D  2E1A               	goto	u727
   992  061E  0BC7               	decfsz	??_main+2,f
   993  061F  2E1A               	goto	u727
   994  0620  2E21               	nop2
   995  0621                     l1534:
   996                           
   997                           ;main.c: 63:     random_case = random_number(0, 1, 1);
   998  0621  3000               	movlw	0
   999  0622  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0623  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0624  00B7               	movwf	random_number@l
  1002  0625  00B8               	movwf	random_number@l+1
  1003  0626  3001               	movlw	1
  1004  0627  00B9               	movwf	random_number@u
  1005  0628  3000               	movlw	0
  1006  0629  00BA               	movwf	random_number@u+1
  1007  062A  3001               	movlw	1
  1008  062B  00BB               	movwf	random_number@c
  1009  062C  3000               	movlw	0
  1010  062D  00BC               	movwf	random_number@c+1
  1011  062E  120A  118A  22DB  120A  118A  	fcall	_random_number
  1012  0633  1283               	bcf	3,5	;RP0=0, select bank0
  1013  0634  1303               	bcf	3,6	;RP1=0, select bank0
  1014  0635  0838               	movf	?_random_number+1,w
  1015  0636  00E5               	movwf	_random_case+1
  1016  0637  0837               	movf	?_random_number,w
  1017  0638  00E4               	movwf	_random_case
  1018  0639                     l1536:
  1019                           
  1020                           ;main.c: 64:     corner_cases(random_case);
  1021  0639  0865               	movf	_random_case+1,w
  1022  063A  00F9               	movwf	corner_cases@number+1
  1023  063B  0864               	movf	_random_case,w
  1024  063C  00F8               	movwf	corner_cases@number
  1025  063D  120A  118A  2282  120A  118A  	fcall	_corner_cases
  1026  0642                     l1538:
  1027                           
  1028                           ;main.c: 68: int seven[11] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0xC0};
  1029  0642  3049               	movlw	main@seven& (0+255)
  1030  0643  0084               	movwf	4
  1031  0644  30A0               	movlw	low main@F1148
  1032  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1033  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1034  0647  00C5               	movwf	??_main
  1035  0648  0804               	movf	4,w
  1036  0649  00C6               	movwf	??_main+1
  1037  064A  3016               	movlw	22
  1038  064B  00C7               	movwf	??_main+2
  1039  064C                     u680:
  1040  064C  0845               	movf	??_main,w
  1041  064D  0084               	movwf	4
  1042  064E  1383               	bcf	3,7	;select IRP bank1
  1043  064F  0800               	movf	0,w
  1044  0650  00C8               	movwf	??_main+3
  1045  0651  0AC5               	incf	??_main,f
  1046  0652  0846               	movf	??_main+1,w
  1047  0653  0084               	movwf	4
  1048  0654  0848               	movf	??_main+3,w
  1049  0655  0080               	movwf	0
  1050  0656  0AC6               	incf	??_main+1,f
  1051  0657  0BC7               	decfsz	??_main+2,f
  1052  0658  2E4C               	goto	u680
  1053  0659                     l1540:
  1054                           
  1055                           ;main.c: 71:     {;main.c: 72:         if (RC3 == 1)
  1056  0659  1283               	bcf	3,5	;RP0=0, select bank0
  1057  065A  1303               	bcf	3,6	;RP1=0, select bank0
  1058  065B  1D87               	btfss	7,3	;volatile
  1059  065C  2E5E               	goto	u691
  1060  065D  2E5F               	goto	u690
  1061  065E                     u691:
  1062  065E  2E59               	goto	l1540
  1063  065F                     u690:
  1064  065F                     l1542:
  1065                           
  1066                           ;main.c: 73:         {;main.c: 74:             reset_counter += 1;
  1067  065F  3001               	movlw	1
  1068  0660  07E2               	addwf	_reset_counter,f
  1069  0661  1803               	skipnc
  1070  0662  0AE3               	incf	_reset_counter+1,f
  1071  0663  3000               	movlw	0
  1072  0664  07E3               	addwf	_reset_counter+1,f
  1073  0665                     l1544:
  1074                           
  1075                           ;main.c: 75:             PORTB = seven[reset_counter];
  1076  0665  0862               	movf	_reset_counter,w
  1077  0666  00C5               	movwf	??_main
  1078  0667  0745               	addwf	??_main,w
  1079  0668  3E49               	addlw	(low (main@seven| 0))& (0+255)
  1080  0669  0084               	movwf	4
  1081  066A  1383               	bcf	3,7	;select IRP bank0
  1082  066B  0800               	movf	0,w
  1083  066C  0086               	movwf	6	;volatile
  1084                           
  1085                           ;main.c: 76:             while(reset_counter <= 10)
  1086  066D  2E95               	goto	l1554
  1087  066E                     l1546:
  1088                           
  1089                           ;main.c: 77:             {;main.c: 78:                 LCD_command(0x01);
  1090  066E  3001               	movlw	1
  1091  066F  120A  118A  222B  120A  118A  	fcall	_LCD_command
  1092                           
  1093                           ;main.c: 79:                 LCD_command(0x80);
  1094  0674  3080               	movlw	128
  1095  0675  120A  118A  222B  120A  118A  	fcall	_LCD_command
  1096  067A                     l1548:
  1097                           
  1098                           ;main.c: 80:                 show("Resetting...");
  1099  067A  30BA               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1100  067B  120A  118A  22BC  120A  118A  	fcall	_show
  1101  0680                     l1550:
  1102                           
  1103                           ;main.c: 81:                 _delay((unsigned long)((200)*(20000000/4000.0)));
  1104  0680  3006               	movlw	6
  1105  0681  1283               	bcf	3,5	;RP0=0, select bank0
  1106  0682  1303               	bcf	3,6	;RP1=0, select bank0
  1107  0683  00C7               	movwf	??_main+2
  1108  0684  3013               	movlw	19
  1109  0685  00C6               	movwf	??_main+1
  1110  0686  30AD               	movlw	173
  1111  0687  00C5               	movwf	??_main
  1112  0688                     u737:
  1113  0688  0BC5               	decfsz	??_main,f
  1114  0689  2E88               	goto	u737
  1115  068A  0BC6               	decfsz	??_main+1,f
  1116  068B  2E88               	goto	u737
  1117  068C  0BC7               	decfsz	??_main+2,f
  1118  068D  2E88               	goto	u737
  1119  068E                     l1552:
  1120                           
  1121                           ;main.c: 82:                 LCD_command(0x01);
  1122  068E  3001               	movlw	1
  1123  068F  120A  118A  222B  120A  118A  	fcall	_LCD_command
  1124                           
  1125                           ;main.c: 83:                 goto A;
  1126  0694  2E06               	goto	l1528
  1127  0695                     l1554:
  1128                           
  1129                           ;main.c: 76:             while(reset_counter <= 10)
  1130  0695  0863               	movf	_reset_counter+1,w
  1131  0696  3A80               	xorlw	128
  1132  0697  00FF               	movwf	btemp+1
  1133  0698  3080               	movlw	128
  1134  0699  027F               	subwf	btemp+1,w
  1135  069A  1D03               	skipz
  1136  069B  2E9E               	goto	u705
  1137  069C  300B               	movlw	11
  1138  069D  0262               	subwf	_reset_counter,w
  1139  069E                     u705:
  1140  069E  1C03               	skipc
  1141  069F  2EA1               	goto	u701
  1142  06A0  2EA2               	goto	u700
  1143  06A1                     u701:
  1144  06A1  2E6E               	goto	l1546
  1145  06A2                     u700:
  1146  06A2                     l1556:
  1147                           
  1148                           ;main.c: 85:             low_battery();
  1149  06A2  120A  118A  246D  120A  118A  	fcall	_low_battery
  1150  06A7  2E59               	goto	l1540
  1151  06A8  120A  118A  2800   	ljmp	start
  1152  06AB                     __end_of_main:
  1153                           
  1154                           	psect	text1
  1155  020F                     __ptext1:	
  1156 ;; *************** function _ser_int *****************
  1157 ;; Defined at:
  1158 ;;		line 121 in file "main.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;		None
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         0       0       0       0       0
  1173 ;;      Locals:         0       0       0       0       0
  1174 ;;      Temps:          0       0       0       0       0
  1175 ;;      Totals:         0       0       0       0       0
  1176 ;;Total ram usage:        0 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           
  1186                           ;psect for function _ser_int
  1187  020F                     _ser_int:
  1188  020F                     l1384:	
  1189                           ;incstack = 0
  1190                           ; Regs used in _ser_int: [wreg]
  1191                           
  1192                           
  1193                           ;main.c: 123:  RCSTA= 0b10010000;
  1194  020F  3090               	movlw	144
  1195  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1196  0211  1303               	bcf	3,6	;RP1=0, select bank0
  1197  0212  0098               	movwf	24	;volatile
  1198                           
  1199                           ;main.c: 124:  SPBRG=31;
  1200  0213  301F               	movlw	31
  1201  0214  1683               	bsf	3,5	;RP0=1, select bank1
  1202  0215  1303               	bcf	3,6	;RP1=0, select bank1
  1203  0216  0099               	movwf	25	;volatile
  1204  0217                     l95:
  1205  0217  0008               	return
  1206  0218                     __end_of_ser_int:
  1207                           
  1208                           	psect	text2
  1209  0511                     __ptext2:	
  1210 ;; *************** function _read_data *****************
  1211 ;; Defined at:
  1212 ;;		line 133 in file "main.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;		None
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  gps             1    2[BANK0 ] unsigned char 
  1217 ;;  j               2    3[BANK0 ] int 
  1218 ;;  f               2    7[BANK0 ] int 
  1219 ;;  i               2    5[BANK0 ] int 
  1220 ;;  flag            2    0[BANK0 ] int 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1230 ;;      Params:         0       0       0       0       0
  1231 ;;      Locals:         0       9       0       0       0
  1232 ;;      Temps:          1       0       0       0       0
  1233 ;;      Totals:         1       9       0       0       0
  1234 ;;Total ram usage:       10 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; Hardware stack levels required when called: 2
  1237 ;; This function calls:
  1238 ;;		_LCD_command
  1239 ;;		_rx
  1240 ;;		_show
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _read_data
  1248  0511                     _read_data:
  1249  0511                     l1388:	
  1250                           ;incstack = 0
  1251                           ; Regs used in _read_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1252                           
  1253                           
  1254                           ;main.c: 135:     int i, f, flag=0;
  1255  0511  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0512  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0513  01A0               	clrf	read_data@flag
  1258  0514  01A1               	clrf	read_data@flag+1
  1259                           
  1260                           ;main.c: 136:     for (int j=0; j<95;j++)
  1261  0515  01A3               	clrf	read_data@j
  1262  0516  01A4               	clrf	read_data@j+1
  1263  0517                     l1394:
  1264                           
  1265                           ;main.c: 137: {;main.c: 138: char gps = rx();
  1266  0517  120A  118A  2206  120A  118A  	fcall	_rx
  1267  051C  00F5               	movwf	??_read_data
  1268  051D  0875               	movf	??_read_data,w
  1269  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1270  051F  1303               	bcf	3,6	;RP1=0, select bank0
  1271  0520  00A2               	movwf	read_data@gps
  1272  0521                     l1396:
  1273                           
  1274                           ;main.c: 139: if (gps == '$')
  1275  0521  3024               	movlw	36
  1276  0522  0622               	xorwf	read_data@gps,w
  1277  0523  1D03               	btfss	3,2
  1278  0524  2D26               	goto	u601
  1279  0525  2D27               	goto	u600
  1280  0526                     u601:
  1281  0526  2DC2               	goto	l1446
  1282  0527                     u600:
  1283  0527                     l1398:
  1284                           
  1285                           ;main.c: 140: {;main.c: 142:     for(f=0;f<3;f++) {
  1286  0527  01A7               	clrf	read_data@f
  1287  0528  01A8               	clrf	read_data@f+1
  1288  0529                     l109:
  1289  0529  1283               	bcf	3,5	;RP0=0, select bank0
  1290  052A  1303               	bcf	3,6	;RP1=0, select bank0
  1291  052B  1E8C               	btfss	12,5	;volatile
  1292  052C  2D2E               	goto	u611
  1293  052D  2D2F               	goto	u610
  1294  052E                     u611:
  1295  052E  2D29               	goto	l109
  1296  052F                     u610:
  1297  052F                     l1404:
  1298                           
  1299                           ;main.c: 144:         r[f]=RCREG;
  1300  052F  081A               	movf	26,w	;volatile
  1301  0530  00F5               	movwf	??_read_data
  1302  0531  0827               	movf	read_data@f,w
  1303  0532  3E5F               	addlw	(low (_r| 0))& (0+255)
  1304  0533  0084               	movwf	4
  1305  0534  0875               	movf	??_read_data,w
  1306  0535  1383               	bcf	3,7	;select IRP bank0
  1307  0536  0080               	movwf	0
  1308  0537                     l1406:
  1309                           
  1310                           ;main.c: 145:       }
  1311  0537  3001               	movlw	1
  1312  0538  07A7               	addwf	read_data@f,f
  1313  0539  1803               	skipnc
  1314  053A  0AA8               	incf	read_data@f+1,f
  1315  053B  3000               	movlw	0
  1316  053C  07A8               	addwf	read_data@f+1,f
  1317  053D                     l1408:
  1318  053D  0828               	movf	read_data@f+1,w
  1319  053E  3A80               	xorlw	128
  1320  053F  00FF               	movwf	btemp+1
  1321  0540  3080               	movlw	128
  1322  0541  027F               	subwf	btemp+1,w
  1323  0542  1D03               	skipz
  1324  0543  2D46               	goto	u625
  1325  0544  3003               	movlw	3
  1326  0545  0227               	subwf	read_data@f,w
  1327  0546                     u625:
  1328  0546  1C03               	skipc
  1329  0547  2D49               	goto	u621
  1330  0548  2D4A               	goto	u620
  1331  0549                     u621:
  1332  0549  2D29               	goto	l109
  1333  054A                     u620:
  1334  054A                     l1410:
  1335                           
  1336                           ;main.c: 146:         r[f]='\0';
  1337  054A  1283               	bcf	3,5	;RP0=0, select bank0
  1338  054B  1303               	bcf	3,6	;RP1=0, select bank0
  1339  054C  0827               	movf	read_data@f,w
  1340  054D  3E5F               	addlw	(low (_r| 0))& (0+255)
  1341  054E  0084               	movwf	4
  1342  054F  1383               	bcf	3,7	;select IRP bank0
  1343  0550  0180               	clrf	0
  1344  0551                     l1412:
  1345                           
  1346                           ;main.c: 150:         for (f=0;pv[f]!='\0';f++)
  1347  0551  01A7               	clrf	read_data@f
  1348  0552  01A8               	clrf	read_data@f+1
  1349  0553  2D87               	goto	l1428
  1350  0554                     l1414:
  1351                           
  1352                           ;main.c: 151:         {;main.c: 152:             if(r[f]!=pv[f])
  1353  0554  0827               	movf	read_data@f,w
  1354  0555  3E6A               	addlw	(low (_pv| 0))& (0+255)
  1355  0556  0084               	movwf	4
  1356  0557  0800               	movf	0,w
  1357  0558  00F5               	movwf	??_read_data
  1358  0559  0827               	movf	read_data@f,w
  1359  055A  3E5F               	addlw	(low (_r| 0))& (0+255)
  1360  055B  0084               	movwf	4
  1361  055C  0800               	movf	0,w
  1362  055D  0675               	xorwf	??_read_data,w
  1363  055E  1903               	skipnz
  1364  055F  2D61               	goto	u631
  1365  0560  2D62               	goto	u630
  1366  0561                     u631:
  1367  0561  2D81               	goto	l1426
  1368  0562                     u630:
  1369  0562                     l1416:
  1370                           
  1371                           ;main.c: 153:             {;main.c: 154:                 flag += 1;
  1372  0562  3001               	movlw	1
  1373  0563  07A0               	addwf	read_data@flag,f
  1374  0564  1803               	skipnc
  1375  0565  0AA1               	incf	read_data@flag+1,f
  1376  0566  3000               	movlw	0
  1377  0567  07A1               	addwf	read_data@flag+1,f
  1378  0568                     l1418:
  1379                           
  1380                           ;main.c: 155:                 LCD_command(0x80);
  1381  0568  3080               	movlw	128
  1382  0569  120A  118A  222B  120A  118A  	fcall	_LCD_command
  1383  056E                     l1420:
  1384                           
  1385                           ;main.c: 156:                 show("ERROR,");
  1386  056E  30D2               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1387  056F  120A  118A  22BC  120A  118A  	fcall	_show
  1388  0574                     l1422:
  1389                           
  1390                           ;main.c: 157:                 LCD_command(0x94);
  1391  0574  3094               	movlw	148
  1392  0575  120A  118A  222B  120A  118A  	fcall	_LCD_command
  1393  057A                     l1424:
  1394                           
  1395                           ;main.c: 158:                 show("NO GPRMC FOUND");
  1396  057A  308F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1397  057B  120A  118A  22BC  120A  118A  	fcall	_show
  1398                           
  1399                           ;main.c: 159:                 break;
  1400  0580  2D8F               	goto	l1430
  1401  0581                     l1426:
  1402                           
  1403                           ;main.c: 161:         }
  1404  0581  3001               	movlw	1
  1405  0582  07A7               	addwf	read_data@f,f
  1406  0583  1803               	skipnc
  1407  0584  0AA8               	incf	read_data@f+1,f
  1408  0585  3000               	movlw	0
  1409  0586  07A8               	addwf	read_data@f+1,f
  1410  0587                     l1428:
  1411  0587  0827               	movf	read_data@f,w
  1412  0588  3E6A               	addlw	(low (_pv| 0))& (0+255)
  1413  0589  0084               	movwf	4
  1414  058A  0800               	movf	0,w
  1415  058B  1D03               	btfss	3,2
  1416  058C  2D8E               	goto	u641
  1417  058D  2D8F               	goto	u640
  1418  058E                     u641:
  1419  058E  2D54               	goto	l1414
  1420  058F                     u640:
  1421  058F                     l1430:
  1422                           
  1423                           ;main.c: 163:          if(flag==0) {
  1424  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0591  0820               	movf	read_data@flag,w
  1427  0592  0421               	iorwf	read_data@flag+1,w
  1428  0593  1D03               	btfss	3,2
  1429  0594  2D96               	goto	u651
  1430  0595  2D97               	goto	u650
  1431  0596                     u651:
  1432  0596  2DC2               	goto	l1446
  1433  0597                     u650:
  1434  0597                     l1432:
  1435                           
  1436                           ;main.c: 164:              for(i=0;i<68;i++)
  1437  0597  01A5               	clrf	read_data@i
  1438  0598  01A6               	clrf	read_data@i+1
  1439  0599                     l1438:
  1440                           
  1441                           ;main.c: 165:             {;main.c: 166:                 a[i]=rx();
  1442  0599  120A  118A  2206  120A  118A  	fcall	_rx
  1443  059E  00F5               	movwf	??_read_data
  1444  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1445  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1446  05A1  0825               	movf	read_data@i,w
  1447  05A2  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  1448  05A3  0084               	movwf	4
  1449  05A4  0875               	movf	??_read_data,w
  1450  05A5  1783               	bsf	3,7	;select IRP bank3
  1451  05A6  0080               	movwf	0
  1452  05A7                     l1440:
  1453                           
  1454                           ;main.c: 167:             }
  1455  05A7  3001               	movlw	1
  1456  05A8  07A5               	addwf	read_data@i,f
  1457  05A9  1803               	skipnc
  1458  05AA  0AA6               	incf	read_data@i+1,f
  1459  05AB  3000               	movlw	0
  1460  05AC  07A6               	addwf	read_data@i+1,f
  1461  05AD                     l1442:
  1462  05AD  0826               	movf	read_data@i+1,w
  1463  05AE  3A80               	xorlw	128
  1464  05AF  00FF               	movwf	btemp+1
  1465  05B0  3080               	movlw	128
  1466  05B1  027F               	subwf	btemp+1,w
  1467  05B2  1D03               	skipz
  1468  05B3  2DB6               	goto	u665
  1469  05B4  3044               	movlw	68
  1470  05B5  0225               	subwf	read_data@i,w
  1471  05B6                     u665:
  1472  05B6  1C03               	skipc
  1473  05B7  2DB9               	goto	u661
  1474  05B8  2DBA               	goto	u660
  1475  05B9                     u661:
  1476  05B9  2D99               	goto	l1438
  1477  05BA                     u660:
  1478  05BA                     l1444:
  1479                           
  1480                           ;main.c: 168:          a[i]='\0';
  1481  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1482  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1483  05BC  0825               	movf	read_data@i,w
  1484  05BD  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  1485  05BE  0084               	movwf	4
  1486  05BF  1783               	bsf	3,7	;select IRP bank3
  1487  05C0  0180               	clrf	0
  1488                           
  1489                           ;main.c: 169:          break;
  1490  05C1  2DD5               	goto	l119
  1491  05C2                     l1446:
  1492                           
  1493                           ;main.c: 172: }
  1494  05C2  3001               	movlw	1
  1495  05C3  07A3               	addwf	read_data@j,f
  1496  05C4  1803               	skipnc
  1497  05C5  0AA4               	incf	read_data@j+1,f
  1498  05C6  3000               	movlw	0
  1499  05C7  07A4               	addwf	read_data@j+1,f
  1500  05C8                     l1448:
  1501  05C8  0824               	movf	read_data@j+1,w
  1502  05C9  3A80               	xorlw	128
  1503  05CA  00FF               	movwf	btemp+1
  1504  05CB  3080               	movlw	128
  1505  05CC  027F               	subwf	btemp+1,w
  1506  05CD  1D03               	skipz
  1507  05CE  2DD1               	goto	u675
  1508  05CF  305F               	movlw	95
  1509  05D0  0223               	subwf	read_data@j,w
  1510  05D1                     u675:
  1511  05D1  1C03               	skipc
  1512  05D2  2DD4               	goto	u671
  1513  05D3  2DD5               	goto	u670
  1514  05D4                     u671:
  1515  05D4  2D17               	goto	l1394
  1516  05D5                     u670:
  1517  05D5                     l119:
  1518  05D5  0008               	return
  1519  05D6                     __end_of_read_data:
  1520                           
  1521                           	psect	text3
  1522  0206                     __ptext3:	
  1523 ;; *************** function _rx *****************
  1524 ;; Defined at:
  1525 ;;		line 115 in file "main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      unsigned char 
  1532 ;; Registers used:
  1533 ;;		wreg
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1539 ;;      Params:         0       0       0       0       0
  1540 ;;      Locals:         0       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0
  1542 ;;      Totals:         0       0       0       0       0
  1543 ;;Total ram usage:        0 bytes
  1544 ;; Hardware stack levels used: 1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_read_data
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _rx
  1554  0206                     _rx:
  1555  0206                     l1260:	
  1556                           ;incstack = 0
  1557                           ; Regs used in _rx: [wreg]
  1558                           
  1559  0206                     l89:	
  1560                           ;main.c: 117:  while(!RCIF);
  1561                           
  1562  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0208  1E8C               	btfss	12,5	;volatile
  1565  0209  2A0B               	goto	u521
  1566  020A  2A0C               	goto	u520
  1567  020B                     u521:
  1568  020B  2A06               	goto	l89
  1569  020C                     u520:
  1570  020C                     l91:
  1571                           
  1572                           ;main.c: 118:  RCIF=0;
  1573  020C  128C               	bcf	12,5	;volatile
  1574  020D                     l1262:
  1575                           
  1576                           ;main.c: 119:  return RCREG;
  1577  020D  081A               	movf	26,w	;volatile
  1578  020E                     l92:
  1579  020E  0008               	return
  1580  020F                     __end_of_rx:
  1581                           
  1582                           	psect	text4
  1583  02DB                     __ptext4:	
  1584 ;; *************** function _random_number *****************
  1585 ;; Defined at:
  1586 ;;		line 280 in file "main.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  l               2   23[BANK0 ] int 
  1589 ;;  u               2   25[BANK0 ] int 
  1590 ;;  c               2   27[BANK0 ] int 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  rn              2   35[BANK0 ] int 
  1593 ;;  count           2   33[BANK0 ] int 
  1594 ;;  upper           2   31[BANK0 ] int 
  1595 ;;  lower           2   29[BANK0 ] int 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2   23[BANK0 ] int 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1605 ;;      Params:         0       6       0       0       0
  1606 ;;      Locals:         0       8       0       0       0
  1607 ;;      Temps:          0       0       0       0       0
  1608 ;;      Totals:         0      14       0       0       0
  1609 ;;Total ram usage:       14 bytes
  1610 ;; Hardware stack levels used: 1
  1611 ;; Hardware stack levels required when called: 3
  1612 ;; This function calls:
  1613 ;;		_printRandoms
  1614 ;; This function is called by:
  1615 ;;		_main
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           
  1620                           ;psect for function _random_number
  1621  02DB                     _random_number:
  1622  02DB                     l1450:	
  1623                           ;incstack = 0
  1624                           ; Regs used in _random_number: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1625                           
  1626                           
  1627                           ;main.c: 280: int random_number(int l, int u, int c);main.c: 281: {;main.c: 282:     int
      +                           lower = l, upper = u, count = c, rn;
  1628  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  1629  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  1630  02DD  0838               	movf	random_number@l+1,w
  1631  02DE  00BE               	movwf	random_number@lower+1
  1632  02DF  0837               	movf	random_number@l,w
  1633  02E0  00BD               	movwf	random_number@lower
  1634  02E1  083A               	movf	random_number@u+1,w
  1635  02E2  00C0               	movwf	random_number@upper+1
  1636  02E3  0839               	movf	random_number@u,w
  1637  02E4  00BF               	movwf	random_number@upper
  1638  02E5  083C               	movf	random_number@c+1,w
  1639  02E6  00C2               	movwf	random_number@count+1
  1640  02E7  083B               	movf	random_number@c,w
  1641  02E8  00C1               	movwf	random_number@count
  1642  02E9                     l1452:
  1643                           
  1644                           ;main.c: 288:     rn = printRandoms(lower, upper, count);
  1645  02E9  083E               	movf	random_number@lower+1,w
  1646  02EA  00AE               	movwf	printRandoms@lower+1
  1647  02EB  083D               	movf	random_number@lower,w
  1648  02EC  00AD               	movwf	printRandoms@lower
  1649  02ED  0840               	movf	random_number@upper+1,w
  1650  02EE  00B0               	movwf	printRandoms@upper+1
  1651  02EF  083F               	movf	random_number@upper,w
  1652  02F0  00AF               	movwf	printRandoms@upper
  1653  02F1  0842               	movf	random_number@count+1,w
  1654  02F2  00B2               	movwf	printRandoms@count+1
  1655  02F3  0841               	movf	random_number@count,w
  1656  02F4  00B1               	movwf	printRandoms@count
  1657  02F5  120A  118A  2343  120A  118A  	fcall	_printRandoms
  1658  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1659  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1660  02FC  082E               	movf	?_printRandoms+1,w
  1661  02FD  00C4               	movwf	random_number@rn+1
  1662  02FE  082D               	movf	?_printRandoms,w
  1663  02FF  00C3               	movwf	random_number@rn
  1664  0300                     l1454:
  1665                           
  1666                           ;main.c: 290:     return rn;
  1667  0300  0844               	movf	random_number@rn+1,w
  1668  0301  00B8               	movwf	?_random_number+1
  1669  0302  0843               	movf	random_number@rn,w
  1670  0303  00B7               	movwf	?_random_number
  1671  0304                     l162:
  1672  0304  0008               	return
  1673  0305                     __end_of_random_number:
  1674                           
  1675                           	psect	text5
  1676  0343                     __ptext5:	
  1677 ;; *************** function _printRandoms *****************
  1678 ;; Defined at:
  1679 ;;		line 272 in file "main.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;  lower           2   13[BANK0 ] int 
  1682 ;;  upper           2   15[BANK0 ] int 
  1683 ;;  count           2   17[BANK0 ] int 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  num             2   21[BANK0 ] int 
  1686 ;;  z               2    0        int 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  2   13[BANK0 ] int 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1696 ;;      Params:         0       6       0       0       0
  1697 ;;      Locals:         0       2       0       0       0
  1698 ;;      Temps:          0       2       0       0       0
  1699 ;;      Totals:         0      10       0       0       0
  1700 ;;Total ram usage:       10 bytes
  1701 ;; Hardware stack levels used: 1
  1702 ;; Hardware stack levels required when called: 2
  1703 ;; This function calls:
  1704 ;;		___awmod
  1705 ;;		_rand
  1706 ;; This function is called by:
  1707 ;;		_random_number
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           
  1712                           ;psect for function _printRandoms
  1713  0343                     _printRandoms:
  1714  0343                     l1374:	
  1715                           ;incstack = 0
  1716                           ; Regs used in _printRandoms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1717                           
  1718  0343  2B75               	goto	l156
  1719  0344                     l1376:
  1720                           
  1721                           ;main.c: 276:         int num = (rand() % (upper - lower + 1)) + lower;
  1722  0344  1283               	bcf	3,5	;RP0=0, select bank0
  1723  0345  1303               	bcf	3,6	;RP1=0, select bank0
  1724  0346  082D               	movf	printRandoms@lower,w
  1725  0347  022F               	subwf	printRandoms@upper,w
  1726  0348  00B3               	movwf	??_printRandoms
  1727  0349  082E               	movf	printRandoms@lower+1,w
  1728  034A  1C03               	skipc
  1729  034B  0A2E               	incf	printRandoms@lower+1,w
  1730  034C  0230               	subwf	printRandoms@upper+1,w
  1731  034D  00B4               	movwf	??_printRandoms+1
  1732  034E  0833               	movf	??_printRandoms,w
  1733  034F  3E01               	addlw	1
  1734  0350  00A7               	movwf	___awmod@divisor
  1735  0351  0834               	movf	??_printRandoms+1,w
  1736  0352  1803               	skipnc
  1737  0353  3E01               	addlw	1
  1738  0354  3E00               	addlw	0
  1739  0355  00A8               	movwf	___awmod@divisor+1
  1740  0356  120A  118A  23CB  120A  118A  	fcall	_rand
  1741  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1742  035C  1303               	bcf	3,6	;RP1=0, select bank0
  1743  035D  0821               	movf	?_rand+1,w
  1744  035E  00AA               	movwf	___awmod@dividend+1
  1745  035F  0820               	movf	?_rand,w
  1746  0360  00A9               	movwf	___awmod@dividend
  1747  0361  120A  118A  2412  120A  118A  	fcall	___awmod
  1748  0366  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0367  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0368  082D               	movf	printRandoms@lower,w
  1751  0369  0727               	addwf	?___awmod,w
  1752  036A  00B5               	movwf	printRandoms@num
  1753  036B  082E               	movf	printRandoms@lower+1,w
  1754  036C  1803               	skipnc
  1755  036D  0A2E               	incf	printRandoms@lower+1,w
  1756  036E  0728               	addwf	?___awmod+1,w
  1757  036F  00B6               	movwf	printRandoms@num+1
  1758  0370                     l1378:
  1759                           
  1760                           ;main.c: 277:         return num;
  1761  0370  0836               	movf	printRandoms@num+1,w
  1762  0371  00AE               	movwf	?_printRandoms+1
  1763  0372  0835               	movf	printRandoms@num,w
  1764  0373  00AD               	movwf	?_printRandoms
  1765  0374  2B84               	goto	l158
  1766  0375                     l156:
  1767  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1768  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0377  0832               	movf	printRandoms@count+1,w
  1770  0378  3A80               	xorlw	128
  1771  0379  00FF               	movwf	btemp+1
  1772  037A  3080               	movlw	128
  1773  037B  027F               	subwf	btemp+1,w
  1774  037C  1D03               	skipz
  1775  037D  2B80               	goto	u595
  1776  037E  3001               	movlw	1
  1777  037F  0231               	subwf	printRandoms@count,w
  1778  0380                     u595:
  1779  0380  1803               	skipnc
  1780  0381  2B83               	goto	u591
  1781  0382  2B84               	goto	u590
  1782  0383                     u591:
  1783  0383  2B44               	goto	l1376
  1784  0384                     u590:
  1785  0384                     l158:
  1786  0384  0008               	return
  1787  0385                     __end_of_printRandoms:
  1788                           
  1789                           	psect	text6
  1790  03CB                     __ptext6:	
  1791 ;; *************** function _rand *****************
  1792 ;; Defined at:
  1793 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\rand.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;		None
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  2    0[BANK0 ] int 
  1800 ;; Registers used:
  1801 ;;		wreg, status,2, status,0, pclath, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1807 ;;      Params:         0       2       0       0       0
  1808 ;;      Locals:         0       0       0       0       0
  1809 ;;      Temps:          0       5       0       0       0
  1810 ;;      Totals:         0       7       0       0       0
  1811 ;;Total ram usage:        7 bytes
  1812 ;; Hardware stack levels used: 1
  1813 ;; Hardware stack levels required when called: 1
  1814 ;; This function calls:
  1815 ;;		___lmul
  1816 ;; This function is called by:
  1817 ;;		_printRandoms
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           
  1822                           ;psect for function _rand
  1823  03CB                     _rand:
  1824  03CB                     l1214:	
  1825                           ;incstack = 0
  1826                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1827                           
  1828  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1829  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  1830  03CD  0869               	movf	_randx+3,w
  1831  03CE  00F3               	movwf	___lmul@multiplier+3
  1832  03CF  0868               	movf	_randx+2,w
  1833  03D0  00F2               	movwf	___lmul@multiplier+2
  1834  03D1  0867               	movf	_randx+1,w
  1835  03D2  00F1               	movwf	___lmul@multiplier+1
  1836  03D3  0866               	movf	_randx,w
  1837  03D4  00F0               	movwf	___lmul@multiplier
  1838  03D5  3041               	movlw	65
  1839  03D6  00F7               	movwf	___lmul@multiplicand+3
  1840  03D7  30C6               	movlw	198
  1841  03D8  00F6               	movwf	___lmul@multiplicand+2
  1842  03D9  304E               	movlw	78
  1843  03DA  00F5               	movwf	___lmul@multiplicand+1
  1844  03DB  306D               	movlw	109
  1845  03DC  00F4               	movwf	___lmul@multiplicand
  1846  03DD  120A  118A  2385  120A  118A  	fcall	___lmul
  1847  03E2  0873               	movf	?___lmul+3,w
  1848  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  1849  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  1850  03E5  00E9               	movwf	_randx+3
  1851  03E6  0872               	movf	?___lmul+2,w
  1852  03E7  00E8               	movwf	_randx+2
  1853  03E8  0871               	movf	?___lmul+1,w
  1854  03E9  00E7               	movwf	_randx+1
  1855  03EA  0870               	movf	?___lmul,w
  1856  03EB  00E6               	movwf	_randx
  1857  03EC                     l1216:
  1858  03EC  3039               	movlw	57
  1859  03ED  07E6               	addwf	_randx,f
  1860  03EE  3030               	movlw	48
  1861  03EF  1803               	skipnc
  1862  03F0  3031               	movlw	49
  1863  03F1  07E7               	addwf	_randx+1,f
  1864  03F2  3000               	movlw	0
  1865  03F3  1803               	skipnc
  1866  03F4  3001               	movlw	1
  1867  03F5  07E8               	addwf	_randx+2,f
  1868  03F6  3000               	movlw	0
  1869  03F7  1803               	skipnc
  1870  03F8  3001               	movlw	1
  1871  03F9  07E9               	addwf	_randx+3,f
  1872  03FA                     l1218:
  1873  03FA  0866               	movf	_randx,w
  1874  03FB  00A2               	movwf	??_rand
  1875  03FC  0867               	movf	_randx+1,w
  1876  03FD  00A3               	movwf	??_rand+1
  1877  03FE  0868               	movf	_randx+2,w
  1878  03FF  00A4               	movwf	??_rand+2
  1879  0400  0869               	movf	_randx+3,w
  1880  0401  00A5               	movwf	??_rand+3
  1881  0402  3010               	movlw	16
  1882  0403  00A6               	movwf	??_rand+4
  1883  0404                     u425:
  1884  0404  0D25               	rlf	??_rand+3,w
  1885  0405  0CA5               	rrf	??_rand+3,f
  1886  0406  0CA4               	rrf	??_rand+2,f
  1887  0407  0CA3               	rrf	??_rand+1,f
  1888  0408  0CA2               	rrf	??_rand,f
  1889  0409                     u420:
  1890  0409  0BA6               	decfsz	??_rand+4,f
  1891  040A  2C04               	goto	u425
  1892  040B  30FF               	movlw	255
  1893  040C  0522               	andwf	??_rand,w
  1894  040D  00A0               	movwf	?_rand
  1895  040E  307F               	movlw	127
  1896  040F  0523               	andwf	??_rand+1,w
  1897  0410  00A1               	movwf	?_rand+1
  1898  0411                     l704:
  1899  0411  0008               	return
  1900  0412                     __end_of_rand:
  1901                           
  1902                           	psect	text7
  1903  0385                     __ptext7:	
  1904 ;; *************** function ___lmul *****************
  1905 ;; Defined at:
  1906 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  multiplier      4    0[COMMON] unsigned long 
  1909 ;;  multiplicand    4    4[COMMON] unsigned long 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  product         4    9[COMMON] unsigned long 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  4    0[COMMON] unsigned long 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         8       0       0       0       0
  1922 ;;      Locals:         4       0       0       0       0
  1923 ;;      Temps:          1       0       0       0       0
  1924 ;;      Totals:        13       0       0       0       0
  1925 ;;Total ram usage:       13 bytes
  1926 ;; Hardware stack levels used: 1
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_rand
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           
  1935                           ;psect for function ___lmul
  1936  0385                     ___lmul:
  1937  0385                     l1194:	
  1938                           ;incstack = 0
  1939                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1940                           
  1941  0385  3000               	movlw	0
  1942  0386  00FC               	movwf	___lmul@product+3
  1943  0387  3000               	movlw	0
  1944  0388  00FB               	movwf	___lmul@product+2
  1945  0389  3000               	movlw	0
  1946  038A  00FA               	movwf	___lmul@product+1
  1947  038B  3000               	movlw	0
  1948  038C  00F9               	movwf	___lmul@product
  1949  038D                     l1196:
  1950  038D  1C70               	btfss	___lmul@multiplier,0
  1951  038E  2B90               	goto	u371
  1952  038F  2B91               	goto	u370
  1953  0390                     u371:
  1954  0390  2BA8               	goto	l1200
  1955  0391                     u370:
  1956  0391                     l1198:
  1957  0391  0874               	movf	___lmul@multiplicand,w
  1958  0392  07F9               	addwf	___lmul@product,f
  1959  0393  0875               	movf	___lmul@multiplicand+1,w
  1960  0394  1103               	clrz
  1961  0395  1803               	skipnc
  1962  0396  3E01               	addlw	1
  1963  0397  1903               	skipnz
  1964  0398  2B9A               	goto	u381
  1965  0399  07FA               	addwf	___lmul@product+1,f
  1966  039A                     u381:
  1967  039A  0876               	movf	___lmul@multiplicand+2,w
  1968  039B  1103               	clrz
  1969  039C  1803               	skipnc
  1970  039D  3E01               	addlw	1
  1971  039E  1903               	skipnz
  1972  039F  2BA1               	goto	u382
  1973  03A0  07FB               	addwf	___lmul@product+2,f
  1974  03A1                     u382:
  1975  03A1  0877               	movf	___lmul@multiplicand+3,w
  1976  03A2  1103               	clrz
  1977  03A3  1803               	skipnc
  1978  03A4  3E01               	addlw	1
  1979  03A5  1903               	skipnz
  1980  03A6  2BA8               	goto	u383
  1981  03A7  07FC               	addwf	___lmul@product+3,f
  1982  03A8                     u383:
  1983  03A8                     l1200:
  1984  03A8  3001               	movlw	1
  1985  03A9  00F8               	movwf	??___lmul
  1986  03AA                     u395:
  1987  03AA  1003               	clrc
  1988  03AB  0DF4               	rlf	___lmul@multiplicand,f
  1989  03AC  0DF5               	rlf	___lmul@multiplicand+1,f
  1990  03AD  0DF6               	rlf	___lmul@multiplicand+2,f
  1991  03AE  0DF7               	rlf	___lmul@multiplicand+3,f
  1992  03AF  0BF8               	decfsz	??___lmul,f
  1993  03B0  2BAA               	goto	u395
  1994  03B1                     l1202:
  1995  03B1  3001               	movlw	1
  1996  03B2                     u405:
  1997  03B2  1003               	clrc
  1998  03B3  0CF3               	rrf	___lmul@multiplier+3,f
  1999  03B4  0CF2               	rrf	___lmul@multiplier+2,f
  2000  03B5  0CF1               	rrf	___lmul@multiplier+1,f
  2001  03B6  0CF0               	rrf	___lmul@multiplier,f
  2002  03B7  3EFF               	addlw	-1
  2003  03B8  1D03               	skipz
  2004  03B9  2BB2               	goto	u405
  2005  03BA  0873               	movf	___lmul@multiplier+3,w
  2006  03BB  0472               	iorwf	___lmul@multiplier+2,w
  2007  03BC  0471               	iorwf	___lmul@multiplier+1,w
  2008  03BD  0470               	iorwf	___lmul@multiplier,w
  2009  03BE  1D03               	skipz
  2010  03BF  2BC1               	goto	u411
  2011  03C0  2BC2               	goto	u410
  2012  03C1                     u411:
  2013  03C1  2B8D               	goto	l1196
  2014  03C2                     u410:
  2015  03C2                     l1204:
  2016  03C2  087C               	movf	___lmul@product+3,w
  2017  03C3  00F3               	movwf	?___lmul+3
  2018  03C4  087B               	movf	___lmul@product+2,w
  2019  03C5  00F2               	movwf	?___lmul+2
  2020  03C6  087A               	movf	___lmul@product+1,w
  2021  03C7  00F1               	movwf	?___lmul+1
  2022  03C8  0879               	movf	___lmul@product,w
  2023  03C9  00F0               	movwf	?___lmul
  2024  03CA                     l262:
  2025  03CA  0008               	return
  2026  03CB                     __end_of___lmul:
  2027                           
  2028                           	psect	text8
  2029  0412                     __ptext8:	
  2030 ;; *************** function ___awmod *****************
  2031 ;; Defined at:
  2032 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  divisor         2    7[BANK0 ] int 
  2035 ;;  dividend        2    9[BANK0 ] int 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  sign            1   12[BANK0 ] unsigned char 
  2038 ;;  counter         1   11[BANK0 ] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  2    7[BANK0 ] int 
  2041 ;; Registers used:
  2042 ;;		wreg, status,2, status,0
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2048 ;;      Params:         0       4       0       0       0
  2049 ;;      Locals:         0       2       0       0       0
  2050 ;;      Temps:          1       0       0       0       0
  2051 ;;      Totals:         1       6       0       0       0
  2052 ;;Total ram usage:        7 bytes
  2053 ;; Hardware stack levels used: 1
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_printRandoms
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           
  2062                           ;psect for function ___awmod
  2063  0412                     ___awmod:
  2064  0412                     l1222:	
  2065                           ;incstack = 0
  2066                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2067                           
  2068  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0414  01AC               	clrf	___awmod@sign
  2071  0415                     l1224:
  2072  0415  1FAA               	btfss	___awmod@dividend+1,7
  2073  0416  2C18               	goto	u431
  2074  0417  2C19               	goto	u430
  2075  0418                     u431:
  2076  0418  2C20               	goto	l1230
  2077  0419                     u430:
  2078  0419                     l1226:
  2079  0419  09A9               	comf	___awmod@dividend,f
  2080  041A  09AA               	comf	___awmod@dividend+1,f
  2081  041B  0AA9               	incf	___awmod@dividend,f
  2082  041C  1903               	skipnz
  2083  041D  0AAA               	incf	___awmod@dividend+1,f
  2084  041E                     l1228:
  2085  041E  01AC               	clrf	___awmod@sign
  2086  041F  0AAC               	incf	___awmod@sign,f
  2087  0420                     l1230:
  2088  0420  1FA8               	btfss	___awmod@divisor+1,7
  2089  0421  2C23               	goto	u441
  2090  0422  2C24               	goto	u440
  2091  0423                     u441:
  2092  0423  2C29               	goto	l1234
  2093  0424                     u440:
  2094  0424                     l1232:
  2095  0424  09A7               	comf	___awmod@divisor,f
  2096  0425  09A8               	comf	___awmod@divisor+1,f
  2097  0426  0AA7               	incf	___awmod@divisor,f
  2098  0427  1903               	skipnz
  2099  0428  0AA8               	incf	___awmod@divisor+1,f
  2100  0429                     l1234:
  2101  0429  0827               	movf	___awmod@divisor,w
  2102  042A  0428               	iorwf	___awmod@divisor+1,w
  2103  042B  1903               	btfsc	3,2
  2104  042C  2C2E               	goto	u451
  2105  042D  2C2F               	goto	u450
  2106  042E                     u451:
  2107  042E  2C5E               	goto	l1252
  2108  042F                     u450:
  2109  042F                     l1236:
  2110  042F  01AB               	clrf	___awmod@counter
  2111  0430  0AAB               	incf	___awmod@counter,f
  2112  0431  2C3D               	goto	l1242
  2113  0432                     l1238:
  2114  0432  3001               	movlw	1
  2115  0433                     u465:
  2116  0433  1003               	clrc
  2117  0434  0DA7               	rlf	___awmod@divisor,f
  2118  0435  0DA8               	rlf	___awmod@divisor+1,f
  2119  0436  3EFF               	addlw	-1
  2120  0437  1D03               	skipz
  2121  0438  2C33               	goto	u465
  2122  0439                     l1240:
  2123  0439  3001               	movlw	1
  2124  043A  00FD               	movwf	??___awmod
  2125  043B  087D               	movf	??___awmod,w
  2126  043C  07AB               	addwf	___awmod@counter,f
  2127  043D                     l1242:
  2128  043D  1FA8               	btfss	___awmod@divisor+1,7
  2129  043E  2C40               	goto	u471
  2130  043F  2C41               	goto	u470
  2131  0440                     u471:
  2132  0440  2C32               	goto	l1238
  2133  0441                     u470:
  2134  0441                     l1244:
  2135  0441  0828               	movf	___awmod@divisor+1,w
  2136  0442  022A               	subwf	___awmod@dividend+1,w
  2137  0443  1D03               	skipz
  2138  0444  2C47               	goto	u485
  2139  0445  0827               	movf	___awmod@divisor,w
  2140  0446  0229               	subwf	___awmod@dividend,w
  2141  0447                     u485:
  2142  0447  1C03               	skipc
  2143  0448  2C4A               	goto	u481
  2144  0449  2C4B               	goto	u480
  2145  044A                     u481:
  2146  044A  2C51               	goto	l1248
  2147  044B                     u480:
  2148  044B                     l1246:
  2149  044B  0827               	movf	___awmod@divisor,w
  2150  044C  02A9               	subwf	___awmod@dividend,f
  2151  044D  0828               	movf	___awmod@divisor+1,w
  2152  044E  1C03               	skipc
  2153  044F  03AA               	decf	___awmod@dividend+1,f
  2154  0450  02AA               	subwf	___awmod@dividend+1,f
  2155  0451                     l1248:
  2156  0451  3001               	movlw	1
  2157  0452                     u495:
  2158  0452  1003               	clrc
  2159  0453  0CA8               	rrf	___awmod@divisor+1,f
  2160  0454  0CA7               	rrf	___awmod@divisor,f
  2161  0455  3EFF               	addlw	-1
  2162  0456  1D03               	skipz
  2163  0457  2C52               	goto	u495
  2164  0458                     l1250:
  2165  0458  3001               	movlw	1
  2166  0459  02AB               	subwf	___awmod@counter,f
  2167  045A  1D03               	btfss	3,2
  2168  045B  2C5D               	goto	u501
  2169  045C  2C5E               	goto	u500
  2170  045D                     u501:
  2171  045D  2C41               	goto	l1244
  2172  045E                     u500:
  2173  045E                     l1252:
  2174  045E  082C               	movf	___awmod@sign,w
  2175  045F  1903               	btfsc	3,2
  2176  0460  2C62               	goto	u511
  2177  0461  2C63               	goto	u510
  2178  0462                     u511:
  2179  0462  2C68               	goto	l1256
  2180  0463                     u510:
  2181  0463                     l1254:
  2182  0463  09A9               	comf	___awmod@dividend,f
  2183  0464  09AA               	comf	___awmod@dividend+1,f
  2184  0465  0AA9               	incf	___awmod@dividend,f
  2185  0466  1903               	skipnz
  2186  0467  0AAA               	incf	___awmod@dividend+1,f
  2187  0468                     l1256:
  2188  0468  082A               	movf	___awmod@dividend+1,w
  2189  0469  00A8               	movwf	?___awmod+1
  2190  046A  0829               	movf	___awmod@dividend,w
  2191  046B  00A7               	movwf	?___awmod
  2192  046C                     l414:
  2193  046C  0008               	return
  2194  046D                     __end_of___awmod:
  2195                           
  2196                           	psect	text9
  2197  046D                     __ptext9:	
  2198 ;; *************** function _low_battery *****************
  2199 ;; Defined at:
  2200 ;;		line 248 in file "main.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2214 ;;      Params:         0       0       0       0       0
  2215 ;;      Locals:         0       0       0       0       0
  2216 ;;      Temps:          3       0       0       0       0
  2217 ;;      Totals:         3       0       0       0       0
  2218 ;;Total ram usage:        3 bytes
  2219 ;; Hardware stack levels used: 1
  2220 ;; Hardware stack levels required when called: 2
  2221 ;; This function calls:
  2222 ;;		_LCD_command
  2223 ;;		_show
  2224 ;; This function is called by:
  2225 ;;		_main
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _low_battery
  2231  046D                     _low_battery:
  2232  046D                     l1472:	
  2233                           ;incstack = 0
  2234                           ; Regs used in _low_battery: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2235                           
  2236                           
  2237                           ;main.c: 250:     LCD_command(0x01);
  2238  046D  3001               	movlw	1
  2239  046E  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2240                           
  2241                           ;main.c: 251:     LCD_command(0x80);
  2242  0473  3080               	movlw	128
  2243  0474  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2244  0479                     l1474:
  2245                           
  2246                           ;main.c: 252:     show("-!!!BATTERY LOW!!!-");
  2247  0479  3055               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2248  047A  120A  118A  22BC  120A  118A  	fcall	_show
  2249  047F                     l1476:
  2250                           
  2251                           ;main.c: 253:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2252  047F  3003               	movlw	3
  2253  0480  00F7               	movwf	??_low_battery+2
  2254  0481  308A               	movlw	138
  2255  0482  00F6               	movwf	??_low_battery+1
  2256  0483  3055               	movlw	85
  2257  0484  00F5               	movwf	??_low_battery
  2258  0485                     u747:
  2259  0485  0BF5               	decfsz	??_low_battery,f
  2260  0486  2C85               	goto	u747
  2261  0487  0BF6               	decfsz	??_low_battery+1,f
  2262  0488  2C85               	goto	u747
  2263  0489  0BF7               	decfsz	??_low_battery+2,f
  2264  048A  2C85               	goto	u747
  2265  048B  2C8C               	nop2
  2266  048C                     l1478:
  2267                           
  2268                           ;main.c: 254:     LCD_command(0xC0);
  2269  048C  30C0               	movlw	192
  2270  048D  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2271  0492                     l1480:
  2272                           
  2273                           ;main.c: 255:     show("-!!!BATTERY LOW!!!-");
  2274  0492  3055               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2275  0493  120A  118A  22BC  120A  118A  	fcall	_show
  2276  0498                     l1482:
  2277                           
  2278                           ;main.c: 256:     LCD_command(0xD4);
  2279  0498  30D4               	movlw	212
  2280  0499  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2281  049E                     l1484:
  2282                           
  2283                           ;main.c: 257:     show("RECHARGE IMMEDIATELY");
  2284  049E  3040               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2285  049F  120A  118A  22BC  120A  118A  	fcall	_show
  2286  04A4                     l1486:
  2287                           
  2288                           ;main.c: 258:     _delay((unsigned long)((300)*(20000000/4000.0)));
  2289  04A4  3008               	movlw	8
  2290  04A5  00F7               	movwf	??_low_battery+2
  2291  04A6  309D               	movlw	157
  2292  04A7  00F6               	movwf	??_low_battery+1
  2293  04A8  3005               	movlw	5
  2294  04A9  00F5               	movwf	??_low_battery
  2295  04AA                     u757:
  2296  04AA  0BF5               	decfsz	??_low_battery,f
  2297  04AB  2CAA               	goto	u757
  2298  04AC  0BF6               	decfsz	??_low_battery+1,f
  2299  04AD  2CAA               	goto	u757
  2300  04AE  0BF7               	decfsz	??_low_battery+2,f
  2301  04AF  2CAA               	goto	u757
  2302  04B0  2CB1               	nop2
  2303  04B1                     l1488:
  2304                           
  2305                           ;main.c: 259:     LCD_command(0x01);
  2306  04B1  3001               	movlw	1
  2307  04B2  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2308  04B7                     l1490:
  2309                           
  2310                           ;main.c: 260:     LCD_command(0xC0);
  2311  04B7  30C0               	movlw	192
  2312  04B8  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2313  04BD                     l1492:
  2314                           
  2315                           ;main.c: 261:     show("SWITCHING OFF");
  2316  04BD  30AC               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2317  04BE  120A  118A  22BC  120A  118A  	fcall	_show
  2318  04C3                     l1494:
  2319                           
  2320                           ;main.c: 262:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2321  04C3  3003               	movlw	3
  2322  04C4  00F7               	movwf	??_low_battery+2
  2323  04C5  308A               	movlw	138
  2324  04C6  00F6               	movwf	??_low_battery+1
  2325  04C7  3055               	movlw	85
  2326  04C8  00F5               	movwf	??_low_battery
  2327  04C9                     u767:
  2328  04C9  0BF5               	decfsz	??_low_battery,f
  2329  04CA  2CC9               	goto	u767
  2330  04CB  0BF6               	decfsz	??_low_battery+1,f
  2331  04CC  2CC9               	goto	u767
  2332  04CD  0BF7               	decfsz	??_low_battery+2,f
  2333  04CE  2CC9               	goto	u767
  2334  04CF  2CD0               	nop2
  2335  04D0                     l1496:
  2336                           
  2337                           ;main.c: 263:     show(".");
  2338  04D0  30D0               	movlw	(low (((STR_1+9)-__stringbase)| (0+32768)))& (0+255)
  2339  04D1  120A  118A  22BC  120A  118A  	fcall	_show
  2340  04D6                     l1498:
  2341                           
  2342                           ;main.c: 264:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2343  04D6  3003               	movlw	3
  2344  04D7  00F7               	movwf	??_low_battery+2
  2345  04D8  308A               	movlw	138
  2346  04D9  00F6               	movwf	??_low_battery+1
  2347  04DA  3055               	movlw	85
  2348  04DB  00F5               	movwf	??_low_battery
  2349  04DC                     u777:
  2350  04DC  0BF5               	decfsz	??_low_battery,f
  2351  04DD  2CDC               	goto	u777
  2352  04DE  0BF6               	decfsz	??_low_battery+1,f
  2353  04DF  2CDC               	goto	u777
  2354  04E0  0BF7               	decfsz	??_low_battery+2,f
  2355  04E1  2CDC               	goto	u777
  2356  04E2  2CE3               	nop2
  2357  04E3                     l1500:
  2358                           
  2359                           ;main.c: 265:     show(".");
  2360  04E3  30D0               	movlw	(low (((STR_1+9)-__stringbase)| (0+32768)))& (0+255)
  2361  04E4  120A  118A  22BC  120A  118A  	fcall	_show
  2362  04E9                     l1502:
  2363                           
  2364                           ;main.c: 266:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2365  04E9  3003               	movlw	3
  2366  04EA  00F7               	movwf	??_low_battery+2
  2367  04EB  308A               	movlw	138
  2368  04EC  00F6               	movwf	??_low_battery+1
  2369  04ED  3055               	movlw	85
  2370  04EE  00F5               	movwf	??_low_battery
  2371  04EF                     u787:
  2372  04EF  0BF5               	decfsz	??_low_battery,f
  2373  04F0  2CEF               	goto	u787
  2374  04F1  0BF6               	decfsz	??_low_battery+1,f
  2375  04F2  2CEF               	goto	u787
  2376  04F3  0BF7               	decfsz	??_low_battery+2,f
  2377  04F4  2CEF               	goto	u787
  2378  04F5  2CF6               	nop2
  2379  04F6                     l1504:
  2380                           
  2381                           ;main.c: 267:     show(".");
  2382  04F6  30D0               	movlw	(low (((STR_1+9)-__stringbase)| (0+32768)))& (0+255)
  2383  04F7  120A  118A  22BC  120A  118A  	fcall	_show
  2384  04FC                     l1506:
  2385                           
  2386                           ;main.c: 268:     _delay((unsigned long)((500)*(20000000/4000.0)));
  2387  04FC  300D               	movlw	13
  2388  04FD  00F7               	movwf	??_low_battery+2
  2389  04FE  30AF               	movlw	175
  2390  04FF  00F6               	movwf	??_low_battery+1
  2391  0500  30B6               	movlw	182
  2392  0501  00F5               	movwf	??_low_battery
  2393  0502                     u797:
  2394  0502  0BF5               	decfsz	??_low_battery,f
  2395  0503  2D02               	goto	u797
  2396  0504  0BF6               	decfsz	??_low_battery+1,f
  2397  0505  2D02               	goto	u797
  2398  0506  0BF7               	decfsz	??_low_battery+2,f
  2399  0507  2D02               	goto	u797
  2400  0508  0000               	nop
  2401  0509                     l1508:
  2402                           
  2403                           ;main.c: 269:     LCD_command(0x01);
  2404  0509  3001               	movlw	1
  2405  050A  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2406  050F                     l150:	
  2407                           ;main.c: 270:     while(1);
  2408                           
  2409  050F                     l151:
  2410  050F  2D0F               	goto	l150
  2411  0510  0008               	return
  2412  0511                     __end_of_low_battery:
  2413                           
  2414                           	psect	text10
  2415  0282                     __ptext10:	
  2416 ;; *************** function _corner_cases *****************
  2417 ;; Defined at:
  2418 ;;		line 224 in file "main.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  number          2    8[COMMON] int 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2432 ;;      Params:         2       0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0
  2435 ;;      Totals:         2       0       0       0       0
  2436 ;;Total ram usage:        2 bytes
  2437 ;; Hardware stack levels used: 1
  2438 ;; Hardware stack levels required when called: 4
  2439 ;; This function calls:
  2440 ;;		_cloudy
  2441 ;;		_print_data
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           
  2448                           ;psect for function _corner_cases
  2449  0282                     _corner_cases:
  2450  0282                     l1458:	
  2451                           ;incstack = 0
  2452                           ; Regs used in _corner_cases: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2453                           
  2454                           
  2455                           ;main.c: 224: void corner_cases(int number);main.c: 225: {;main.c: 226:     switch(numbe
      +                          r)
  2456  0282  2A8F               	goto	l1466
  2457  0283                     l1460:
  2458                           
  2459                           ;main.c: 229:             cloudy();
  2460  0283  120A  118A  2305  120A  118A  	fcall	_cloudy
  2461                           
  2462                           ;main.c: 230:             break;
  2463  0288  2A9C               	goto	l144
  2464  0289                     l1462:
  2465                           
  2466                           ;main.c: 232:             print_data();
  2467  0289  120A  118A  26AB  120A  118A  	fcall	_print_data
  2468                           
  2469                           ;main.c: 233:             break;
  2470  028E  2A9C               	goto	l144
  2471  028F                     l1466:
  2472                           
  2473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2474                           ; Switch size 1, requested type "simple"
  2475                           ; Number of cases is 1, Range of values is 0 to 0
  2476                           ; switch strategies available:
  2477                           ; Name         Instructions Cycles
  2478                           ; simple_byte            4     3 (average)
  2479                           ; direct_byte           11     8 (fixed)
  2480                           ; jumptable            260     6 (fixed)
  2481                           ;	Chosen strategy is simple_byte
  2482  028F  0879               	movf	corner_cases@number+1,w
  2483  0290  3A00               	xorlw	0	; case 0
  2484  0291  1903               	skipnz
  2485  0292  2A94               	goto	l1578
  2486  0293  2A9C               	goto	l144
  2487  0294                     l1578:
  2488                           
  2489                           ; Switch size 1, requested type "simple"
  2490                           ; Number of cases is 2, Range of values is 0 to 1
  2491                           ; switch strategies available:
  2492                           ; Name         Instructions Cycles
  2493                           ; simple_byte            7     4 (average)
  2494                           ; direct_byte           14     8 (fixed)
  2495                           ; jumptable            260     6 (fixed)
  2496                           ;	Chosen strategy is simple_byte
  2497  0294  0878               	movf	corner_cases@number,w
  2498  0295  3A00               	xorlw	0	; case 0
  2499  0296  1903               	skipnz
  2500  0297  2A83               	goto	l1460
  2501  0298  3A01               	xorlw	1	; case 1
  2502  0299  1903               	skipnz
  2503  029A  2A89               	goto	l1462
  2504  029B  2A9C               	goto	l144
  2505  029C                     l144:
  2506  029C  0008               	return
  2507  029D                     __end_of_corner_cases:
  2508                           
  2509                           	psect	text11
  2510  06AB                     __ptext11:	
  2511 ;; *************** function _print_data *****************
  2512 ;; Defined at:
  2513 ;;		line 174 in file "main.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;		None
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  h               2    5[COMMON] int 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2527 ;;      Params:         0       0       0       0       0
  2528 ;;      Locals:         2       0       0       0       0
  2529 ;;      Temps:          0       0       0       0       0
  2530 ;;      Totals:         2       0       0       0       0
  2531 ;;Total ram usage:        2 bytes
  2532 ;; Hardware stack levels used: 1
  2533 ;; Hardware stack levels required when called: 3
  2534 ;; This function calls:
  2535 ;;		_LCD_command
  2536 ;;		_LCD_data
  2537 ;;		_refresh_text
  2538 ;;		_show
  2539 ;; This function is called by:
  2540 ;;		_corner_cases
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           
  2545                           ;psect for function _print_data
  2546  06AB                     _print_data:
  2547  06AB                     l1266:	
  2548                           ;incstack = 0
  2549                           ; Regs used in _print_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2550                           
  2551                           
  2552                           ;main.c: 176:     int h;;main.c: 178:     LCD_command(0x01);
  2553  06AB  3001               	movlw	1
  2554  06AC  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2555                           
  2556                           ;main.c: 179:     LCD_command(0x80);
  2557  06B1  3080               	movlw	128
  2558  06B2  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2559  06B7                     l1268:
  2560                           
  2561                           ;main.c: 180:     show("LON:");
  2562  06B7  30D9               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2563  06B8  120A  118A  22BC  120A  118A  	fcall	_show
  2564  06BD                     l1270:
  2565                           
  2566                           ;main.c: 182:         LCD_command(0x84);
  2567  06BD  3084               	movlw	132
  2568  06BE  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2569  06C3                     l1272:
  2570                           
  2571                           ;main.c: 183:         for(h=16;h<18;h++) {
  2572  06C3  3010               	movlw	16
  2573  06C4  00F5               	movwf	print_data@h
  2574  06C5  3000               	movlw	0
  2575  06C6  00F6               	movwf	print_data@h+1
  2576  06C7                     l1278:
  2577                           
  2578                           ;main.c: 184:           LCD_data(a[h]);
  2579  06C7  0875               	movf	print_data@h,w
  2580  06C8  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  2581  06C9  0084               	movwf	4
  2582  06CA  1783               	bsf	3,7	;select IRP bank3
  2583  06CB  0800               	movf	0,w
  2584  06CC  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2585  06D1                     l1280:
  2586                           
  2587                           ;main.c: 185:         }
  2588  06D1  3001               	movlw	1
  2589  06D2  07F5               	addwf	print_data@h,f
  2590  06D3  1803               	skipnc
  2591  06D4  0AF6               	incf	print_data@h+1,f
  2592  06D5  3000               	movlw	0
  2593  06D6  07F6               	addwf	print_data@h+1,f
  2594  06D7                     l1282:
  2595  06D7  0876               	movf	print_data@h+1,w
  2596  06D8  3A80               	xorlw	128
  2597  06D9  00FF               	movwf	btemp+1
  2598  06DA  3080               	movlw	128
  2599  06DB  027F               	subwf	btemp+1,w
  2600  06DC  1D03               	skipz
  2601  06DD  2EE0               	goto	u535
  2602  06DE  3012               	movlw	18
  2603  06DF  0275               	subwf	print_data@h,w
  2604  06E0                     u535:
  2605  06E0  1C03               	skipc
  2606  06E1  2EE3               	goto	u531
  2607  06E2  2EE4               	goto	u530
  2608  06E3                     u531:
  2609  06E3  2EC7               	goto	l1278
  2610  06E4                     u530:
  2611  06E4                     l1284:
  2612                           
  2613                           ;main.c: 186:         LCD_data('.');
  2614  06E4  302E               	movlw	46
  2615  06E5  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2616  06EA                     l1286:
  2617                           
  2618                           ;main.c: 187:         for(h=18;h<20;h++) {
  2619  06EA  3012               	movlw	18
  2620  06EB  00F5               	movwf	print_data@h
  2621  06EC  3000               	movlw	0
  2622  06ED  00F6               	movwf	print_data@h+1
  2623  06EE                     l1292:
  2624                           
  2625                           ;main.c: 188:           LCD_data(a[h]);
  2626  06EE  0875               	movf	print_data@h,w
  2627  06EF  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  2628  06F0  0084               	movwf	4
  2629  06F1  1783               	bsf	3,7	;select IRP bank3
  2630  06F2  0800               	movf	0,w
  2631  06F3  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2632  06F8                     l1294:
  2633                           
  2634                           ;main.c: 189:         }
  2635  06F8  3001               	movlw	1
  2636  06F9  07F5               	addwf	print_data@h,f
  2637  06FA  1803               	skipnc
  2638  06FB  0AF6               	incf	print_data@h+1,f
  2639  06FC  3000               	movlw	0
  2640  06FD  07F6               	addwf	print_data@h+1,f
  2641  06FE                     l1296:
  2642  06FE  0876               	movf	print_data@h+1,w
  2643  06FF  3A80               	xorlw	128
  2644  0700  00FF               	movwf	btemp+1
  2645  0701  3080               	movlw	128
  2646  0702  027F               	subwf	btemp+1,w
  2647  0703  1D03               	skipz
  2648  0704  2F07               	goto	u545
  2649  0705  3014               	movlw	20
  2650  0706  0275               	subwf	print_data@h,w
  2651  0707                     u545:
  2652  0707  1C03               	skipc
  2653  0708  2F0A               	goto	u541
  2654  0709  2F0B               	goto	u540
  2655  070A                     u541:
  2656  070A  2EEE               	goto	l1292
  2657  070B                     u540:
  2658  070B                     l1298:
  2659                           
  2660                           ;main.c: 190:         for(h=21;h<25;h++) {
  2661  070B  3015               	movlw	21
  2662  070C  00F5               	movwf	print_data@h
  2663  070D  3000               	movlw	0
  2664  070E  00F6               	movwf	print_data@h+1
  2665  070F                     l1304:
  2666                           
  2667                           ;main.c: 191:           LCD_data(a[h]);
  2668  070F  0875               	movf	print_data@h,w
  2669  0710  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  2670  0711  0084               	movwf	4
  2671  0712  1783               	bsf	3,7	;select IRP bank3
  2672  0713  0800               	movf	0,w
  2673  0714  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2674  0719                     l1306:
  2675                           
  2676                           ;main.c: 192:         }
  2677  0719  3001               	movlw	1
  2678  071A  07F5               	addwf	print_data@h,f
  2679  071B  1803               	skipnc
  2680  071C  0AF6               	incf	print_data@h+1,f
  2681  071D  3000               	movlw	0
  2682  071E  07F6               	addwf	print_data@h+1,f
  2683  071F                     l1308:
  2684  071F  0876               	movf	print_data@h+1,w
  2685  0720  3A80               	xorlw	128
  2686  0721  00FF               	movwf	btemp+1
  2687  0722  3080               	movlw	128
  2688  0723  027F               	subwf	btemp+1,w
  2689  0724  1D03               	skipz
  2690  0725  2F28               	goto	u555
  2691  0726  3019               	movlw	25
  2692  0727  0275               	subwf	print_data@h,w
  2693  0728                     u555:
  2694  0728  1C03               	skipc
  2695  0729  2F2B               	goto	u551
  2696  072A  2F2C               	goto	u550
  2697  072B                     u551:
  2698  072B  2F0F               	goto	l1304
  2699  072C                     u550:
  2700  072C                     l1310:
  2701                           
  2702                           ;main.c: 193:         LCD_data(223);
  2703  072C  30DF               	movlw	223
  2704  072D  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2705                           
  2706                           ;main.c: 194:         LCD_data(' ');
  2707  0732  3020               	movlw	32
  2708  0733  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2709                           
  2710                           ;main.c: 195:         LCD_data('N');
  2711  0738  304E               	movlw	78
  2712  0739  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2713                           
  2714                           ;main.c: 197:     LCD_command(0xc0);
  2715  073E  30C0               	movlw	192
  2716  073F  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2717  0744                     l1312:
  2718                           
  2719                           ;main.c: 198:         show("LAT:");
  2720  0744  30DE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2721  0745  120A  118A  22BC  120A  118A  	fcall	_show
  2722  074A                     l1314:
  2723                           
  2724                           ;main.c: 200:         LCD_command(0xc4);
  2725  074A  30C4               	movlw	196
  2726  074B  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2727  0750                     l1316:
  2728                           
  2729                           ;main.c: 201:         for(h=29;h<31;h++) {
  2730  0750  301D               	movlw	29
  2731  0751  00F5               	movwf	print_data@h
  2732  0752  3000               	movlw	0
  2733  0753  00F6               	movwf	print_data@h+1
  2734  0754                     l1322:
  2735                           
  2736                           ;main.c: 202:           LCD_data(a[h]);
  2737  0754  0875               	movf	print_data@h,w
  2738  0755  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  2739  0756  0084               	movwf	4
  2740  0757  1783               	bsf	3,7	;select IRP bank3
  2741  0758  0800               	movf	0,w
  2742  0759  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2743  075E                     l1324:
  2744                           
  2745                           ;main.c: 203:         }
  2746  075E  3001               	movlw	1
  2747  075F  07F5               	addwf	print_data@h,f
  2748  0760  1803               	skipnc
  2749  0761  0AF6               	incf	print_data@h+1,f
  2750  0762  3000               	movlw	0
  2751  0763  07F6               	addwf	print_data@h+1,f
  2752  0764                     l1326:
  2753  0764  0876               	movf	print_data@h+1,w
  2754  0765  3A80               	xorlw	128
  2755  0766  00FF               	movwf	btemp+1
  2756  0767  3080               	movlw	128
  2757  0768  027F               	subwf	btemp+1,w
  2758  0769  1D03               	skipz
  2759  076A  2F6D               	goto	u565
  2760  076B  301F               	movlw	31
  2761  076C  0275               	subwf	print_data@h,w
  2762  076D                     u565:
  2763  076D  1C03               	skipc
  2764  076E  2F70               	goto	u561
  2765  076F  2F71               	goto	u560
  2766  0770                     u561:
  2767  0770  2F54               	goto	l1322
  2768  0771                     u560:
  2769  0771                     l1328:
  2770                           
  2771                           ;main.c: 204:         LCD_data('.');
  2772  0771  302E               	movlw	46
  2773  0772  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2774  0777                     l1330:
  2775                           
  2776                           ;main.c: 205:         for(h=31;h<33;h++) {
  2777  0777  301F               	movlw	31
  2778  0778  00F5               	movwf	print_data@h
  2779  0779  3000               	movlw	0
  2780  077A  00F6               	movwf	print_data@h+1
  2781  077B                     l1336:
  2782                           
  2783                           ;main.c: 206:           LCD_data(a[h]);
  2784  077B  0875               	movf	print_data@h,w
  2785  077C  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  2786  077D  0084               	movwf	4
  2787  077E  1783               	bsf	3,7	;select IRP bank3
  2788  077F  0800               	movf	0,w
  2789  0780  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2790  0785                     l1338:
  2791                           
  2792                           ;main.c: 207:         }
  2793  0785  3001               	movlw	1
  2794  0786  07F5               	addwf	print_data@h,f
  2795  0787  1803               	skipnc
  2796  0788  0AF6               	incf	print_data@h+1,f
  2797  0789  3000               	movlw	0
  2798  078A  07F6               	addwf	print_data@h+1,f
  2799  078B                     l1340:
  2800  078B  0876               	movf	print_data@h+1,w
  2801  078C  3A80               	xorlw	128
  2802  078D  00FF               	movwf	btemp+1
  2803  078E  3080               	movlw	128
  2804  078F  027F               	subwf	btemp+1,w
  2805  0790  1D03               	skipz
  2806  0791  2F94               	goto	u575
  2807  0792  3021               	movlw	33
  2808  0793  0275               	subwf	print_data@h,w
  2809  0794                     u575:
  2810  0794  1C03               	skipc
  2811  0795  2F97               	goto	u571
  2812  0796  2F98               	goto	u570
  2813  0797                     u571:
  2814  0797  2F7B               	goto	l1336
  2815  0798                     u570:
  2816  0798                     l1342:
  2817                           
  2818                           ;main.c: 208:         for(h=34;h<38;h++) {
  2819  0798  3022               	movlw	34
  2820  0799  00F5               	movwf	print_data@h
  2821  079A  3000               	movlw	0
  2822  079B  00F6               	movwf	print_data@h+1
  2823  079C                     l1348:
  2824                           
  2825                           ;main.c: 209:           LCD_data(a[h]);
  2826  079C  0875               	movf	print_data@h,w
  2827  079D  3E90               	addlw	(low (_a| (0+256)))& (0+255)
  2828  079E  0084               	movwf	4
  2829  079F  1783               	bsf	3,7	;select IRP bank3
  2830  07A0  0800               	movf	0,w
  2831  07A1  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2832  07A6                     l1350:
  2833                           
  2834                           ;main.c: 210:         }
  2835  07A6  3001               	movlw	1
  2836  07A7  07F5               	addwf	print_data@h,f
  2837  07A8  1803               	skipnc
  2838  07A9  0AF6               	incf	print_data@h+1,f
  2839  07AA  3000               	movlw	0
  2840  07AB  07F6               	addwf	print_data@h+1,f
  2841  07AC                     l1352:
  2842  07AC  0876               	movf	print_data@h+1,w
  2843  07AD  3A80               	xorlw	128
  2844  07AE  00FF               	movwf	btemp+1
  2845  07AF  3080               	movlw	128
  2846  07B0  027F               	subwf	btemp+1,w
  2847  07B1  1D03               	skipz
  2848  07B2  2FB5               	goto	u585
  2849  07B3  3026               	movlw	38
  2850  07B4  0275               	subwf	print_data@h,w
  2851  07B5                     u585:
  2852  07B5  1C03               	skipc
  2853  07B6  2FB8               	goto	u581
  2854  07B7  2FB9               	goto	u580
  2855  07B8                     u581:
  2856  07B8  2F9C               	goto	l1348
  2857  07B9                     u580:
  2858  07B9                     l1354:
  2859                           
  2860                           ;main.c: 211:         LCD_data(223);
  2861  07B9  30DF               	movlw	223
  2862  07BA  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2863                           
  2864                           ;main.c: 212:         LCD_data(' ');
  2865  07BF  3020               	movlw	32
  2866  07C0  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2867                           
  2868                           ;main.c: 213:         LCD_data('E');
  2869  07C5  3045               	movlw	69
  2870  07C6  120A  118A  223F  120A  118A  	fcall	_LCD_data
  2871  07CB                     l1356:
  2872                           
  2873                           ;main.c: 215:     refresh_text();
  2874  07CB  120A  118A  2269  120A  118A  	fcall	_refresh_text
  2875  07D0                     l134:
  2876  07D0  0008               	return
  2877  07D1                     __end_of_print_data:
  2878                           
  2879                           	psect	text12
  2880  0269                     __ptext12:	
  2881 ;; *************** function _refresh_text *****************
  2882 ;; Defined at:
  2883 ;;		line 217 in file "main.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2897 ;;      Params:         0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0
  2900 ;;      Totals:         0       0       0       0       0
  2901 ;;Total ram usage:        0 bytes
  2902 ;; Hardware stack levels used: 1
  2903 ;; Hardware stack levels required when called: 2
  2904 ;; This function calls:
  2905 ;;		_LCD_command
  2906 ;;		_show
  2907 ;; This function is called by:
  2908 ;;		_print_data
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _refresh_text
  2914  0269                     _refresh_text:
  2915  0269                     l1208:	
  2916                           ;incstack = 0
  2917                           ; Regs used in _refresh_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2918                           
  2919                           
  2920                           ;main.c: 219:     LCD_command(0x94);
  2921  0269  3094               	movlw	148
  2922  026A  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2923  026F                     l1210:
  2924                           
  2925                           ;main.c: 220:     show("PRESS PUSH BUTTON");
  2926  026F  307D               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2927  0270  120A  118A  22BC  120A  118A  	fcall	_show
  2928  0275                     l1212:
  2929                           
  2930                           ;main.c: 221:     LCD_command(0xD4);
  2931  0275  30D4               	movlw	212
  2932  0276  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2933                           
  2934                           ;main.c: 222:     show("FOR RESTTING DEVICE");
  2935  027B  3069               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2936  027C  120A  118A  22BC  120A  118A  	fcall	_show
  2937  0281                     l137:
  2938  0281  0008               	return
  2939  0282                     __end_of_refresh_text:
  2940                           
  2941                           	psect	text13
  2942  0305                     __ptext13:	
  2943 ;; *************** function _cloudy *****************
  2944 ;; Defined at:
  2945 ;;		line 236 in file "main.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;		None
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2959 ;;      Params:         0       0       0       0       0
  2960 ;;      Locals:         0       0       0       0       0
  2961 ;;      Temps:          3       0       0       0       0
  2962 ;;      Totals:         3       0       0       0       0
  2963 ;;Total ram usage:        3 bytes
  2964 ;; Hardware stack levels used: 1
  2965 ;; Hardware stack levels required when called: 2
  2966 ;; This function calls:
  2967 ;;		_LCD_command
  2968 ;;		_show
  2969 ;; This function is called by:
  2970 ;;		_corner_cases
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _cloudy
  2976  0305                     _cloudy:
  2977  0305                     l1358:	
  2978                           ;incstack = 0
  2979                           ; Regs used in _cloudy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2980                           
  2981                           
  2982                           ;main.c: 238:     LCD_command(0x80);
  2983  0305  3080               	movlw	128
  2984  0306  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2985  030B                     l1360:
  2986                           
  2987                           ;main.c: 239:     show("!CLOUDY ENVIRONMENT!");
  2988  030B  3016               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2989  030C  120A  118A  22BC  120A  118A  	fcall	_show
  2990  0311                     l1362:
  2991                           
  2992                           ;main.c: 240:     LCD_command(0xC0);
  2993  0311  30C0               	movlw	192
  2994  0312  120A  118A  222B  120A  118A  	fcall	_LCD_command
  2995                           
  2996                           ;main.c: 241:     show("!!CAN'T FETCH DATA!!");
  2997  0317  3001               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2998  0318  120A  118A  22BC  120A  118A  	fcall	_show
  2999  031D                     l1364:
  3000                           
  3001                           ;main.c: 242:     _delay((unsigned long)((250)*(20000000/4000.0)));
  3002  031D  3007               	movlw	7
  3003  031E  00F7               	movwf	??_cloudy+2
  3004  031F  3058               	movlw	88
  3005  0320  00F6               	movwf	??_cloudy+1
  3006  0321  3059               	movlw	89
  3007  0322  00F5               	movwf	??_cloudy
  3008  0323                     u807:
  3009  0323  0BF5               	decfsz	??_cloudy,f
  3010  0324  2B23               	goto	u807
  3011  0325  0BF6               	decfsz	??_cloudy+1,f
  3012  0326  2B23               	goto	u807
  3013  0327  0BF7               	decfsz	??_cloudy+2,f
  3014  0328  2B23               	goto	u807
  3015  0329  2B2A               	nop2
  3016  032A                     l1366:
  3017                           
  3018                           ;main.c: 243:     LCD_command(0x94);
  3019  032A  3094               	movlw	148
  3020  032B  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3021  0330                     l1368:
  3022                           
  3023                           ;main.c: 244:     show(" ");
  3024  0330  30E3               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3025  0331  120A  118A  22BC  120A  118A  	fcall	_show
  3026  0336                     l1370:
  3027                           
  3028                           ;main.c: 245:     LCD_command(0xD4);
  3029  0336  30D4               	movlw	212
  3030  0337  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3031  033C                     l1372:
  3032                           
  3033                           ;main.c: 246:     show("---TRY  RESETTING---");
  3034  033C  302B               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3035  033D  120A  118A  22BC  120A  118A  	fcall	_show
  3036  0342                     l147:
  3037  0342  0008               	return
  3038  0343                     __end_of_cloudy:
  3039                           
  3040                           	psect	text14
  3041  02BC                     __ptext14:	
  3042 ;; *************** function _show *****************
  3043 ;; Defined at:
  3044 ;;		line 126 in file "main.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  s               1    wreg     PTR unsigned char 
  3047 ;;		 -> STR_20(2), STR_19(2), STR_18(2), STR_17(14), 
  3048 ;;		 -> STR_16(21), STR_15(20), STR_14(20), STR_13(21), 
  3049 ;;		 -> STR_12(2), STR_11(21), STR_10(21), STR_9(20), 
  3050 ;;		 -> STR_8(18), STR_7(5), STR_6(5), STR_5(15), 
  3051 ;;		 -> STR_4(7), STR_3(13), STR_2(14), STR_1(11), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  s               1    4[COMMON] PTR unsigned char 
  3054 ;;		 -> STR_20(2), STR_19(2), STR_18(2), STR_17(14), 
  3055 ;;		 -> STR_16(21), STR_15(20), STR_14(20), STR_13(21), 
  3056 ;;		 -> STR_12(2), STR_11(21), STR_10(21), STR_9(20), 
  3057 ;;		 -> STR_8(18), STR_7(5), STR_6(5), STR_5(15), 
  3058 ;;		 -> STR_4(7), STR_3(13), STR_2(14), STR_1(11), 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3068 ;;      Params:         0       0       0       0       0
  3069 ;;      Locals:         1       0       0       0       0
  3070 ;;      Temps:          1       0       0       0       0
  3071 ;;      Totals:         2       0       0       0       0
  3072 ;;Total ram usage:        2 bytes
  3073 ;; Hardware stack levels used: 1
  3074 ;; Hardware stack levels required when called: 1
  3075 ;; This function calls:
  3076 ;;		_LCD_data
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;;		_read_data
  3080 ;;		_print_data
  3081 ;;		_refresh_text
  3082 ;;		_cloudy
  3083 ;;		_low_battery
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function _show
  3089  02BC                     _show:
  3090                           
  3091                           ;incstack = 0
  3092                           ; Regs used in _show: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3093                           ;show@s stored from wreg
  3094  02BC  00F4               	movwf	show@s
  3095  02BD                     l1178:
  3096                           
  3097                           ;main.c: 126: void show(unsigned char *s);main.c: 127: {;main.c: 128:   while(*s)
  3098  02BD  2ACE               	goto	l1184
  3099  02BE                     l1180:
  3100                           
  3101                           ;main.c: 129:   {;main.c: 130:     LCD_data(*s++);
  3102  02BE  0874               	movf	show@s,w
  3103  02BF  0084               	movwf	4
  3104  02C0  120A  118A  2003  120A  118A  	fcall	stringdir
  3105  02C5  120A  118A  223F  120A  118A  	fcall	_LCD_data
  3106  02CA                     l1182:
  3107  02CA  3001               	movlw	1
  3108  02CB  00F3               	movwf	??_show
  3109  02CC  0873               	movf	??_show,w
  3110  02CD  07F4               	addwf	show@s,f
  3111  02CE                     l1184:
  3112                           
  3113                           ;main.c: 128:   while(*s)
  3114  02CE  0874               	movf	show@s,w
  3115  02CF  0084               	movwf	4
  3116  02D0  120A  118A  2003  120A  118A  	fcall	stringdir
  3117  02D5  3A00               	xorlw	0
  3118  02D6  1D03               	skipz
  3119  02D7  2AD9               	goto	u361
  3120  02D8  2ADA               	goto	u360
  3121  02D9                     u361:
  3122  02D9  2ABE               	goto	l1180
  3123  02DA                     u360:
  3124  02DA                     l101:
  3125  02DA  0008               	return
  3126  02DB                     __end_of_show:
  3127                           
  3128                           	psect	text15
  3129  023F                     __ptext15:	
  3130 ;; *************** function _LCD_data *****************
  3131 ;; Defined at:
  3132 ;;		line 99 in file "main.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  data            1    wreg     unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  data            1    2[COMMON] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3146 ;;      Params:         0       0       0       0       0
  3147 ;;      Locals:         1       0       0       0       0
  3148 ;;      Temps:          2       0       0       0       0
  3149 ;;      Totals:         3       0       0       0       0
  3150 ;;Total ram usage:        3 bytes
  3151 ;; Hardware stack levels used: 1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_show
  3156 ;;		_print_data
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           
  3161                           ;psect for function _LCD_data
  3162  023F                     _LCD_data:
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in _LCD_data: [wreg]
  3166                           ;LCD_data@data stored from wreg
  3167  023F  00F2               	movwf	LCD_data@data
  3168  0240                     l1170:
  3169                           
  3170                           ;main.c: 99: void LCD_data(unsigned char data);main.c: 100: {;main.c: 101:     PORTD = d
      +                          ata;
  3171  0240  0872               	movf	LCD_data@data,w
  3172  0241  1283               	bcf	3,5	;RP0=0, select bank0
  3173  0242  1303               	bcf	3,6	;RP1=0, select bank0
  3174  0243  0088               	movwf	8	;volatile
  3175  0244                     l1172:
  3176                           
  3177                           ;main.c: 102:     RC4 = 1;
  3178  0244  1607               	bsf	7,4	;volatile
  3179  0245                     l1174:
  3180                           
  3181                           ;main.c: 103:     RC5 = 1;
  3182  0245  1687               	bsf	7,5	;volatile
  3183                           
  3184                           ;main.c: 104:     _delay((unsigned long)((10)*(20000000/4000.0)));
  3185  0246  3041               	movlw	65
  3186  0247  00F1               	movwf	??_LCD_data+1
  3187  0248  30EE               	movlw	238
  3188  0249  00F0               	movwf	??_LCD_data
  3189  024A                     u817:
  3190  024A  0BF0               	decfsz	??_LCD_data,f
  3191  024B  2A4A               	goto	u817
  3192  024C  0BF1               	decfsz	??_LCD_data+1,f
  3193  024D  2A4A               	goto	u817
  3194  024E  0000               	nop
  3195  024F                     l1176:
  3196                           
  3197                           ;main.c: 105:     RC5 = 0;
  3198  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0251  1287               	bcf	7,5	;volatile
  3201  0252                     l83:
  3202  0252  0008               	return
  3203  0253                     __end_of_LCD_data:
  3204                           
  3205                           	psect	text16
  3206  029D                     __ptext16:	
  3207 ;; *************** function _LCD_init *****************
  3208 ;; Defined at:
  3209 ;;		line 107 in file "main.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0, pclath, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3223 ;;      Params:         0       0       0       0       0
  3224 ;;      Locals:         0       0       0       0       0
  3225 ;;      Temps:          0       0       0       0       0
  3226 ;;      Totals:         0       0       0       0       0
  3227 ;;Total ram usage:        0 bytes
  3228 ;; Hardware stack levels used: 1
  3229 ;; Hardware stack levels required when called: 1
  3230 ;; This function calls:
  3231 ;;		_LCD_command
  3232 ;; This function is called by:
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           
  3238                           ;psect for function _LCD_init
  3239  029D                     _LCD_init:
  3240  029D                     l1386:	
  3241                           ;incstack = 0
  3242                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  3243                           
  3244                           
  3245                           ;main.c: 109:     LCD_command(0x38);
  3246  029D  3038               	movlw	56
  3247  029E  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3248                           
  3249                           ;main.c: 110:     LCD_command(0x0E);
  3250  02A3  300E               	movlw	14
  3251  02A4  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3252                           
  3253                           ;main.c: 111:     LCD_command(0x01);
  3254  02A9  3001               	movlw	1
  3255  02AA  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3256                           
  3257                           ;main.c: 112:     LCD_command(0x06);
  3258  02AF  3006               	movlw	6
  3259  02B0  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3260                           
  3261                           ;main.c: 113:     LCD_command(0x80);
  3262  02B5  3080               	movlw	128
  3263  02B6  120A  118A  222B  120A  118A  	fcall	_LCD_command
  3264  02BB                     l86:
  3265  02BB  0008               	return
  3266  02BC                     __end_of_LCD_init:
  3267                           
  3268                           	psect	text17
  3269  022B                     __ptext17:	
  3270 ;; *************** function _LCD_command *****************
  3271 ;; Defined at:
  3272 ;;		line 91 in file "main.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  cmd             1    wreg     unsigned char 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  cmd             1    2[COMMON] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		wreg
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3286 ;;      Params:         0       0       0       0       0
  3287 ;;      Locals:         1       0       0       0       0
  3288 ;;      Temps:          2       0       0       0       0
  3289 ;;      Totals:         3       0       0       0       0
  3290 ;;Total ram usage:        3 bytes
  3291 ;; Hardware stack levels used: 1
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_main
  3296 ;;		_LCD_init
  3297 ;;		_read_data
  3298 ;;		_print_data
  3299 ;;		_refresh_text
  3300 ;;		_cloudy
  3301 ;;		_low_battery
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _LCD_command
  3307  022B                     _LCD_command:
  3308                           
  3309                           ;incstack = 0
  3310                           ; Regs used in _LCD_command: [wreg]
  3311                           ;LCD_command@cmd stored from wreg
  3312  022B  00F2               	movwf	LCD_command@cmd
  3313  022C                     l1186:
  3314                           
  3315                           ;main.c: 91: void LCD_command(unsigned char cmd);main.c: 92: {;main.c: 93:     PORTD = c
      +                          md;
  3316  022C  0872               	movf	LCD_command@cmd,w
  3317  022D  1283               	bcf	3,5	;RP0=0, select bank0
  3318  022E  1303               	bcf	3,6	;RP1=0, select bank0
  3319  022F  0088               	movwf	8	;volatile
  3320  0230                     l1188:
  3321                           
  3322                           ;main.c: 94:     RC4 = 0;
  3323  0230  1207               	bcf	7,4	;volatile
  3324  0231                     l1190:
  3325                           
  3326                           ;main.c: 95:     RC5 = 1;
  3327  0231  1687               	bsf	7,5	;volatile
  3328                           
  3329                           ;main.c: 96:     _delay((unsigned long)((10)*(20000000/4000.0)));
  3330  0232  3041               	movlw	65
  3331  0233  00F1               	movwf	??_LCD_command+1
  3332  0234  30EE               	movlw	238
  3333  0235  00F0               	movwf	??_LCD_command
  3334  0236                     u827:
  3335  0236  0BF0               	decfsz	??_LCD_command,f
  3336  0237  2A36               	goto	u827
  3337  0238  0BF1               	decfsz	??_LCD_command+1,f
  3338  0239  2A36               	goto	u827
  3339  023A  0000               	nop
  3340  023B                     l1192:
  3341                           
  3342                           ;main.c: 97:     RC5 = 0;
  3343  023B  1283               	bcf	3,5	;RP0=0, select bank0
  3344  023C  1303               	bcf	3,6	;RP1=0, select bank0
  3345  023D  1287               	bcf	7,5	;volatile
  3346  023E                     l80:
  3347  023E  0008               	return
  3348  023F                     __end_of_LCD_command:
  3349  007E                     btemp	set	126	;btemp
  3350  007E                     wtemp0	set	126
  3351                           
  3352                           	psect	idloc
  3353                           
  3354                           ;Config register IDLOC0 @ 0x2000
  3355                           ;	unspecified, using default values
  3356  2000                     	org	8192
  3357  2000  3FFF               	dw	16383
  3358                           
  3359                           ;Config register IDLOC1 @ 0x2001
  3360                           ;	unspecified, using default values
  3361  2001                     	org	8193
  3362  2001  3FFF               	dw	16383
  3363                           
  3364                           ;Config register IDLOC2 @ 0x2002
  3365                           ;	unspecified, using default values
  3366  2002                     	org	8194
  3367  2002  3FFF               	dw	16383
  3368                           
  3369                           ;Config register IDLOC3 @ 0x2003
  3370                           ;	unspecified, using default values
  3371  2003                     	org	8195
  3372  2003  3FFF               	dw	16383
  3373                           
  3374                           	psect	config
  3375                           
  3376                           ;Config register CONFIG @ 0x2007
  3377                           ;	Oscillator Selection bits
  3378                           ;	FOSC = HS, HS oscillator
  3379                           ;	Watchdog Timer Enable bit
  3380                           ;	WDTE = OFF, WDT disabled
  3381                           ;	Power-up Timer Enable bit
  3382                           ;	PWRTE = OFF, PWRT disabled
  3383                           ;	Brown-out Reset Enable bit
  3384                           ;	BOREN = ON, BOR enabled
  3385                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3386                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  3387                           ;	Data EEPROM Memory Code Protection bit
  3388                           ;	CPD = OFF, Data EEPROM code protection off
  3389                           ;	Flash Program Memory Write Enable bits
  3390                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3391                           ;	In-Circuit Debugger Mode bit
  3392                           ;	DEBUG = 0x1, unprogrammed default
  3393                           ;	Flash Program Memory Code Protection bit
  3394                           ;	CP = OFF, Code protection off
  3395  2007                     	org	8199
  3396  2007  3FFA               	dw	16378

Data Sizes:
    Strings     228
    Constant    0
    Data        29
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      77
    BANK1            80      0      22
    BANK3            96      0      95
    BANK2            96      0       0

Pointer List with Targets:

    show@s	PTR unsigned char  size(1) Largest target is 21
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[14]), 
		 -> STR_16(CODE[21]), STR_15(CODE[20]), STR_14(CODE[20]), STR_13(CODE[21]), 
		 -> STR_12(CODE[2]), STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[20]), 
		 -> STR_8(CODE[18]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[15]), 
		 -> STR_4(CODE[7]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _read_data->_show
    _printRandoms->___awmod
    _rand->___lmul
    _low_battery->_show
    _corner_cases->_cloudy
    _print_data->_show
    _refresh_text->_show
    _cloudy->_show
    _show->_LCD_data
    _LCD_init->_LCD_command

Critical Paths under _main in BANK0

    _main->_random_number
    _random_number->_printRandoms
    _printRandoms->___awmod
    ___awmod->_rand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    6850
                                             37 BANK0     26    26      0
                        _LCD_command
                           _LCD_init
                       _corner_cases
                        _low_battery
                      _random_number
                          _read_data
                            _ser_int
                               _show
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_data                                           10    10      0    1090
                                              5 COMMON     1     1      0
                                              0 BANK0      9     9      0
                        _LCD_command
                                 _rx
                               _show
 ---------------------------------------------------------------------------------
 (2) _rx                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _random_number                                       14     8      6    1441
                                             23 BANK0     14     8      6
                       _printRandoms
 ---------------------------------------------------------------------------------
 (2) _printRandoms                                        12     6      6    1055
                                             13 BANK0     10     4      6
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _low_battery                                          3     3      0     749
                                              5 COMMON     3     3      0
                        _LCD_command
                               _show
 ---------------------------------------------------------------------------------
 (1) _corner_cases                                         2     0      2    2775
                                              8 COMMON     2     0      2
                             _cloudy
                         _print_data
 ---------------------------------------------------------------------------------
 (2) _print_data                                           2     2      0    1928
                                              5 COMMON     2     2      0
                        _LCD_command
                           _LCD_data
                       _refresh_text
                               _show
 ---------------------------------------------------------------------------------
 (3) _refresh_text                                         0     0      0     749
                        _LCD_command
                               _show
 ---------------------------------------------------------------------------------
 (2) _cloudy                                               3     3      0     749
                                              5 COMMON     3     3      0
                        _LCD_command
                               _show
 ---------------------------------------------------------------------------------
 (1) _show                                                 2     2      0     727
                                              3 COMMON     2     2      0
                           _LCD_data
 ---------------------------------------------------------------------------------
 (2) _LCD_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0      22
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_command
   _LCD_init
     _LCD_command
   _corner_cases
     _cloudy
       _LCD_command
       _show
         _LCD_data
     _print_data
       _LCD_command
       _LCD_data
       _refresh_text
         _LCD_command
         _show
       _show
   _low_battery
     _LCD_command
     _show
   _random_number
     _printRandoms
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
   _read_data
     _LCD_command
     _rx
     _show
   _ser_int
   _show

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      16       7       27.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3F      4D       5       96.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D0      12        0.0%
ABS                  0      0      D0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat May 21 19:11:39 2022

                      _a 0190                        _r 005F                        pc 0002  
                     l80 023E                       l83 0252                       l91 020C  
                     l92 020E                       l86 02BB                       l95 0217  
                     l89 0206        printRandoms@count 0031                       _pv 006A  
                     _rx 0206        printRandoms@lower 002D                       fsr 0004  
      printRandoms@upper 002F                      l101 02DA                      l109 0529  
                    l134 07D0                      l150 050F                      l151 050F  
                    l119 05D5                      l144 029C                      l137 0281  
                    l162 0304                      l147 0342                      l156 0375  
                    l414 046C                      l262 03CA                      l158 0384  
                    l704 0411                      ?_rx 0070                      _RC3 003B  
                    _RC4 003C                      _RC5 003D                      u410 03C2  
                    u411 03C1                      u500 045E                      u420 0409  
                    u501 045D                      u405 03B2                      u510 0463  
                    u430 0419                      u511 0462                      u431 0418  
                    u360 02DA                      u440 0424                      u520 020C  
                    u600 0527                      u361 02D9                      u441 0423  
                    u425 0404                      u521 020B                      u601 0526  
                    u530 06E4                      u450 042F                      u370 0391  
                    u610 052F                      u531 06E3                      u451 042E  
                    u371 0390                      u611 052E                      u540 070B  
                    u620 054A                      u700 06A2                      u541 070A  
                    u381 039A                      u621 0549                      u701 06A1  
                    u550 072C                      u470 0441                      u382 03A1  
                    u630 0562                      u551 072B                      u535 06E0  
                    u471 0440                      u383 03A8                      u631 0561  
                    u560 0771                      u480 044B                      u640 058F  
                    u561 0770                      u545 0707                      u481 044A  
                    u465 0433                      u641 058E                      u625 0546  
                    u705 069E                      u570 0798                      u650 0597  
                    u571 0797                      u555 0728                      u395 03AA  
                    u651 0596                      u580 07B9                      u660 05BA  
                    u581 07B8                      u565 076D                      u485 0447  
                    u661 05B9                      u717 05FA                      u590 0384  
                    u670 05D5                      u807 0323                      u575 0794  
                    u495 0452                      u591 0383                      u671 05D4  
                    u727 061A                      u680 064C                      u817 024A  
                    u585 07B5    __end_of_random_number 0305                      u665 05B6  
                    u737 0688                      u690 065F                      u827 0236  
                    u747 0485                      u595 0380                      u675 05D1  
                    u691 065E                      u757 04AA                      u767 04C9  
                    u777 04DC                      u787 04EF                      u797 0502  
                    fsr0 0004                      indf 0000             ___awmod@sign 002C  
        random_number@rn 0043                     ??_rx 0070                     l1200 03A8  
                   l1210 026F                     l1202 03B1                     l1212 0275  
                   l1204 03C2                     l1310 072C                     l1230 0420  
                   l1222 0412                     l1214 03CB                     l1208 0269  
                   l1312 0744                     l1304 070F                     l1240 0439  
                   l1232 0424                     l1224 0415                     l1216 03EC  
                   l1170 0240                     l1330 0777                     l1322 0754  
                   l1314 074A                     l1306 0719                     l1250 0458  
                   l1242 043D                     l1234 0429                     l1226 0419  
                   l1218 03FA                     l1410 054A                     l1172 0244  
                   l1180 02BE                     l1340 078B                     l1324 075E  
                   l1316 0750                     l1308 071F                     l1500 04E3  
                   l1244 0441                     l1236 042F                     l1252 045E  
                   l1228 041E                     l1260 0206                     l1420 056E  
                   l1412 0551                     l1404 052F                     l1190 0231  
                   l1174 0245                     l1182 02CA                     l1350 07A6  
                   l1342 0798                     l1326 0764                     l1270 06BD  
                   l1502 04E9                     l1254 0463                     l1246 044B  
                   l1238 0432                     l1262 020D                     l1430 058F  
                   l1422 0574                     l1414 0554                     l1406 0537  
                   l1510 05D6                     l1192 023B                     l1176 024F  
                   l1184 02CE                     l1360 030B                     l1352 07AC  
                   l1336 077B                     l1328 0771                     l1280 06D1  
                   l1272 06C3                     l1504 04F6                     l1256 0468  
                   l1248 0451                     l1440 05A7                     l1432 0597  
                   l1424 057A                     l1416 0562                     l1408 053D  
                   l1520 05E7                     l1512 05DA                     l1186 022C  
                   l1178 02BD                     l1370 0336                     l1362 0311  
                   l1354 07B9                     l1338 0785                     l1282 06D7  
                   l1266 06AB                     l1506 04FC                     l1194 0385  
                   l1450 02DB                     l1442 05AD                     l1418 0568  
                   l1426 0581                     l1530 060C                     l1522 05EC  
                   l1514 05DB                     l1188 0230                     l1372 033C  
                   l1364 031D                     l1356 07CB                     l1348 079C  
                   l1292 06EE                     l1284 06E4                     l1268 06B7  
                   l1460 0283                     l1508 0509                     l1196 038D  
                   l1452 02E9                     l1444 05BA                     l1428 0587  
                   l1540 0659                     l1532 0612                     l1524 05F2  
                   l1516 05DD                     l1366 032A                     l1358 0305  
                   l1294 06F8                     l1286 06EA                     l1278 06C7  
                   l1462 0289                     l1198 0391                     l1374 0343  
                   l1454 0300                     l1438 0599                     l1446 05C2  
                   l1550 0680                     l1542 065F                     l1534 0621  
                   l1526 0600                     l1518 05E2                     l1368 0330  
                   l1296 06FE                     l1480 0492                     l1472 046D  
                   l1376 0344                     l1448 05C8                     l1384 020F  
                   l1552 068E                     l1544 0665                     l1536 0639  
                   l1528 0606                     l1386 029D                     l1298 070B  
                   l1466 028F                     l1458 0282                     l1490 04B7  
                   l1482 0498                     l1474 0479                     l1378 0370  
                   l1394 0517                     l1546 066E                     l1554 0695  
                   l1538 0642                     l1492 04BD                     l1484 049E  
                   l1476 047F                     l1396 0521                     l1388 0511  
                   l1556 06A2                     l1548 067A                     l1494 04C3  
                   l1486 04A4                     l1478 048C                     l1398 0527  
                   l1496 04D0                     l1488 04B1                     l1578 0294  
                   l1498 04D6                     STR_1 00CF                     STR_2 00A6  
                   STR_3 00C2                     STR_4 00DA                     STR_5 0097  
                   STR_6 00E1                     STR_7 00E6                     STR_8 0085  
                   STR_9 0071             ?_LCD_command 0070                     _RCIF 0065  
                   _main 05D6                     _rand 03CB                     _show 02BC  
                   btemp 007E                     start 0000            ?_corner_cases 0078  
       __end_of_LCD_data 0253         __end_of_LCD_init 02BC                    ?_main 0070  
                  ?_rand 0020                    STR_10 001E                    STR_11 0009  
                  STR_20 00D8                    STR_12 00EB                    STR_13 0033  
                  STR_14 005D                    STR_15 005D                    STR_16 0048  
                  STR_17 00B4                    STR_18 00D8                    STR_19 00D8  
        __end_of___awmod 046D                    ?_show 0070                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISD 0088  
    ___lmul@multiplicand 0074                    _randx 0066          __end_of_ser_int 0218  
                  pclath 000A                    show@s 0074                    status 0003  
                  wtemp0 007E           ??_corner_cases 007A          __initialization 07D1  
           __end_of_main 06AB             __end_of_rand 0412             __end_of_show 02DB  
                 ??_main 0045                   ??_rand 0022                   ??_show 0073  
           ?_low_battery 0070                   _TRISC3 043B                   _TRISC4 043C  
                 _TRISC5 043D                   ___lmul 0385                ??___awmod 007D  
                 _cloudy 0305             LCD_data@data 0072          ___awmod@divisor 0027  
        ___awmod@counter 002B                ??_ser_int 0070       random_number@count 0041  
     random_number@lower 003D  __end_of__initialization 07FC       random_number@upper 003F  
        printRandoms@num 0035     __size_of_LCD_command 0014                ?_LCD_data 0070  
              ?_LCD_init 0070           __pcstackCOMMON 0070             __pidataBANK0 01F7  
           __pidataBANK1 0253               __end_of_rx 020F     __end_of_corner_cases 029D  
             __pbssBANK0 005F               __pbssBANK3 0190               ??_LCD_data 0070  
             ??_LCD_init 0073            ?_refresh_text 0070       __size_of_read_data 00C5  
             __pmaintext 05D6                  ?___lmul 0070                  ?_cloudy 0070  
         ___lmul@product 0079               __stringtab 0003     __size_of_low_battery 00A4  
         ??_refresh_text 0075   __size_of_random_number 002A          __size_of___lmul 0046  
                ___awmod 0412          __size_of_cloudy 003E                  __ptext1 020F  
                __ptext2 0511                  __ptext3 0206                  __ptext4 02DB  
                __ptext5 0343                  __ptext6 03CB                  __ptext7 0385  
                __ptext8 0412                  __ptext9 046D        __end_of_read_data 05D6  
       ___awmod@dividend 0029                  _ser_int 020F                  clrloop0 01FF  
   end_of_initialization 07FC             read_data@gps 0022            ?_printRandoms 002D  
  __size_of_corner_cases 001B               _print_data 06AB            _random_number 02DB  
         random_number@c 003B           random_number@l 0037           random_number@u 0039  
            print_data@h 0075        __size_of_LCD_data 0014             _corner_cases 0282  
      __size_of_LCD_init 001F           ??_printRandoms 0033           __end_of___lmul 03CB  
         __end_of_cloudy 0343           ?_random_number 0037     __end_of_refresh_text 0282  
    start_initialization 07D1            ??_LCD_command 0070                 ??___lmul 0078  
             init_fetch0 0218                 ??_cloudy 0075              __pdataBANK0 0066  
            __pdataBANK1 00A0               read_data@f 0027               read_data@i 0025  
             read_data@j 0023              ?_print_data 0070                ___latbits 0002  
          __pcstackBANK0 0020       corner_cases@number 0078      __end_of_LCD_command 023F  
               ?___awmod 0027          ??_random_number 007E                __pstrings 0003  
               ?_ser_int 0070            ??_low_battery 0075                _read_data 0511  
   __end_of_printRandoms 0385              __size_of_rx 0009            _reset_counter 0062  
               _LCD_data 023F                 _LCD_init 029D                clear_ram0 01FE  
    __size_of_print_data 0126                main@F1148 00A0    __size_of_refresh_text 0019  
            __stringbase 0008                main@seven 0049               ?_read_data 0070  
      ___lmul@multiplier 0070              _LCD_command 022B      __end_of_low_battery 0511  
           _refresh_text 0269         __size_of___awmod 005B       __end_of__stringtab 0009  
               __ptext10 0282                 __ptext11 06AB                 __ptext12 0269  
               __ptext13 0305                 __ptext14 02BC                 __ptext15 023F  
               __ptext16 029D                 __ptext17 022B         __size_of_ser_int 0009  
          __size_of_main 00D5            __size_of_rand 0047            __size_of_show 001F  
            _random_case 0064             ??_print_data 0075    __size_of_printRandoms 0042  
               init_ram0 021C              _low_battery 046D            read_data@flag 0020  
            ??_read_data 0075                stringcode 0003       __end_of_print_data 07D1  
           _printRandoms 0343                 stringdir 0003                 stringtab 0003  
         LCD_command@cmd 0072  

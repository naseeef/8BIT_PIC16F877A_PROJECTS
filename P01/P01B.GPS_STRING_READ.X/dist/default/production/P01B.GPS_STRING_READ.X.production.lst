

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat May 21 14:38:55 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.40
    38                           ; Generated 17/11/2021 GMT
    39                           ; 
    40                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F877A Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0088                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009E                     	;# 
   185  009F                     	;# 
   186  010C                     	;# 
   187  010D                     	;# 
   188  010E                     	;# 
   189  010F                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192                           
   193                           	psect	idataBANK0
   194  0000'                    __pidataBANK0:
   195                           
   196                           ;initializer for _randx
   197  0000' 3401               	retlw	1
   198  0001' 3400               	retlw	0
   199  0002' 3400               	retlw	0
   200  0003' 3400               	retlw	0
   201                           
   202                           ;initializer for _pv
   203  0004' 3447               	retlw	71
   204  0005' 3450               	retlw	80
   205  0006' 3452               	retlw	82
   206  0018                     _RCSTA	set	24
   207  001A                     _RCREG	set	26
   208  0008                     _PORTD	set	8
   209  0065                     _RCIF	set	101
   210  003D                     _RC5	set	61
   211  003C                     _RC4	set	60
   212  003B                     _RC3	set	59
   213  0099                     _SPBRG	set	153
   214  0088                     _TRISD	set	136
   215  043D                     _TRISC5	set	1085
   216  043C                     _TRISC4	set	1084
   217  043B                     _TRISC3	set	1083
   218                           
   219                           	psect	strings
   220  0000'                    __pstrings:
   221  0000'                    stringtab:
   222  0000'                    __stringtab:
   223  0000'                    stringcode:	
   224                           ;	String table - string pointers are 1 byte each
   225                           
   226  0000'                    stringdir:
   227  0000' 3000'              	movlw	high stringdir
   228  0001' 008A               	movwf	10
   229  0002' 0804               	movf	4,w
   230  0003' 0A84               	incf	4,f
   231  0004' 0782               	addwf	2,f
   232  0005'                    __stringbase:
   233  0005' 3400               	retlw	0
   234  0006'                    __end_of__stringtab:
   235  0006'                    STR_9:
   236  0006' 3421               	retlw	33	;'!'
   237  0007' 3421               	retlw	33	;'!'
   238  0008' 3443               	retlw	67	;'C'
   239  0009' 3441               	retlw	65	;'A'
   240  000A' 344E               	retlw	78	;'N'
   241  000B' 3427               	retlw	39	;'''
   242  000C' 3454               	retlw	84	;'T'
   243  000D' 3420               	retlw	32	;' '
   244  000E' 3446               	retlw	70	;'F'
   245  000F' 3445               	retlw	69	;'E'
   246  0010' 3454               	retlw	84	;'T'
   247  0011' 3443               	retlw	67	;'C'
   248  0012' 3448               	retlw	72	;'H'
   249  0013' 3420               	retlw	32	;' '
   250  0014' 3444               	retlw	68	;'D'
   251  0015' 3441               	retlw	65	;'A'
   252  0016' 3454               	retlw	84	;'T'
   253  0017' 3441               	retlw	65	;'A'
   254  0018' 3421               	retlw	33	;'!'
   255  0019' 3421               	retlw	33	;'!'
   256  001A' 3400               	retlw	0
   257  001B'                    STR_8:
   258  001B' 3421               	retlw	33	;'!'
   259  001C' 3443               	retlw	67	;'C'
   260  001D' 344C               	retlw	76	;'L'
   261  001E' 344F               	retlw	79	;'O'
   262  001F' 3455               	retlw	85	;'U'
   263  0020' 3444               	retlw	68	;'D'
   264  0021' 3459               	retlw	89	;'Y'
   265  0022' 3420               	retlw	32	;' '
   266  0023' 3445               	retlw	69	;'E'
   267  0024' 344E               	retlw	78	;'N'
   268  0025' 3456               	retlw	86	;'V'
   269  0026' 3449               	retlw	73	;'I'
   270  0027' 3452               	retlw	82	;'R'
   271  0028' 344F               	retlw	79	;'O'
   272  0029' 344E               	retlw	78	;'N'
   273  002A' 344D               	retlw	77	;'M'
   274  002B' 3445               	retlw	69	;'E'
   275  002C' 344E               	retlw	78	;'N'
   276  002D' 3454               	retlw	84	;'T'
   277  002E' 3421               	retlw	33	;'!'
   278  002F' 3400               	retlw	0
   279  0030'                    STR_11:
   280  0030' 342D               	retlw	45	;'-'
   281  0031' 342D               	retlw	45	;'-'
   282  0032' 342D               	retlw	45	;'-'
   283  0033' 3454               	retlw	84	;'T'
   284  0034' 3452               	retlw	82	;'R'
   285  0035' 3459               	retlw	89	;'Y'
   286  0036' 3420               	retlw	32	;' '
   287  0037' 3420               	retlw	32	;' '
   288  0038' 3452               	retlw	82	;'R'
   289  0039' 3445               	retlw	69	;'E'
   290  003A' 3453               	retlw	83	;'S'
   291  003B' 3445               	retlw	69	;'E'
   292  003C' 3454               	retlw	84	;'T'
   293  003D' 3454               	retlw	84	;'T'
   294  003E' 3449               	retlw	73	;'I'
   295  003F' 344E               	retlw	78	;'N'
   296  0040' 3447               	retlw	71	;'G'
   297  0041' 342D               	retlw	45	;'-'
   298  0042' 342D               	retlw	45	;'-'
   299  0043' 342D               	retlw	45	;'-'
   300  0044' 3400               	retlw	0
   301  0045'                    STR_14:
   302  0045' 3452               	retlw	82	;'R'
   303  0046' 3445               	retlw	69	;'E'
   304  0047' 3443               	retlw	67	;'C'
   305  0048' 3448               	retlw	72	;'H'
   306  0049' 3441               	retlw	65	;'A'
   307  004A' 3452               	retlw	82	;'R'
   308  004B' 3447               	retlw	71	;'G'
   309  004C' 3445               	retlw	69	;'E'
   310  004D' 3420               	retlw	32	;' '
   311  004E' 3449               	retlw	73	;'I'
   312  004F' 344D               	retlw	77	;'M'
   313  0050' 344D               	retlw	77	;'M'
   314  0051' 3445               	retlw	69	;'E'
   315  0052' 3444               	retlw	68	;'D'
   316  0053' 3449               	retlw	73	;'I'
   317  0054' 3441               	retlw	65	;'A'
   318  0055' 3454               	retlw	84	;'T'
   319  0056' 3445               	retlw	69	;'E'
   320  0057' 344C               	retlw	76	;'L'
   321  0058' 3459               	retlw	89	;'Y'
   322  0059' 3400               	retlw	0
   323  005A'                    STR_12:
   324  005A' 342D               	retlw	45	;'-'
   325  005B' 3421               	retlw	33	;'!'
   326  005C' 3421               	retlw	33	;'!'
   327  005D' 3421               	retlw	33	;'!'
   328  005E' 3442               	retlw	66	;'B'
   329  005F' 3441               	retlw	65	;'A'
   330  0060' 3454               	retlw	84	;'T'
   331  0061' 3454               	retlw	84	;'T'
   332  0062' 3445               	retlw	69	;'E'
   333  0063' 3452               	retlw	82	;'R'
   334  0064' 3459               	retlw	89	;'Y'
   335  0065' 3420               	retlw	32	;' '
   336  0066' 344C               	retlw	76	;'L'
   337  0067' 344F               	retlw	79	;'O'
   338  0068' 3457               	retlw	87	;'W'
   339  0069' 3421               	retlw	33	;'!'
   340  006A' 3421               	retlw	33	;'!'
   341  006B' 3421               	retlw	33	;'!'
   342  006C' 342D               	retlw	45	;'-'
   343  006D' 3400               	retlw	0
   344  006E'                    STR_7:
   345  006E' 3446               	retlw	70	;'F'
   346  006F' 344F               	retlw	79	;'O'
   347  0070' 3452               	retlw	82	;'R'
   348  0071' 3420               	retlw	32	;' '
   349  0072' 3452               	retlw	82	;'R'
   350  0073' 3445               	retlw	69	;'E'
   351  0074' 3446               	retlw	70	;'F'
   352  0075' 3452               	retlw	82	;'R'
   353  0076' 3445               	retlw	69	;'E'
   354  0077' 3453               	retlw	83	;'S'
   355  0078' 3448               	retlw	72	;'H'
   356  0079' 3420               	retlw	32	;' '
   357  007A' 3444               	retlw	68	;'D'
   358  007B' 3445               	retlw	69	;'E'
   359  007C' 3456               	retlw	86	;'V'
   360  007D' 3449               	retlw	73	;'I'
   361  007E' 3443               	retlw	67	;'C'
   362  007F' 3445               	retlw	69	;'E'
   363  0080' 3400               	retlw	0
   364  0081'                    STR_6:
   365  0081' 3450               	retlw	80	;'P'
   366  0082' 3452               	retlw	82	;'R'
   367  0083' 3445               	retlw	69	;'E'
   368  0084' 3453               	retlw	83	;'S'
   369  0085' 3453               	retlw	83	;'S'
   370  0086' 3420               	retlw	32	;' '
   371  0087' 3450               	retlw	80	;'P'
   372  0088' 3455               	retlw	85	;'U'
   373  0089' 3453               	retlw	83	;'S'
   374  008A' 3448               	retlw	72	;'H'
   375  008B' 3420               	retlw	32	;' '
   376  008C' 3442               	retlw	66	;'B'
   377  008D' 3455               	retlw	85	;'U'
   378  008E' 3454               	retlw	84	;'T'
   379  008F' 3454               	retlw	84	;'T'
   380  0090' 344F               	retlw	79	;'O'
   381  0091' 344E               	retlw	78	;'N'
   382  0092' 3400               	retlw	0
   383  0093'                    STR_2:
   384  0093' 3443               	retlw	67	;'C'
   385  0094' 346F               	retlw	111	;'o'
   386  0095' 346E               	retlw	110	;'n'
   387  0096' 346E               	retlw	110	;'n'
   388  0097' 3465               	retlw	101	;'e'
   389  0098' 3463               	retlw	99	;'c'
   390  0099' 3474               	retlw	116	;'t'
   391  009A' 3469               	retlw	105	;'i'
   392  009B' 346E               	retlw	110	;'n'
   393  009C' 3467               	retlw	103	;'g'
   394  009D' 342E               	retlw	46	;'.'
   395  009E' 342E               	retlw	46	;'.'
   396  009F' 342E               	retlw	46	;'.'
   397  00A0' 3400               	retlw	0
   398  00A1'                    STR_15:
   399  00A1' 3453               	retlw	83	;'S'
   400  00A2' 3457               	retlw	87	;'W'
   401  00A3' 3449               	retlw	73	;'I'
   402  00A4' 3454               	retlw	84	;'T'
   403  00A5' 3443               	retlw	67	;'C'
   404  00A6' 3448               	retlw	72	;'H'
   405  00A7' 3449               	retlw	73	;'I'
   406  00A8' 344E               	retlw	78	;'N'
   407  00A9' 3447               	retlw	71	;'G'
   408  00AA' 3420               	retlw	32	;' '
   409  00AB' 344F               	retlw	79	;'O'
   410  00AC' 3446               	retlw	70	;'F'
   411  00AD' 3446               	retlw	70	;'F'
   412  00AE' 3400               	retlw	0
   413  00AF'                    STR_3:
   414  00AF' 3452               	retlw	82	;'R'
   415  00B0' 3465               	retlw	101	;'e'
   416  00B1' 3473               	retlw	115	;'s'
   417  00B2' 3465               	retlw	101	;'e'
   418  00B3' 3474               	retlw	116	;'t'
   419  00B4' 3474               	retlw	116	;'t'
   420  00B5' 3469               	retlw	105	;'i'
   421  00B6' 346E               	retlw	110	;'n'
   422  00B7' 3467               	retlw	103	;'g'
   423  00B8' 342E               	retlw	46	;'.'
   424  00B9' 342E               	retlw	46	;'.'
   425  00BA' 342E               	retlw	46	;'.'
   426  00BB' 3400               	retlw	0
   427  00BC'                    STR_1:
   428  00BC' 3457               	retlw	87	;'W'
   429  00BD' 3445               	retlw	69	;'E'
   430  00BE' 344C               	retlw	76	;'L'
   431  00BF' 3443               	retlw	67	;'C'
   432  00C0' 344F               	retlw	79	;'O'
   433  00C1' 344D               	retlw	77	;'M'
   434  00C2' 3445               	retlw	69	;'E'
   435  00C3' 342E               	retlw	46	;'.'
   436  00C4' 342E               	retlw	46	;'.'
   437  00C5' 342E               	retlw	46	;'.'
   438  00C6' 3400               	retlw	0
   439  00C7'                    STR_4:
   440  00C7' 344C               	retlw	76	;'L'
   441  00C8' 344F               	retlw	79	;'O'
   442  00C9' 344E               	retlw	78	;'N'
   443  00CA' 343A               	retlw	58	;':'
   444  00CB' 3400               	retlw	0
   445  00CC'                    STR_5:
   446  00CC' 344C               	retlw	76	;'L'
   447  00CD' 3441               	retlw	65	;'A'
   448  00CE' 3454               	retlw	84	;'T'
   449  00CF' 343A               	retlw	58	;':'
   450  00D0' 3400               	retlw	0
   451  00D1'                    STR_10:
   452  00D1' 3420               	retlw	32	;' '
   453  00D2' 3400               	retlw	0
   454  005A'                    
   455                           	psect	cinit
   456  0000'                    start_initialization:	
   457                           ; #config settings
   458                           
   459  0000'                    __initialization:
   460                           
   461                           ; Initialize objects allocated to BANK0
   462  0000' 1383               	bcf	3,7	;select IRP bank0
   463  0001' 3000'              	movlw	low (__pdataBANK0+7)
   464  0002' 00FD               	movwf	btemp+-1
   465  0003' 3000'              	movlw	high __pidataBANK0
   466  0004' 00FE               	movwf	btemp
   467  0005' 3000'              	movlw	low __pidataBANK0
   468  0006' 00FF               	movwf	btemp+1
   469  0007' 3000'              	movlw	low __pdataBANK0
   470  0008' 0084               	movwf	4
   471  0009' 120A' 118A' 2000' 120A' 118A' 	fcall	init_ram0
   472                           
   473                           ; Clear objects allocated to BANK3
   474  000E' 1783               	bsf	3,7	;select IRP bank2
   475  000F' 3000'              	movlw	low __pbssBANK3
   476  0010' 0084               	movwf	4
   477  0011' 3000'              	movlw	low (__pbssBANK3+95)
   478  0012' 120A' 118A' 2000' 120A' 118A' 	fcall	clear_ram0
   479                           
   480                           ; Clear objects allocated to BANK0
   481  0017' 0180'              	clrf	__pbssBANK0& (0+127)
   482  0018' 0180'              	clrf	(__pbssBANK0+1)& (0+127)
   483  0019' 0180'              	clrf	(__pbssBANK0+2)& (0+127)
   484  001A' 0180'              	clrf	(__pbssBANK0+3)& (0+127)
   485  001B' 0180'              	clrf	(__pbssBANK0+4)& (0+127)
   486  001C' 0180'              	clrf	(__pbssBANK0+5)& (0+127)
   487  001D' 0180'              	clrf	(__pbssBANK0+6)& (0+127)
   488  001E'                    end_of_initialization:	
   489                           ;End of C runtime variable initialization code
   490                           
   491  001E'                    __end_of__initialization:
   492  001E' 0183               	clrf	3
   493  001F' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   494                           
   495                           	psect	bssBANK0
   496  0000'                    __pbssBANK0:
   497  0000'                    _r:
   498  0000'                    	ds	3
   499  0003'                    _reset_counter:
   500  0003'                    	ds	2
   501  0005'                    _random_case:
   502  0005'                    	ds	2
   503                           
   504                           	psect	dataBANK0
   505  0000'                    __pdataBANK0:
   506  0000'                    _randx:
   507  0000'                    	ds	4
   508  0004'                    _pv:
   509  0004'                    	ds	3
   510                           
   511                           	psect	bssBANK3
   512  0000'                    __pbssBANK3:
   513  0000'                    _a:
   514  0000'                    	ds	95
   515                           
   516                           	psect	inittext
   517  0000'                    init_fetch0:	
   518                           ;	Called with low address in FSR and high address in W
   519                           
   520  0000' 087E               	movf	btemp,w
   521  0001' 008A               	movwf	10
   522  0002' 087F               	movf	btemp+1,w
   523  0003' 0082               	movwf	2
   524  0004'                    init_ram0:	
   525                           ;Called with:
   526                           ;	high address of idata address in btemp 
   527                           ;	low address of idata address in btemp+1 
   528                           ;	low address of data in FSR
   529                           ;	high address + 1 of data in btemp-1
   530                           
   531  0004' 120A' 118A' 2000' 120A' 118A' 	fcall	init_fetch0
   532  0009' 0080               	movwf	0
   533  000A' 0A84               	incf	4,f
   534  000B' 0804               	movf	4,w
   535  000C' 067D               	xorwf	btemp+-1,w
   536  000D' 1903               	btfsc	3,2
   537  000E' 3400               	retlw	0
   538  000F' 0AFF               	incf	btemp+1,f
   539  0010' 1903               	btfsc	3,2
   540  0011' 0AFE               	incf	btemp,f
   541  0012' 2800'              	goto	init_ram0
   542                           
   543                           	psect	clrtext
   544  0000'                    clear_ram0:	
   545                           ;	Called with FSR containing the base address, and
   546                           ;	W with the last address+1
   547                           
   548  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   549  0001'                    clrloop0:
   550  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   551  0002' 0A84               	incf	4,f	;increment pointer
   552  0003' 0604               	xorwf	4,w	;XOR with final address
   553  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   554  0005' 3400               	retlw	0	;all done for this memory range, return
   555  0006' 0604               	xorwf	4,w	;XOR again to restore value
   556  0007' 2800'              	goto	clrloop0	;do the next byte
   557                           
   558                           	psect	cstackCOMMON
   559  0000'                    __pcstackCOMMON:
   560  0000'                    ?_ser_int:
   561  0000'                    ??_ser_int:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0000'                    ?_LCD_init:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0000'                    ?_read_data:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0000'                    ?_show:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0000'                    ?_LCD_command:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0000'                    ??_LCD_command:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0000'                    ?_low_battery:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0000'                    ?_refresh_text:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0000'                    ?_cloudy:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0000'                    ?_srand:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0000'                    ??_time:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0000'                    ?_main:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0000'                    ?_LCD_data:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0000'                    ??_LCD_data:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0000'                    ?_rx:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0000'                    ??_rx:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0000'                    ?_print_data:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0000'                    ?_time:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0000'                    ?___lmul:	
   616                           ; 4 bytes @ 0x0
   617                           
   618  0000'                    _time$0:	
   619                           ; 4 bytes @ 0x0
   620                           
   621  0000'                    srand@x:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0000'                    ___lmul@multiplier:	
   625                           ; 2 bytes @ 0x0
   626                           
   627                           
   628                           ; 4 bytes @ 0x0
   629  0000'                    	ds	2
   630  0002'                    ??_srand:
   631  0002'                    LCD_command@cmd:	
   632                           ; 1 bytes @ 0x2
   633                           
   634  0002'                    LCD_data@data:	
   635                           ; 1 bytes @ 0x2
   636                           
   637                           
   638                           ; 1 bytes @ 0x2
   639  0002'                    	ds	1
   640  0003'                    ??_LCD_init:
   641  0003'                    ??_read_data:	
   642                           ; 1 bytes @ 0x3
   643                           
   644  0003'                    ??_show:	
   645                           ; 1 bytes @ 0x3
   646                           
   647                           
   648                           ; 1 bytes @ 0x3
   649  0003'                    	ds	1
   650  0004'                    show@s:
   651  0004'                    read_data@flag:	
   652                           ; 1 bytes @ 0x4
   653                           
   654  0004'                    ___lmul@multiplicand:	
   655                           ; 2 bytes @ 0x4
   656                           
   657                           
   658                           ; 4 bytes @ 0x4
   659  0004'                    	ds	1
   660  0005'                    ??_low_battery:
   661  0005'                    ??_refresh_text:	
   662                           ; 1 bytes @ 0x5
   663                           
   664  0005'                    ??_cloudy:	
   665                           ; 1 bytes @ 0x5
   666                           
   667  0005'                    ??_print_data:	
   668                           ; 1 bytes @ 0x5
   669                           
   670  0005'                    print_data@h:	
   671                           ; 1 bytes @ 0x5
   672                           
   673                           
   674                           ; 2 bytes @ 0x5
   675  0005'                    	ds	1
   676  0006'                    read_data@gps:
   677                           
   678                           ; 1 bytes @ 0x6
   679  0006'                    	ds	1
   680  0007'                    read_data@j:
   681                           
   682                           ; 2 bytes @ 0x7
   683  0007'                    	ds	1
   684  0008'                    ?_corner_cases:
   685  0008'                    ??___lmul:	
   686                           ; 1 bytes @ 0x8
   687                           
   688  0008'                    corner_cases@number:	
   689                           ; 1 bytes @ 0x8
   690                           
   691                           
   692                           ; 2 bytes @ 0x8
   693  0008'                    	ds	1
   694  0009'                    read_data@i:
   695  0009'                    ___lmul@product:	
   696                           ; 2 bytes @ 0x9
   697                           
   698                           
   699                           ; 4 bytes @ 0x9
   700  0009'                    	ds	1
   701  000A'                    ??_corner_cases:
   702                           
   703                           ; 1 bytes @ 0xA
   704  000A'                    	ds	1
   705  000B'                    read_data@f:
   706                           
   707                           ; 2 bytes @ 0xB
   708  000B'                    	ds	2
   709  000D'                    ??___awmod:
   710                           
   711                           ; 1 bytes @ 0xD
   712  000D'                    	ds	1
   713  000E'                    ??_random_number:
   714                           
   715                           	psect	cstackBANK0
   716  0000'                    __pcstackBANK0:	
   717                           ; 1 bytes @ 0xE
   718                           
   719  0000'                    ?_rand:
   720                           
   721                           ; 2 bytes @ 0x0
   722  0000'                    	ds	2
   723  0002'                    ??_rand:
   724                           
   725                           ; 1 bytes @ 0x2
   726  0002'                    	ds	5
   727  0007'                    ?___awmod:
   728  0007'                    ___awmod@divisor:	
   729                           ; 2 bytes @ 0x7
   730                           
   731                           
   732                           ; 2 bytes @ 0x7
   733  0007'                    	ds	2
   734  0009'                    ___awmod@dividend:
   735                           
   736                           ; 2 bytes @ 0x9
   737  0009'                    	ds	2
   738  000B'                    ___awmod@counter:
   739                           
   740                           ; 1 bytes @ 0xB
   741  000B'                    	ds	1
   742  000C'                    ___awmod@sign:
   743                           
   744                           ; 1 bytes @ 0xC
   745  000C'                    	ds	1
   746  000D'                    ?_printRandoms:
   747  000D'                    printRandoms@lower:	
   748                           ; 2 bytes @ 0xD
   749                           
   750                           
   751                           ; 2 bytes @ 0xD
   752  000D'                    	ds	2
   753  000F'                    printRandoms@upper:
   754                           
   755                           ; 2 bytes @ 0xF
   756  000F'                    	ds	2
   757  0011'                    printRandoms@count:
   758                           
   759                           ; 2 bytes @ 0x11
   760  0011'                    	ds	2
   761  0013'                    ??_printRandoms:
   762                           
   763                           ; 1 bytes @ 0x13
   764  0013'                    	ds	2
   765  0015'                    printRandoms@num:
   766                           
   767                           ; 2 bytes @ 0x15
   768  0015'                    	ds	2
   769  0017'                    ?_random_number:
   770  0017'                    random_number@l:	
   771                           ; 2 bytes @ 0x17
   772                           
   773                           
   774                           ; 2 bytes @ 0x17
   775  0017'                    	ds	2
   776  0019'                    random_number@u:
   777                           
   778                           ; 2 bytes @ 0x19
   779  0019'                    	ds	2
   780  001B'                    random_number@c:
   781                           
   782                           ; 2 bytes @ 0x1B
   783  001B'                    	ds	2
   784  001D'                    random_number@lower:
   785                           
   786                           ; 2 bytes @ 0x1D
   787  001D'                    	ds	2
   788  001F'                    random_number@upper:
   789                           
   790                           ; 2 bytes @ 0x1F
   791  001F'                    	ds	2
   792  0021'                    random_number@count:
   793                           
   794                           ; 2 bytes @ 0x21
   795  0021'                    	ds	2
   796  0023'                    random_number@rn:
   797                           
   798                           ; 2 bytes @ 0x23
   799  0023'                    	ds	2
   800  0025'                    ??_main:
   801                           
   802                           ; 1 bytes @ 0x25
   803  0025'                    	ds	3
   804                           
   805                           	psect	maintext
   806  0000'                    __pmaintext:	
   807 ;;
   808 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   809 ;;
   810 ;; *************** function _main *****************
   811 ;; Defined at:
   812 ;;		line 43 in file "main.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : B00/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         0       0       0       0       0
   827 ;;      Locals:         0       0       0       0       0
   828 ;;      Temps:          0       3       0       0       0
   829 ;;      Totals:         0       3       0       0       0
   830 ;;Total ram usage:        3 bytes
   831 ;; Hardware stack levels required when called: 5
   832 ;; This function calls:
   833 ;;		_LCD_command
   834 ;;		_LCD_init
   835 ;;		_corner_cases
   836 ;;		_low_battery
   837 ;;		_random_number
   838 ;;		_read_data
   839 ;;		_ser_int
   840 ;;		_show
   841 ;; This function is called by:
   842 ;;		Startup code after reset
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           
   847                           ;psect for function _main
   848  0000'                    _main:
   849  0000'                    l1497:	
   850                           ;incstack = 0
   851                           ; Regs used in _main: [allreg]
   852                           
   853                           
   854                           ;main.c: 46: TRISD=0x00;
   855  0000' 1683               	bsf	3,5	;RP0=1, select bank1
   856  0001' 1303               	bcf	3,6	;RP1=0, select bank1
   857  0002' 0188               	clrf	8	;volatile
   858  0003'                    l1499:
   859                           
   860                           ;main.c: 47: TRISC3 = 1;
   861  0003' 1587               	bsf	7,3	;volatile
   862  0004'                    l1501:
   863                           
   864                           ;main.c: 48: TRISC4 = TRISC5 = 0;
   865  0004' 1287               	bcf	7,5	;volatile
   866  0005' 1207               	bcf	7,4	;volatile
   867  0006'                    l1503:
   868                           
   869                           ;main.c: 49: ser_int();
   870  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_int
   871  000B'                    l1505:
   872                           
   873                           ;main.c: 50: LCD_init();
   874  000B' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_init
   875  0010'                    l1507:
   876                           
   877                           ;main.c: 51: read_data();
   878  0010' 120A' 118A' 2000' 120A' 118A' 	fcall	_read_data
   879  0015'                    l1509:
   880                           
   881                           ;main.c: 54:     show("WELCOME...");
   882  0015' 30B7               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   883  0016' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
   884  001B'                    l1511:
   885                           
   886                           ;main.c: 55:     _delay((unsigned long)((200)*(20000000/4000.0)));
   887  001B' 3006               	movlw	6
   888  001C' 1283               	bcf	3,5	;RP0=0, select bank0
   889  001D' 1303               	bcf	3,6	;RP1=0, select bank0
   890  001E' 00A7'              	movwf	??_main+2
   891  001F' 3013               	movlw	19
   892  0020' 00A6'              	movwf	??_main+1
   893  0021' 30AD               	movlw	173
   894  0022' 00A5'              	movwf	??_main
   895  0023'                    u697:
   896  0023' 0BA5'              	decfsz	??_main,f
   897  0024' 2800'              	goto	u697
   898  0025' 0BA6'              	decfsz	??_main+1,f
   899  0026' 2800'              	goto	u697
   900  0027' 0BA7'              	decfsz	??_main+2,f
   901  0028' 2800'              	goto	u697
   902  0029'                    l1513:
   903                           
   904                           ;main.c: 56:     LCD_command(0x01);
   905  0029' 3001               	movlw	1
   906  002A' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
   907  002F'                    l1515:
   908                           
   909                           ;main.c: 58:     LCD_command(0x80);
   910  002F' 3080               	movlw	128
   911  0030' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
   912  0035'                    l1517:
   913                           
   914                           ;main.c: 59:     show("Connecting...");
   915  0035' 308E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   916  0036' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
   917  003B'                    l1519:
   918                           
   919                           ;main.c: 60:     _delay((unsigned long)((500)*(20000000/4000.0)));
   920  003B' 300D               	movlw	13
   921  003C' 1283               	bcf	3,5	;RP0=0, select bank0
   922  003D' 1303               	bcf	3,6	;RP1=0, select bank0
   923  003E' 00A7'              	movwf	??_main+2
   924  003F' 30AF               	movlw	175
   925  0040' 00A6'              	movwf	??_main+1
   926  0041' 30B5               	movlw	181
   927  0042' 00A5'              	movwf	??_main
   928  0043'                    u707:
   929  0043' 0BA5'              	decfsz	??_main,f
   930  0044' 2800'              	goto	u707
   931  0045' 0BA6'              	decfsz	??_main+1,f
   932  0046' 2800'              	goto	u707
   933  0047' 0BA7'              	decfsz	??_main+2,f
   934  0048' 2800'              	goto	u707
   935  0049' 2800'              	nop2
   936  004A'                    l1521:
   937                           
   938                           ;main.c: 62:     random_case = random_number(0, 1, 1);
   939  004A' 3000               	movlw	0
   940  004B' 1283               	bcf	3,5	;RP0=0, select bank0
   941  004C' 1303               	bcf	3,6	;RP1=0, select bank0
   942  004D' 0097'              	movwf	random_number@l
   943  004E' 0098'              	movwf	random_number@l+1
   944  004F' 3001               	movlw	1
   945  0050' 0099'              	movwf	random_number@u
   946  0051' 3000               	movlw	0
   947  0052' 009A'              	movwf	random_number@u+1
   948  0053' 3001               	movlw	1
   949  0054' 009B'              	movwf	random_number@c
   950  0055' 3000               	movlw	0
   951  0056' 009C'              	movwf	random_number@c+1
   952  0057' 120A' 118A' 2000' 120A' 118A' 	fcall	_random_number
   953  005C' 1283               	bcf	3,5	;RP0=0, select bank0
   954  005D' 1303               	bcf	3,6	;RP1=0, select bank0
   955  005E' 0818'              	movf	?_random_number+1,w
   956  005F' 0086'              	movwf	_random_case+1
   957  0060' 0817'              	movf	?_random_number,w
   958  0061' 0085'              	movwf	_random_case
   959  0062'                    l1523:
   960                           
   961                           ;main.c: 63:     corner_cases(random_case);
   962  0062' 0806'              	movf	_random_case+1,w
   963  0063' 0089'              	movwf	corner_cases@number+1
   964  0064' 0805'              	movf	_random_case,w
   965  0065' 0088'              	movwf	corner_cases@number
   966  0066' 120A' 118A' 2000' 120A' 118A' 	fcall	_corner_cases
   967  006B'                    l1525:
   968                           
   969                           ;main.c: 66:     {;main.c: 67:         if (RC3 == 1)
   970  006B' 1283               	bcf	3,5	;RP0=0, select bank0
   971  006C' 1303               	bcf	3,6	;RP1=0, select bank0
   972  006D' 1D87               	btfss	7,3	;volatile
   973  006E' 2800'              	goto	u671
   974  006F' 2800'              	goto	u670
   975  0070'                    u671:
   976  0070' 2800'              	goto	l1525
   977  0071'                    u670:
   978  0071'                    l1527:
   979                           
   980                           ;main.c: 68:         {;main.c: 69:             reset_counter += 1;
   981  0071' 3001               	movlw	1
   982  0072' 0783'              	addwf	_reset_counter,f
   983  0073' 1803               	skipnc
   984  0074' 0A84'              	incf	_reset_counter+1,f
   985  0075' 3000               	movlw	0
   986  0076' 0784'              	addwf	_reset_counter+1,f
   987                           
   988                           ;main.c: 70:             while(reset_counter <= 10)
   989  0077' 2800'              	goto	l1537
   990  0078'                    l1529:
   991                           
   992                           ;main.c: 71:             {;main.c: 72:                 LCD_command(0x01);
   993  0078' 3001               	movlw	1
   994  0079' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
   995                           
   996                           ;main.c: 73:                 LCD_command(0x80);
   997  007E' 3080               	movlw	128
   998  007F' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
   999  0084'                    l1531:
  1000                           
  1001                           ;main.c: 74:                 show("Resetting...");
  1002  0084' 30AA               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1003  0085' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  1004  008A'                    l1533:
  1005                           
  1006                           ;main.c: 75:                 _delay((unsigned long)((200)*(20000000/4000.0)));
  1007  008A' 3006               	movlw	6
  1008  008B' 1283               	bcf	3,5	;RP0=0, select bank0
  1009  008C' 1303               	bcf	3,6	;RP1=0, select bank0
  1010  008D' 00A7'              	movwf	??_main+2
  1011  008E' 3013               	movlw	19
  1012  008F' 00A6'              	movwf	??_main+1
  1013  0090' 30AD               	movlw	173
  1014  0091' 00A5'              	movwf	??_main
  1015  0092'                    u717:
  1016  0092' 0BA5'              	decfsz	??_main,f
  1017  0093' 2800'              	goto	u717
  1018  0094' 0BA6'              	decfsz	??_main+1,f
  1019  0095' 2800'              	goto	u717
  1020  0096' 0BA7'              	decfsz	??_main+2,f
  1021  0097' 2800'              	goto	u717
  1022  0098'                    l1535:
  1023                           
  1024                           ;main.c: 76:                 LCD_command(0x01);
  1025  0098' 3001               	movlw	1
  1026  0099' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  1027                           
  1028                           ;main.c: 77:                 goto A;
  1029  009E' 2800'              	goto	l1515
  1030  009F'                    l1537:
  1031                           
  1032                           ;main.c: 70:             while(reset_counter <= 10)
  1033  009F' 0804'              	movf	_reset_counter+1,w
  1034  00A0' 3A80               	xorlw	128
  1035  00A1' 00FF               	movwf	btemp+1
  1036  00A2' 3080               	movlw	128
  1037  00A3' 027F               	subwf	btemp+1,w
  1038  00A4' 1D03               	skipz
  1039  00A5' 2800'              	goto	u685
  1040  00A6' 300B               	movlw	11
  1041  00A7' 0203'              	subwf	_reset_counter,w
  1042  00A8'                    u685:
  1043  00A8' 1C03               	skipc
  1044  00A9' 2800'              	goto	u681
  1045  00AA' 2800'              	goto	u680
  1046  00AB'                    u681:
  1047  00AB' 2800'              	goto	l1529
  1048  00AC'                    u680:
  1049  00AC'                    l1539:
  1050                           
  1051                           ;main.c: 79:             low_battery();
  1052  00AC' 120A' 118A' 2000' 120A' 118A' 	fcall	_low_battery
  1053  00B1' 2800'              	goto	l1525
  1054  00B2' 120A' 118A' 2800'  	ljmp	start
  1055  00B5'                    __end_of_main:
  1056                           
  1057                           	psect	text1
  1058  0000'                    __ptext1:	
  1059 ;; *************** function _ser_int *****************
  1060 ;; Defined at:
  1061 ;;		line 115 in file "main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1075 ;;      Params:         0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels used: 1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           
  1089                           ;psect for function _ser_int
  1090  0000'                    _ser_int:
  1091  0000'                    l1375:	
  1092                           ;incstack = 0
  1093                           ; Regs used in _ser_int: [wreg]
  1094                           
  1095                           
  1096                           ;main.c: 117:  RCSTA= 0b10010000;
  1097  0000' 3090               	movlw	144
  1098  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1099  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  1100  0003' 0098               	movwf	24	;volatile
  1101                           
  1102                           ;main.c: 118:  SPBRG=31;
  1103  0004' 301F               	movlw	31
  1104  0005' 1683               	bsf	3,5	;RP0=1, select bank1
  1105  0006' 1303               	bcf	3,6	;RP1=0, select bank1
  1106  0007' 0099               	movwf	25	;volatile
  1107  0008'                    l93:
  1108  0008' 0008               	return
  1109  0009'                    __end_of_ser_int:
  1110                           
  1111                           	psect	text2
  1112  0000'                    __ptext2:	
  1113 ;; *************** function _read_data *****************
  1114 ;; Defined at:
  1115 ;;		line 127 in file "main.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  gps             1    6[COMMON] unsigned char 
  1120 ;;  j               2    7[COMMON] int 
  1121 ;;  f               2   11[COMMON] int 
  1122 ;;  i               2    9[COMMON] int 
  1123 ;;  flag            2    4[COMMON] int 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1133 ;;      Params:         0       0       0       0       0
  1134 ;;      Locals:         9       0       0       0       0
  1135 ;;      Temps:          1       0       0       0       0
  1136 ;;      Totals:        10       0       0       0       0
  1137 ;;Total ram usage:       10 bytes
  1138 ;; Hardware stack levels used: 1
  1139 ;; Hardware stack levels required when called: 1
  1140 ;; This function calls:
  1141 ;;		_LCD_data
  1142 ;;		_rx
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           
  1149                           ;psect for function _read_data
  1150  0000'                    _read_data:
  1151  0000'                    l1379:	
  1152                           ;incstack = 0
  1153                           ; Regs used in _read_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1154                           
  1155                           
  1156                           ;main.c: 129:     int i, f, flag=0;
  1157  0000' 0184'              	clrf	read_data@flag
  1158  0001' 0185'              	clrf	read_data@flag+1
  1159                           
  1160                           ;main.c: 130:     for (int j=0; j<95;j++)
  1161  0002' 0187'              	clrf	read_data@j
  1162  0003' 0188'              	clrf	read_data@j+1
  1163  0004'                    l1385:
  1164                           
  1165                           ;main.c: 131: {;main.c: 132: char gps = rx();
  1166  0004' 120A' 118A' 2000' 120A' 118A' 	fcall	_rx
  1167  0009' 0083'              	movwf	??_read_data
  1168  000A' 0803'              	movf	??_read_data,w
  1169  000B' 0086'              	movwf	read_data@gps
  1170  000C'                    l1387:
  1171                           
  1172                           ;main.c: 133: if (gps == '$')
  1173  000C' 3024               	movlw	36
  1174  000D' 0606'              	xorwf	read_data@gps,w
  1175  000E' 1D03               	btfss	3,2
  1176  000F' 2800'              	goto	u591
  1177  0010' 2800'              	goto	u590
  1178  0011'                    u591:
  1179  0011' 2800'              	goto	l1431
  1180  0012'                    u590:
  1181  0012'                    l1389:
  1182                           
  1183                           ;main.c: 134: {;main.c: 136:     for(f=0;f<3;f++) {
  1184  0012' 018B'              	clrf	read_data@f
  1185  0013' 018C'              	clrf	read_data@f+1
  1186  0014'                    l107:
  1187  0014' 1283               	bcf	3,5	;RP0=0, select bank0
  1188  0015' 1303               	bcf	3,6	;RP1=0, select bank0
  1189  0016' 1E8C               	btfss	12,5	;volatile
  1190  0017' 2800'              	goto	u601
  1191  0018' 2800'              	goto	u600
  1192  0019'                    u601:
  1193  0019' 2800'              	goto	l107
  1194  001A'                    u600:
  1195  001A'                    l1395:
  1196                           
  1197                           ;main.c: 138:         r[f]=RCREG;
  1198  001A' 081A               	movf	26,w	;volatile
  1199  001B' 0083'              	movwf	??_read_data
  1200  001C' 080B'              	movf	read_data@f,w
  1201  001D' 3E00'              	addlw	(low (_r| 0))& (0+255)
  1202  001E' 0084               	movwf	4
  1203  001F' 0803'              	movf	??_read_data,w
  1204  0020' 1383               	bcf	3,7	;select IRP bank0
  1205  0021' 0080               	movwf	0
  1206  0022'                    l1397:
  1207                           
  1208                           ;main.c: 139:       }
  1209  0022' 3001               	movlw	1
  1210  0023' 078B'              	addwf	read_data@f,f
  1211  0024' 1803               	skipnc
  1212  0025' 0A8C'              	incf	read_data@f+1,f
  1213  0026' 3000               	movlw	0
  1214  0027' 078C'              	addwf	read_data@f+1,f
  1215  0028'                    l1399:
  1216  0028' 080C'              	movf	read_data@f+1,w
  1217  0029' 3A80               	xorlw	128
  1218  002A' 00FF               	movwf	btemp+1
  1219  002B' 3080               	movlw	128
  1220  002C' 027F               	subwf	btemp+1,w
  1221  002D' 1D03               	skipz
  1222  002E' 2800'              	goto	u615
  1223  002F' 3003               	movlw	3
  1224  0030' 020B'              	subwf	read_data@f,w
  1225  0031'                    u615:
  1226  0031' 1C03               	skipc
  1227  0032' 2800'              	goto	u611
  1228  0033' 2800'              	goto	u610
  1229  0034'                    u611:
  1230  0034' 2800'              	goto	l107
  1231  0035'                    u610:
  1232  0035'                    l1401:
  1233                           
  1234                           ;main.c: 140:         r[f]='\0';
  1235  0035' 080B'              	movf	read_data@f,w
  1236  0036' 3E00'              	addlw	(low (_r| 0))& (0+255)
  1237  0037' 0084               	movwf	4
  1238  0038' 1383               	bcf	3,7	;select IRP bank0
  1239  0039' 0180               	clrf	0
  1240  003A'                    l1403:
  1241                           
  1242                           ;main.c: 144:         for (f=0;pv[f]!='\0';f++)
  1243  003A' 018B'              	clrf	read_data@f
  1244  003B' 018C'              	clrf	read_data@f+1
  1245  003C' 2800'              	goto	l1413
  1246  003D'                    l1405:
  1247                           
  1248                           ;main.c: 145:         {;main.c: 146:             if(r[f]!=pv[f])
  1249  003D' 080B'              	movf	read_data@f,w
  1250  003E' 3E00'              	addlw	(low (_pv| 0))& (0+255)
  1251  003F' 0084               	movwf	4
  1252  0040' 0800               	movf	0,w
  1253  0041' 0083'              	movwf	??_read_data
  1254  0042' 080B'              	movf	read_data@f,w
  1255  0043' 3E00'              	addlw	(low (_r| 0))& (0+255)
  1256  0044' 0084               	movwf	4
  1257  0045' 0800               	movf	0,w
  1258  0046' 0603'              	xorwf	??_read_data,w
  1259  0047' 1903               	skipnz
  1260  0048' 2800'              	goto	u621
  1261  0049' 2800'              	goto	u620
  1262  004A'                    u621:
  1263  004A' 2800'              	goto	l1411
  1264  004B'                    u620:
  1265  004B'                    l1407:
  1266                           
  1267                           ;main.c: 147:             {;main.c: 148:                 flag += 1;
  1268  004B' 3001               	movlw	1
  1269  004C' 0784'              	addwf	read_data@flag,f
  1270  004D' 1803               	skipnc
  1271  004E' 0A85'              	incf	read_data@flag+1,f
  1272  004F' 3000               	movlw	0
  1273  0050' 0785'              	addwf	read_data@flag+1,f
  1274  0051'                    l1409:
  1275                           
  1276                           ;main.c: 149:                 LCD_data('X');
  1277  0051' 3058               	movlw	88
  1278  0052' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  1279                           
  1280                           ;main.c: 150:                 break;
  1281  0057' 2800'              	goto	l1415
  1282  0058'                    l1411:
  1283                           
  1284                           ;main.c: 152:         }
  1285  0058' 3001               	movlw	1
  1286  0059' 078B'              	addwf	read_data@f,f
  1287  005A' 1803               	skipnc
  1288  005B' 0A8C'              	incf	read_data@f+1,f
  1289  005C' 3000               	movlw	0
  1290  005D' 078C'              	addwf	read_data@f+1,f
  1291  005E'                    l1413:
  1292  005E' 080B'              	movf	read_data@f,w
  1293  005F' 3E00'              	addlw	(low (_pv| 0))& (0+255)
  1294  0060' 0084               	movwf	4
  1295  0061' 0800               	movf	0,w
  1296  0062' 1D03               	btfss	3,2
  1297  0063' 2800'              	goto	u631
  1298  0064' 2800'              	goto	u630
  1299  0065'                    u631:
  1300  0065' 2800'              	goto	l1405
  1301  0066'                    u630:
  1302  0066'                    l1415:
  1303                           
  1304                           ;main.c: 154:          if(flag==0) {
  1305  0066' 0804'              	movf	read_data@flag,w
  1306  0067' 0405'              	iorwf	read_data@flag+1,w
  1307  0068' 1D03               	btfss	3,2
  1308  0069' 2800'              	goto	u641
  1309  006A' 2800'              	goto	u640
  1310  006B'                    u641:
  1311  006B' 2800'              	goto	l1431
  1312  006C'                    u640:
  1313  006C'                    l1417:
  1314                           
  1315                           ;main.c: 155:              for(i=0;i<68;i++)
  1316  006C' 0189'              	clrf	read_data@i
  1317  006D' 018A'              	clrf	read_data@i+1
  1318  006E'                    l1423:
  1319                           
  1320                           ;main.c: 156:             {;main.c: 157:                 a[i]=rx();
  1321  006E' 120A' 118A' 2000' 120A' 118A' 	fcall	_rx
  1322  0073' 0083'              	movwf	??_read_data
  1323  0074' 0809'              	movf	read_data@i,w
  1324  0075' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  1325  0076' 0084               	movwf	4
  1326  0077' 0803'              	movf	??_read_data,w
  1327  0078' 1783               	bsf	3,7	;select IRP bank3
  1328  0079' 0080               	movwf	0
  1329  007A'                    l1425:
  1330                           
  1331                           ;main.c: 158:             }
  1332  007A' 3001               	movlw	1
  1333  007B' 0789'              	addwf	read_data@i,f
  1334  007C' 1803               	skipnc
  1335  007D' 0A8A'              	incf	read_data@i+1,f
  1336  007E' 3000               	movlw	0
  1337  007F' 078A'              	addwf	read_data@i+1,f
  1338  0080'                    l1427:
  1339  0080' 080A'              	movf	read_data@i+1,w
  1340  0081' 3A80               	xorlw	128
  1341  0082' 00FF               	movwf	btemp+1
  1342  0083' 3080               	movlw	128
  1343  0084' 027F               	subwf	btemp+1,w
  1344  0085' 1D03               	skipz
  1345  0086' 2800'              	goto	u655
  1346  0087' 3044               	movlw	68
  1347  0088' 0209'              	subwf	read_data@i,w
  1348  0089'                    u655:
  1349  0089' 1C03               	skipc
  1350  008A' 2800'              	goto	u651
  1351  008B' 2800'              	goto	u650
  1352  008C'                    u651:
  1353  008C' 2800'              	goto	l1423
  1354  008D'                    u650:
  1355  008D'                    l1429:
  1356                           
  1357                           ;main.c: 159:          a[i]='\0';
  1358  008D' 0809'              	movf	read_data@i,w
  1359  008E' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  1360  008F' 0084               	movwf	4
  1361  0090' 1783               	bsf	3,7	;select IRP bank3
  1362  0091' 0180               	clrf	0
  1363                           
  1364                           ;main.c: 160:          break;
  1365  0092' 2800'              	goto	l117
  1366  0093'                    l1431:
  1367                           
  1368                           ;main.c: 163: }
  1369  0093' 3001               	movlw	1
  1370  0094' 0787'              	addwf	read_data@j,f
  1371  0095' 1803               	skipnc
  1372  0096' 0A88'              	incf	read_data@j+1,f
  1373  0097' 3000               	movlw	0
  1374  0098' 0788'              	addwf	read_data@j+1,f
  1375  0099'                    l1433:
  1376  0099' 0808'              	movf	read_data@j+1,w
  1377  009A' 3A80               	xorlw	128
  1378  009B' 00FF               	movwf	btemp+1
  1379  009C' 3080               	movlw	128
  1380  009D' 027F               	subwf	btemp+1,w
  1381  009E' 1D03               	skipz
  1382  009F' 2800'              	goto	u665
  1383  00A0' 305F               	movlw	95
  1384  00A1' 0207'              	subwf	read_data@j,w
  1385  00A2'                    u665:
  1386  00A2' 1C03               	skipc
  1387  00A3' 2800'              	goto	u661
  1388  00A4' 2800'              	goto	u660
  1389  00A5'                    u661:
  1390  00A5' 2800'              	goto	l1385
  1391  00A6'                    u660:
  1392  00A6'                    l117:
  1393  00A6' 0008               	return
  1394  00A7'                    __end_of_read_data:
  1395                           
  1396                           	psect	text3
  1397  0000'                    __ptext3:	
  1398 ;; *************** function _rx *****************
  1399 ;; Defined at:
  1400 ;;		line 109 in file "main.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;		None
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      unsigned char 
  1407 ;; Registers used:
  1408 ;;		wreg
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1414 ;;      Params:         0       0       0       0       0
  1415 ;;      Locals:         0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0
  1417 ;;      Totals:         0       0       0       0       0
  1418 ;;Total ram usage:        0 bytes
  1419 ;; Hardware stack levels used: 1
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_read_data
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function _rx
  1429  0000'                    _rx:
  1430  0000'                    l1249:	
  1431                           ;incstack = 0
  1432                           ; Regs used in _rx: [wreg]
  1433                           
  1434  0000'                    l87:	
  1435                           ;main.c: 111:  while(!RCIF);
  1436                           
  1437  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1438  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1439  0002' 1E8C               	btfss	12,5	;volatile
  1440  0003' 2800'              	goto	u511
  1441  0004' 2800'              	goto	u510
  1442  0005'                    u511:
  1443  0005' 2800'              	goto	l87
  1444  0006'                    u510:
  1445  0006'                    l89:
  1446                           
  1447                           ;main.c: 112:  RCIF=0;
  1448  0006' 128C               	bcf	12,5	;volatile
  1449  0007'                    l1251:
  1450                           
  1451                           ;main.c: 113:  return RCREG;
  1452  0007' 081A               	movf	26,w	;volatile
  1453  0008'                    l90:
  1454  0008' 0008               	return
  1455  0009'                    __end_of_rx:
  1456                           
  1457                           	psect	text4
  1458  0000'                    __ptext4:	
  1459 ;; *************** function _random_number *****************
  1460 ;; Defined at:
  1461 ;;		line 269 in file "main.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  l               2   23[BANK0 ] int 
  1464 ;;  u               2   25[BANK0 ] int 
  1465 ;;  c               2   27[BANK0 ] int 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  rn              2   35[BANK0 ] int 
  1468 ;;  count           2   33[BANK0 ] int 
  1469 ;;  upper           2   31[BANK0 ] int 
  1470 ;;  lower           2   29[BANK0 ] int 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2   23[BANK0 ] int 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1480 ;;      Params:         0       6       0       0       0
  1481 ;;      Locals:         0       8       0       0       0
  1482 ;;      Temps:          0       0       0       0       0
  1483 ;;      Totals:         0      14       0       0       0
  1484 ;;Total ram usage:       14 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; Hardware stack levels required when called: 3
  1487 ;; This function calls:
  1488 ;;		_printRandoms
  1489 ;;		_srand
  1490 ;;		_time
  1491 ;; This function is called by:
  1492 ;;		_main
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           
  1497                           ;psect for function _random_number
  1498  0000'                    _random_number:
  1499  0000'                    l1435:	
  1500                           ;incstack = 0
  1501                           ; Regs used in _random_number: [allreg]
  1502                           
  1503                           
  1504                           ;main.c: 269: int random_number(int l, int u, int c);main.c: 270: {;main.c: 271:     int
      +                           lower = l, upper = u, count = c, rn;
  1505  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1506  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1507  0002' 0818'              	movf	random_number@l+1,w
  1508  0003' 009E'              	movwf	random_number@lower+1
  1509  0004' 0817'              	movf	random_number@l,w
  1510  0005' 009D'              	movwf	random_number@lower
  1511  0006' 081A'              	movf	random_number@u+1,w
  1512  0007' 00A0'              	movwf	random_number@upper+1
  1513  0008' 0819'              	movf	random_number@u,w
  1514  0009' 009F'              	movwf	random_number@upper
  1515  000A' 081C'              	movf	random_number@c+1,w
  1516  000B' 00A2'              	movwf	random_number@count+1
  1517  000C' 081B'              	movf	random_number@c,w
  1518  000D' 00A1'              	movwf	random_number@count
  1519  000E'                    l1437:
  1520                           
  1521                           ;main.c: 275:     srand(time(0));
  1522  000E' 3000               	movlw	0
  1523  000F' 120A' 118A' 2000' 120A' 118A' 	fcall	_time
  1524  0014' 0801'              	movf	?_time+1,w
  1525  0015' 0081'              	movwf	srand@x+1
  1526  0016' 0800'              	movf	?_time,w
  1527  0017' 0080'              	movwf	srand@x
  1528  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	_srand
  1529  001D'                    l1439:
  1530                           
  1531                           ;main.c: 277:     rn = printRandoms(lower, upper, count);
  1532  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  1533  001E' 1303               	bcf	3,6	;RP1=0, select bank0
  1534  001F' 081E'              	movf	random_number@lower+1,w
  1535  0020' 008E'              	movwf	printRandoms@lower+1
  1536  0021' 081D'              	movf	random_number@lower,w
  1537  0022' 008D'              	movwf	printRandoms@lower
  1538  0023' 0820'              	movf	random_number@upper+1,w
  1539  0024' 0090'              	movwf	printRandoms@upper+1
  1540  0025' 081F'              	movf	random_number@upper,w
  1541  0026' 008F'              	movwf	printRandoms@upper
  1542  0027' 0822'              	movf	random_number@count+1,w
  1543  0028' 0092'              	movwf	printRandoms@count+1
  1544  0029' 0821'              	movf	random_number@count,w
  1545  002A' 0091'              	movwf	printRandoms@count
  1546  002B' 120A' 118A' 2000' 120A' 118A' 	fcall	_printRandoms
  1547  0030' 1283               	bcf	3,5	;RP0=0, select bank0
  1548  0031' 1303               	bcf	3,6	;RP1=0, select bank0
  1549  0032' 080E'              	movf	?_printRandoms+1,w
  1550  0033' 00A4'              	movwf	random_number@rn+1
  1551  0034' 080D'              	movf	?_printRandoms,w
  1552  0035' 00A3'              	movwf	random_number@rn
  1553  0036'                    l1441:
  1554                           
  1555                           ;main.c: 279:     return rn;
  1556  0036' 0824'              	movf	random_number@rn+1,w
  1557  0037' 0098'              	movwf	?_random_number+1
  1558  0038' 0823'              	movf	random_number@rn,w
  1559  0039' 0097'              	movwf	?_random_number
  1560  003A'                    l157:
  1561  003A' 0008               	return
  1562  003B'                    __end_of_random_number:
  1563                           
  1564                           	psect	text5
  1565  0000'                    __ptext5:	
  1566 ;; *************** function _srand *****************
  1567 ;; Defined at:
  1568 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\rand.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  x               2    0[COMMON] unsigned int 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1582 ;;      Params:         2       0       0       0       0
  1583 ;;      Locals:         0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0
  1585 ;;      Totals:         2       0       0       0       0
  1586 ;;Total ram usage:        2 bytes
  1587 ;; Hardware stack levels used: 1
  1588 ;; This function calls:
  1589 ;;		Nothing
  1590 ;; This function is called by:
  1591 ;;		_random_number
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           
  1596                           ;psect for function _srand
  1597  0000'                    _srand:
  1598  0000'                    l1373:	
  1599                           ;incstack = 0
  1600                           ; Regs used in _srand: [wreg]
  1601                           
  1602  0000' 0800'              	movf	srand@x,w
  1603  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1604  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  1605  0003' 0080'              	movwf	_randx
  1606  0004' 0801'              	movf	srand@x+1,w
  1607  0005' 0081'              	movwf	_randx+1
  1608  0006' 0182'              	clrf	_randx+2
  1609  0007' 0183'              	clrf	_randx+3
  1610  0008'                    l696:
  1611  0008' 0008               	return
  1612  0009'                    __end_of_srand:
  1613                           
  1614                           	psect	text6
  1615  0000'                    __ptext6:	
  1616 ;; *************** function _printRandoms *****************
  1617 ;; Defined at:
  1618 ;;		line 261 in file "main.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;  lower           2   13[BANK0 ] int 
  1621 ;;  upper           2   15[BANK0 ] int 
  1622 ;;  count           2   17[BANK0 ] int 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  num             2   21[BANK0 ] int 
  1625 ;;  z               2    0        int 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  2   13[BANK0 ] int 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         0       6       0       0       0
  1636 ;;      Locals:         0       2       0       0       0
  1637 ;;      Temps:          0       2       0       0       0
  1638 ;;      Totals:         0      10       0       0       0
  1639 ;;Total ram usage:       10 bytes
  1640 ;; Hardware stack levels used: 1
  1641 ;; Hardware stack levels required when called: 2
  1642 ;; This function calls:
  1643 ;;		___awmod
  1644 ;;		_rand
  1645 ;; This function is called by:
  1646 ;;		_random_number
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           
  1651                           ;psect for function _printRandoms
  1652  0000'                    _printRandoms:
  1653  0000'                    l1363:	
  1654                           ;incstack = 0
  1655                           ; Regs used in _printRandoms: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1656                           
  1657  0000' 2800'              	goto	l151
  1658  0001'                    l1365:
  1659                           
  1660                           ;main.c: 265:         int num = (rand() % (upper - lower + 1)) + lower;
  1661  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1662  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  1663  0003' 080D'              	movf	printRandoms@lower,w
  1664  0004' 020F'              	subwf	printRandoms@upper,w
  1665  0005' 0093'              	movwf	??_printRandoms
  1666  0006' 080E'              	movf	printRandoms@lower+1,w
  1667  0007' 1C03               	skipc
  1668  0008' 0A0E'              	incf	printRandoms@lower+1,w
  1669  0009' 0210'              	subwf	printRandoms@upper+1,w
  1670  000A' 0094'              	movwf	??_printRandoms+1
  1671  000B' 0813'              	movf	??_printRandoms,w
  1672  000C' 3E01               	addlw	1
  1673  000D' 0087'              	movwf	___awmod@divisor
  1674  000E' 0814'              	movf	??_printRandoms+1,w
  1675  000F' 1803               	skipnc
  1676  0010' 3E01               	addlw	1
  1677  0011' 3E00               	addlw	0
  1678  0012' 0088'              	movwf	___awmod@divisor+1
  1679  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_rand
  1680  0018' 1283               	bcf	3,5	;RP0=0, select bank0
  1681  0019' 1303               	bcf	3,6	;RP1=0, select bank0
  1682  001A' 0801'              	movf	?_rand+1,w
  1683  001B' 008A'              	movwf	___awmod@dividend+1
  1684  001C' 0800'              	movf	?_rand,w
  1685  001D' 0089'              	movwf	___awmod@dividend
  1686  001E' 120A' 118A' 2000' 120A' 118A' 	fcall	___awmod
  1687  0023' 1283               	bcf	3,5	;RP0=0, select bank0
  1688  0024' 1303               	bcf	3,6	;RP1=0, select bank0
  1689  0025' 080D'              	movf	printRandoms@lower,w
  1690  0026' 0707'              	addwf	?___awmod,w
  1691  0027' 0095'              	movwf	printRandoms@num
  1692  0028' 080E'              	movf	printRandoms@lower+1,w
  1693  0029' 1803               	skipnc
  1694  002A' 0A0E'              	incf	printRandoms@lower+1,w
  1695  002B' 0708'              	addwf	?___awmod+1,w
  1696  002C' 0096'              	movwf	printRandoms@num+1
  1697  002D'                    l1367:
  1698                           
  1699                           ;main.c: 266:         return num;
  1700  002D' 0816'              	movf	printRandoms@num+1,w
  1701  002E' 008E'              	movwf	?_printRandoms+1
  1702  002F' 0815'              	movf	printRandoms@num,w
  1703  0030' 008D'              	movwf	?_printRandoms
  1704  0031' 2800'              	goto	l153
  1705  0032'                    l151:
  1706  0032' 1283               	bcf	3,5	;RP0=0, select bank0
  1707  0033' 1303               	bcf	3,6	;RP1=0, select bank0
  1708  0034' 0812'              	movf	printRandoms@count+1,w
  1709  0035' 3A80               	xorlw	128
  1710  0036' 00FF               	movwf	btemp+1
  1711  0037' 3080               	movlw	128
  1712  0038' 027F               	subwf	btemp+1,w
  1713  0039' 1D03               	skipz
  1714  003A' 2800'              	goto	u585
  1715  003B' 3001               	movlw	1
  1716  003C' 0211'              	subwf	printRandoms@count,w
  1717  003D'                    u585:
  1718  003D' 1803               	skipnc
  1719  003E' 2800'              	goto	u581
  1720  003F' 2800'              	goto	u580
  1721  0040'                    u581:
  1722  0040' 2800'              	goto	l1365
  1723  0041'                    u580:
  1724  0041'                    l153:
  1725  0041' 0008               	return
  1726  0042'                    __end_of_printRandoms:
  1727                           
  1728                           	psect	text7
  1729  0000'                    __ptext7:	
  1730 ;; *************** function _rand *****************
  1731 ;; Defined at:
  1732 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\rand.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  2    0[BANK0 ] int 
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0, pclath, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1746 ;;      Params:         0       2       0       0       0
  1747 ;;      Locals:         0       0       0       0       0
  1748 ;;      Temps:          0       5       0       0       0
  1749 ;;      Totals:         0       7       0       0       0
  1750 ;;Total ram usage:        7 bytes
  1751 ;; Hardware stack levels used: 1
  1752 ;; Hardware stack levels required when called: 1
  1753 ;; This function calls:
  1754 ;;		___lmul
  1755 ;; This function is called by:
  1756 ;;		_printRandoms
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           
  1761                           ;psect for function _rand
  1762  0000'                    _rand:
  1763  0000'                    l1203:	
  1764                           ;incstack = 0
  1765                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1766                           
  1767  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1768  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1769  0002' 0803'              	movf	_randx+3,w
  1770  0003' 0083'              	movwf	___lmul@multiplier+3
  1771  0004' 0802'              	movf	_randx+2,w
  1772  0005' 0082'              	movwf	___lmul@multiplier+2
  1773  0006' 0801'              	movf	_randx+1,w
  1774  0007' 0081'              	movwf	___lmul@multiplier+1
  1775  0008' 0800'              	movf	_randx,w
  1776  0009' 0080'              	movwf	___lmul@multiplier
  1777  000A' 3041               	movlw	65
  1778  000B' 0087'              	movwf	___lmul@multiplicand+3
  1779  000C' 30C6               	movlw	198
  1780  000D' 0086'              	movwf	___lmul@multiplicand+2
  1781  000E' 304E               	movlw	78
  1782  000F' 0085'              	movwf	___lmul@multiplicand+1
  1783  0010' 306D               	movlw	109
  1784  0011' 0084'              	movwf	___lmul@multiplicand
  1785  0012' 120A' 118A' 2000' 120A' 118A' 	fcall	___lmul
  1786  0017' 0803'              	movf	?___lmul+3,w
  1787  0018' 1283               	bcf	3,5	;RP0=0, select bank0
  1788  0019' 1303               	bcf	3,6	;RP1=0, select bank0
  1789  001A' 0083'              	movwf	_randx+3
  1790  001B' 0802'              	movf	?___lmul+2,w
  1791  001C' 0082'              	movwf	_randx+2
  1792  001D' 0801'              	movf	?___lmul+1,w
  1793  001E' 0081'              	movwf	_randx+1
  1794  001F' 0800'              	movf	?___lmul,w
  1795  0020' 0080'              	movwf	_randx
  1796  0021'                    l1205:
  1797  0021' 3039               	movlw	57
  1798  0022' 0780'              	addwf	_randx,f
  1799  0023' 3030               	movlw	48
  1800  0024' 1803               	skipnc
  1801  0025' 3031               	movlw	49
  1802  0026' 0781'              	addwf	_randx+1,f
  1803  0027' 3000               	movlw	0
  1804  0028' 1803               	skipnc
  1805  0029' 3001               	movlw	1
  1806  002A' 0782'              	addwf	_randx+2,f
  1807  002B' 3000               	movlw	0
  1808  002C' 1803               	skipnc
  1809  002D' 3001               	movlw	1
  1810  002E' 0783'              	addwf	_randx+3,f
  1811  002F'                    l1207:
  1812  002F' 0800'              	movf	_randx,w
  1813  0030' 0082'              	movwf	??_rand
  1814  0031' 0801'              	movf	_randx+1,w
  1815  0032' 0083'              	movwf	??_rand+1
  1816  0033' 0802'              	movf	_randx+2,w
  1817  0034' 0084'              	movwf	??_rand+2
  1818  0035' 0803'              	movf	_randx+3,w
  1819  0036' 0085'              	movwf	??_rand+3
  1820  0037' 3010               	movlw	16
  1821  0038' 0086'              	movwf	??_rand+4
  1822  0039'                    u415:
  1823  0039' 0D05'              	rlf	??_rand+3,w
  1824  003A' 0C85'              	rrf	??_rand+3,f
  1825  003B' 0C84'              	rrf	??_rand+2,f
  1826  003C' 0C83'              	rrf	??_rand+1,f
  1827  003D' 0C82'              	rrf	??_rand,f
  1828  003E'                    u410:
  1829  003E' 0B86'              	decfsz	??_rand+4,f
  1830  003F' 2800'              	goto	u415
  1831  0040' 30FF               	movlw	255
  1832  0041' 0502'              	andwf	??_rand,w
  1833  0042' 0080'              	movwf	?_rand
  1834  0043' 307F               	movlw	127
  1835  0044' 0503'              	andwf	??_rand+1,w
  1836  0045' 0081'              	movwf	?_rand+1
  1837  0046'                    l699:
  1838  0046' 0008               	return
  1839  0047'                    __end_of_rand:
  1840                           
  1841                           	psect	text8
  1842  0000'                    __ptext8:	
  1843 ;; *************** function ___lmul *****************
  1844 ;; Defined at:
  1845 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;  multiplier      4    0[COMMON] unsigned long 
  1848 ;;  multiplicand    4    4[COMMON] unsigned long 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  product         4    9[COMMON] unsigned long 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  4    0[COMMON] unsigned long 
  1853 ;; Registers used:
  1854 ;;		wreg, status,2, status,0
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1860 ;;      Params:         8       0       0       0       0
  1861 ;;      Locals:         4       0       0       0       0
  1862 ;;      Temps:          1       0       0       0       0
  1863 ;;      Totals:        13       0       0       0       0
  1864 ;;Total ram usage:       13 bytes
  1865 ;; Hardware stack levels used: 1
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_rand
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function ___lmul
  1875  0000'                    ___lmul:
  1876  0000'                    l1183:	
  1877                           ;incstack = 0
  1878                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1879                           
  1880  0000' 3000               	movlw	0
  1881  0001' 008C'              	movwf	___lmul@product+3
  1882  0002' 3000               	movlw	0
  1883  0003' 008B'              	movwf	___lmul@product+2
  1884  0004' 3000               	movlw	0
  1885  0005' 008A'              	movwf	___lmul@product+1
  1886  0006' 3000               	movlw	0
  1887  0007' 0089'              	movwf	___lmul@product
  1888  0008'                    l1185:
  1889  0008' 1C00'              	btfss	___lmul@multiplier,0
  1890  0009' 2800'              	goto	u361
  1891  000A' 2800'              	goto	u360
  1892  000B'                    u361:
  1893  000B' 2800'              	goto	l1189
  1894  000C'                    u360:
  1895  000C'                    l1187:
  1896  000C' 0804'              	movf	___lmul@multiplicand,w
  1897  000D' 0789'              	addwf	___lmul@product,f
  1898  000E' 0805'              	movf	___lmul@multiplicand+1,w
  1899  000F' 1103               	clrz
  1900  0010' 1803               	skipnc
  1901  0011' 3E01               	addlw	1
  1902  0012' 1903               	skipnz
  1903  0013' 2800'              	goto	u371
  1904  0014' 078A'              	addwf	___lmul@product+1,f
  1905  0015'                    u371:
  1906  0015' 0806'              	movf	___lmul@multiplicand+2,w
  1907  0016' 1103               	clrz
  1908  0017' 1803               	skipnc
  1909  0018' 3E01               	addlw	1
  1910  0019' 1903               	skipnz
  1911  001A' 2800'              	goto	u372
  1912  001B' 078B'              	addwf	___lmul@product+2,f
  1913  001C'                    u372:
  1914  001C' 0807'              	movf	___lmul@multiplicand+3,w
  1915  001D' 1103               	clrz
  1916  001E' 1803               	skipnc
  1917  001F' 3E01               	addlw	1
  1918  0020' 1903               	skipnz
  1919  0021' 2800'              	goto	u373
  1920  0022' 078C'              	addwf	___lmul@product+3,f
  1921  0023'                    u373:
  1922  0023'                    l1189:
  1923  0023' 3001               	movlw	1
  1924  0024' 0088'              	movwf	??___lmul
  1925  0025'                    u385:
  1926  0025' 1003               	clrc
  1927  0026' 0D84'              	rlf	___lmul@multiplicand,f
  1928  0027' 0D85'              	rlf	___lmul@multiplicand+1,f
  1929  0028' 0D86'              	rlf	___lmul@multiplicand+2,f
  1930  0029' 0D87'              	rlf	___lmul@multiplicand+3,f
  1931  002A' 0B88'              	decfsz	??___lmul,f
  1932  002B' 2800'              	goto	u385
  1933  002C'                    l1191:
  1934  002C' 3001               	movlw	1
  1935  002D'                    u395:
  1936  002D' 1003               	clrc
  1937  002E' 0C83'              	rrf	___lmul@multiplier+3,f
  1938  002F' 0C82'              	rrf	___lmul@multiplier+2,f
  1939  0030' 0C81'              	rrf	___lmul@multiplier+1,f
  1940  0031' 0C80'              	rrf	___lmul@multiplier,f
  1941  0032' 3EFF               	addlw	-1
  1942  0033' 1D03               	skipz
  1943  0034' 2800'              	goto	u395
  1944  0035' 0803'              	movf	___lmul@multiplier+3,w
  1945  0036' 0402'              	iorwf	___lmul@multiplier+2,w
  1946  0037' 0401'              	iorwf	___lmul@multiplier+1,w
  1947  0038' 0400'              	iorwf	___lmul@multiplier,w
  1948  0039' 1D03               	skipz
  1949  003A' 2800'              	goto	u401
  1950  003B' 2800'              	goto	u400
  1951  003C'                    u401:
  1952  003C' 2800'              	goto	l1185
  1953  003D'                    u400:
  1954  003D'                    l1193:
  1955  003D' 080C'              	movf	___lmul@product+3,w
  1956  003E' 0083'              	movwf	?___lmul+3
  1957  003F' 080B'              	movf	___lmul@product+2,w
  1958  0040' 0082'              	movwf	?___lmul+2
  1959  0041' 080A'              	movf	___lmul@product+1,w
  1960  0042' 0081'              	movwf	?___lmul+1
  1961  0043' 0809'              	movf	___lmul@product,w
  1962  0044' 0080'              	movwf	?___lmul
  1963  0045'                    l257:
  1964  0045' 0008               	return
  1965  0046'                    __end_of___lmul:
  1966                           
  1967                           	psect	text9
  1968  0000'                    __ptext9:	
  1969 ;; *************** function ___awmod *****************
  1970 ;; Defined at:
  1971 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  divisor         2    7[BANK0 ] int 
  1974 ;;  dividend        2    9[BANK0 ] int 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  sign            1   12[BANK0 ] unsigned char 
  1977 ;;  counter         1   11[BANK0 ] unsigned char 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  2    7[BANK0 ] int 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1987 ;;      Params:         0       4       0       0       0
  1988 ;;      Locals:         0       2       0       0       0
  1989 ;;      Temps:          1       0       0       0       0
  1990 ;;      Totals:         1       6       0       0       0
  1991 ;;Total ram usage:        7 bytes
  1992 ;; Hardware stack levels used: 1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_printRandoms
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function ___awmod
  2002  0000'                    ___awmod:
  2003  0000'                    l1211:	
  2004                           ;incstack = 0
  2005                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2006                           
  2007  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2008  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2009  0002' 018C'              	clrf	___awmod@sign
  2010  0003'                    l1213:
  2011  0003' 1F8A'              	btfss	___awmod@dividend+1,7
  2012  0004' 2800'              	goto	u421
  2013  0005' 2800'              	goto	u420
  2014  0006'                    u421:
  2015  0006' 2800'              	goto	l1219
  2016  0007'                    u420:
  2017  0007'                    l1215:
  2018  0007' 0989'              	comf	___awmod@dividend,f
  2019  0008' 098A'              	comf	___awmod@dividend+1,f
  2020  0009' 0A89'              	incf	___awmod@dividend,f
  2021  000A' 1903               	skipnz
  2022  000B' 0A8A'              	incf	___awmod@dividend+1,f
  2023  000C'                    l1217:
  2024  000C' 018C'              	clrf	___awmod@sign
  2025  000D' 0A8C'              	incf	___awmod@sign,f
  2026  000E'                    l1219:
  2027  000E' 1F88'              	btfss	___awmod@divisor+1,7
  2028  000F' 2800'              	goto	u431
  2029  0010' 2800'              	goto	u430
  2030  0011'                    u431:
  2031  0011' 2800'              	goto	l1223
  2032  0012'                    u430:
  2033  0012'                    l1221:
  2034  0012' 0987'              	comf	___awmod@divisor,f
  2035  0013' 0988'              	comf	___awmod@divisor+1,f
  2036  0014' 0A87'              	incf	___awmod@divisor,f
  2037  0015' 1903               	skipnz
  2038  0016' 0A88'              	incf	___awmod@divisor+1,f
  2039  0017'                    l1223:
  2040  0017' 0807'              	movf	___awmod@divisor,w
  2041  0018' 0408'              	iorwf	___awmod@divisor+1,w
  2042  0019' 1903               	btfsc	3,2
  2043  001A' 2800'              	goto	u441
  2044  001B' 2800'              	goto	u440
  2045  001C'                    u441:
  2046  001C' 2800'              	goto	l1241
  2047  001D'                    u440:
  2048  001D'                    l1225:
  2049  001D' 018B'              	clrf	___awmod@counter
  2050  001E' 0A8B'              	incf	___awmod@counter,f
  2051  001F' 2800'              	goto	l1231
  2052  0020'                    l1227:
  2053  0020' 3001               	movlw	1
  2054  0021'                    u455:
  2055  0021' 1003               	clrc
  2056  0022' 0D87'              	rlf	___awmod@divisor,f
  2057  0023' 0D88'              	rlf	___awmod@divisor+1,f
  2058  0024' 3EFF               	addlw	-1
  2059  0025' 1D03               	skipz
  2060  0026' 2800'              	goto	u455
  2061  0027'                    l1229:
  2062  0027' 3001               	movlw	1
  2063  0028' 008D'              	movwf	??___awmod
  2064  0029' 080D'              	movf	??___awmod,w
  2065  002A' 078B'              	addwf	___awmod@counter,f
  2066  002B'                    l1231:
  2067  002B' 1F88'              	btfss	___awmod@divisor+1,7
  2068  002C' 2800'              	goto	u461
  2069  002D' 2800'              	goto	u460
  2070  002E'                    u461:
  2071  002E' 2800'              	goto	l1227
  2072  002F'                    u460:
  2073  002F'                    l1233:
  2074  002F' 0808'              	movf	___awmod@divisor+1,w
  2075  0030' 020A'              	subwf	___awmod@dividend+1,w
  2076  0031' 1D03               	skipz
  2077  0032' 2800'              	goto	u475
  2078  0033' 0807'              	movf	___awmod@divisor,w
  2079  0034' 0209'              	subwf	___awmod@dividend,w
  2080  0035'                    u475:
  2081  0035' 1C03               	skipc
  2082  0036' 2800'              	goto	u471
  2083  0037' 2800'              	goto	u470
  2084  0038'                    u471:
  2085  0038' 2800'              	goto	l1237
  2086  0039'                    u470:
  2087  0039'                    l1235:
  2088  0039' 0807'              	movf	___awmod@divisor,w
  2089  003A' 0289'              	subwf	___awmod@dividend,f
  2090  003B' 0808'              	movf	___awmod@divisor+1,w
  2091  003C' 1C03               	skipc
  2092  003D' 038A'              	decf	___awmod@dividend+1,f
  2093  003E' 028A'              	subwf	___awmod@dividend+1,f
  2094  003F'                    l1237:
  2095  003F' 3001               	movlw	1
  2096  0040'                    u485:
  2097  0040' 1003               	clrc
  2098  0041' 0C88'              	rrf	___awmod@divisor+1,f
  2099  0042' 0C87'              	rrf	___awmod@divisor,f
  2100  0043' 3EFF               	addlw	-1
  2101  0044' 1D03               	skipz
  2102  0045' 2800'              	goto	u485
  2103  0046'                    l1239:
  2104  0046' 3001               	movlw	1
  2105  0047' 028B'              	subwf	___awmod@counter,f
  2106  0048' 1D03               	btfss	3,2
  2107  0049' 2800'              	goto	u491
  2108  004A' 2800'              	goto	u490
  2109  004B'                    u491:
  2110  004B' 2800'              	goto	l1233
  2111  004C'                    u490:
  2112  004C'                    l1241:
  2113  004C' 080C'              	movf	___awmod@sign,w
  2114  004D' 1903               	btfsc	3,2
  2115  004E' 2800'              	goto	u501
  2116  004F' 2800'              	goto	u500
  2117  0050'                    u501:
  2118  0050' 2800'              	goto	l1245
  2119  0051'                    u500:
  2120  0051'                    l1243:
  2121  0051' 0989'              	comf	___awmod@dividend,f
  2122  0052' 098A'              	comf	___awmod@dividend+1,f
  2123  0053' 0A89'              	incf	___awmod@dividend,f
  2124  0054' 1903               	skipnz
  2125  0055' 0A8A'              	incf	___awmod@dividend+1,f
  2126  0056'                    l1245:
  2127  0056' 080A'              	movf	___awmod@dividend+1,w
  2128  0057' 0088'              	movwf	?___awmod+1
  2129  0058' 0809'              	movf	___awmod@dividend,w
  2130  0059' 0087'              	movwf	?___awmod
  2131  005A'                    l409:
  2132  005A' 0008               	return
  2133  005B'                    __end_of___awmod:
  2134                           
  2135                           	psect	text10
  2136  0000'                    __ptext10:	
  2137 ;; *************** function _low_battery *****************
  2138 ;; Defined at:
  2139 ;;		line 239 in file "main.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;		None
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2153 ;;      Params:         0       0       0       0       0
  2154 ;;      Locals:         0       0       0       0       0
  2155 ;;      Temps:          3       0       0       0       0
  2156 ;;      Totals:         3       0       0       0       0
  2157 ;;Total ram usage:        3 bytes
  2158 ;; Hardware stack levels used: 1
  2159 ;; Hardware stack levels required when called: 2
  2160 ;; This function calls:
  2161 ;;		_LCD_command
  2162 ;;		_show
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _low_battery
  2170  0000'                    _low_battery:
  2171  0000'                    l1459:	
  2172                           ;incstack = 0
  2173                           ; Regs used in _low_battery: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2174                           
  2175                           
  2176                           ;main.c: 241:     LCD_command(0x80);
  2177  0000' 3080               	movlw	128
  2178  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2179  0006'                    l1461:
  2180                           
  2181                           ;main.c: 242:     show("-!!!BATTERY LOW!!!-");
  2182  0006' 3055               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2183  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2184  000C'                    l1463:
  2185                           
  2186                           ;main.c: 243:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2187  000C' 3003               	movlw	3
  2188  000D' 0087'              	movwf	??_low_battery+2
  2189  000E' 308A               	movlw	138
  2190  000F' 0086'              	movwf	??_low_battery+1
  2191  0010' 3055               	movlw	85
  2192  0011' 0085'              	movwf	??_low_battery
  2193  0012'                    u727:
  2194  0012' 0B85'              	decfsz	??_low_battery,f
  2195  0013' 2800'              	goto	u727
  2196  0014' 0B86'              	decfsz	??_low_battery+1,f
  2197  0015' 2800'              	goto	u727
  2198  0016' 0B87'              	decfsz	??_low_battery+2,f
  2199  0017' 2800'              	goto	u727
  2200  0018' 2800'              	nop2
  2201  0019'                    l1465:
  2202                           
  2203                           ;main.c: 244:     LCD_command(0xC0);
  2204  0019' 30C0               	movlw	192
  2205  001A' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2206  001F'                    l1467:
  2207                           
  2208                           ;main.c: 245:     show("-!!!BATTERY LOW!!!-");
  2209  001F' 3055               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2210  0020' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2211  0025'                    l1469:
  2212                           
  2213                           ;main.c: 246:     LCD_command(0xD4);
  2214  0025' 30D4               	movlw	212
  2215  0026' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2216  002B'                    l1471:
  2217                           
  2218                           ;main.c: 247:     show("RECHARGE IMMEDIATELY");
  2219  002B' 3040               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2220  002C' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2221  0031'                    l1473:
  2222                           
  2223                           ;main.c: 248:     _delay((unsigned long)((300)*(20000000/4000.0)));
  2224  0031' 3008               	movlw	8
  2225  0032' 0087'              	movwf	??_low_battery+2
  2226  0033' 309D               	movlw	157
  2227  0034' 0086'              	movwf	??_low_battery+1
  2228  0035' 3005               	movlw	5
  2229  0036' 0085'              	movwf	??_low_battery
  2230  0037'                    u737:
  2231  0037' 0B85'              	decfsz	??_low_battery,f
  2232  0038' 2800'              	goto	u737
  2233  0039' 0B86'              	decfsz	??_low_battery+1,f
  2234  003A' 2800'              	goto	u737
  2235  003B' 0B87'              	decfsz	??_low_battery+2,f
  2236  003C' 2800'              	goto	u737
  2237  003D' 2800'              	nop2
  2238  003E'                    l1475:
  2239                           
  2240                           ;main.c: 249:     LCD_command(0x01);
  2241  003E' 3001               	movlw	1
  2242  003F' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2243  0044'                    l1477:
  2244                           
  2245                           ;main.c: 250:     LCD_command(0xC0);
  2246  0044' 30C0               	movlw	192
  2247  0045' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2248  004A'                    l1479:
  2249                           
  2250                           ;main.c: 251:     show("SWITCHING OFF");
  2251  004A' 309C               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2252  004B' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2253  0050'                    l1481:
  2254                           
  2255                           ;main.c: 252:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2256  0050' 3003               	movlw	3
  2257  0051' 0087'              	movwf	??_low_battery+2
  2258  0052' 308A               	movlw	138
  2259  0053' 0086'              	movwf	??_low_battery+1
  2260  0054' 3055               	movlw	85
  2261  0055' 0085'              	movwf	??_low_battery
  2262  0056'                    u747:
  2263  0056' 0B85'              	decfsz	??_low_battery,f
  2264  0057' 2800'              	goto	u747
  2265  0058' 0B86'              	decfsz	??_low_battery+1,f
  2266  0059' 2800'              	goto	u747
  2267  005A' 0B87'              	decfsz	??_low_battery+2,f
  2268  005B' 2800'              	goto	u747
  2269  005C' 2800'              	nop2
  2270  005D'                    l1483:
  2271                           
  2272                           ;main.c: 253:     show(".");
  2273  005D' 30C0               	movlw	(low (((STR_1+9)-__stringbase)| (0+32768)))& (0+255)
  2274  005E' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2275  0063'                    l1485:
  2276                           
  2277                           ;main.c: 254:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2278  0063' 3003               	movlw	3
  2279  0064' 0087'              	movwf	??_low_battery+2
  2280  0065' 308A               	movlw	138
  2281  0066' 0086'              	movwf	??_low_battery+1
  2282  0067' 3055               	movlw	85
  2283  0068' 0085'              	movwf	??_low_battery
  2284  0069'                    u757:
  2285  0069' 0B85'              	decfsz	??_low_battery,f
  2286  006A' 2800'              	goto	u757
  2287  006B' 0B86'              	decfsz	??_low_battery+1,f
  2288  006C' 2800'              	goto	u757
  2289  006D' 0B87'              	decfsz	??_low_battery+2,f
  2290  006E' 2800'              	goto	u757
  2291  006F' 2800'              	nop2
  2292  0070'                    l1487:
  2293                           
  2294                           ;main.c: 255:     show(".");
  2295  0070' 30C0               	movlw	(low (((STR_1+9)-__stringbase)| (0+32768)))& (0+255)
  2296  0071' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2297  0076'                    l1489:
  2298                           
  2299                           ;main.c: 256:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2300  0076' 3003               	movlw	3
  2301  0077' 0087'              	movwf	??_low_battery+2
  2302  0078' 308A               	movlw	138
  2303  0079' 0086'              	movwf	??_low_battery+1
  2304  007A' 3055               	movlw	85
  2305  007B' 0085'              	movwf	??_low_battery
  2306  007C'                    u767:
  2307  007C' 0B85'              	decfsz	??_low_battery,f
  2308  007D' 2800'              	goto	u767
  2309  007E' 0B86'              	decfsz	??_low_battery+1,f
  2310  007F' 2800'              	goto	u767
  2311  0080' 0B87'              	decfsz	??_low_battery+2,f
  2312  0081' 2800'              	goto	u767
  2313  0082' 2800'              	nop2
  2314  0083'                    l1491:
  2315                           
  2316                           ;main.c: 257:     show(".");
  2317  0083' 30C0               	movlw	(low (((STR_1+9)-__stringbase)| (0+32768)))& (0+255)
  2318  0084' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2319  0089'                    l1493:
  2320                           
  2321                           ;main.c: 258:     _delay((unsigned long)((100)*(20000000/4000.0)));
  2322  0089' 3003               	movlw	3
  2323  008A' 0087'              	movwf	??_low_battery+2
  2324  008B' 308A               	movlw	138
  2325  008C' 0086'              	movwf	??_low_battery+1
  2326  008D' 3055               	movlw	85
  2327  008E' 0085'              	movwf	??_low_battery
  2328  008F'                    u777:
  2329  008F' 0B85'              	decfsz	??_low_battery,f
  2330  0090' 2800'              	goto	u777
  2331  0091' 0B86'              	decfsz	??_low_battery+1,f
  2332  0092' 2800'              	goto	u777
  2333  0093' 0B87'              	decfsz	??_low_battery+2,f
  2334  0094' 2800'              	goto	u777
  2335  0095' 2800'              	nop2
  2336  0096'                    l1495:
  2337                           
  2338                           ;main.c: 259:     LCD_command(0x01);
  2339  0096' 3001               	movlw	1
  2340  0097' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2341  009C'                    l148:
  2342  009C' 0008               	return
  2343  009D'                    __end_of_low_battery:
  2344                           
  2345                           	psect	text11
  2346  0000'                    __ptext11:	
  2347 ;; *************** function _corner_cases *****************
  2348 ;; Defined at:
  2349 ;;		line 215 in file "main.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  number          2    8[COMMON] int 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  1    wreg      void 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2363 ;;      Params:         2       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0
  2366 ;;      Totals:         2       0       0       0       0
  2367 ;;Total ram usage:        2 bytes
  2368 ;; Hardware stack levels used: 1
  2369 ;; Hardware stack levels required when called: 4
  2370 ;; This function calls:
  2371 ;;		_cloudy
  2372 ;;		_print_data
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _corner_cases
  2380  0000'                    _corner_cases:
  2381  0000'                    l1445:	
  2382                           ;incstack = 0
  2383                           ; Regs used in _corner_cases: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2384                           
  2385                           
  2386                           ;main.c: 215: void corner_cases(int number);main.c: 216: {;main.c: 217:     switch(numbe
      +                          r)
  2387  0000' 2800'              	goto	l1453
  2388  0001'                    l1447:
  2389                           
  2390                           ;main.c: 220:             cloudy();
  2391  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_cloudy
  2392                           
  2393                           ;main.c: 221:             break;
  2394  0006' 2800'              	goto	l142
  2395  0007'                    l1449:
  2396                           
  2397                           ;main.c: 223:             print_data();
  2398  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_print_data
  2399                           
  2400                           ;main.c: 224:             break;
  2401  000C' 2800'              	goto	l142
  2402  000D'                    l1453:
  2403                           
  2404                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2405                           ; Switch size 1, requested type "simple"
  2406                           ; Number of cases is 1, Range of values is 0 to 0
  2407                           ; switch strategies available:
  2408                           ; Name         Instructions Cycles
  2409                           ; simple_byte            4     3 (average)
  2410                           ; direct_byte           11     8 (fixed)
  2411                           ; jumptable            260     6 (fixed)
  2412                           ;	Chosen strategy is simple_byte
  2413  000D' 0809'              	movf	corner_cases@number+1,w
  2414  000E' 3A00               	xorlw	0	; case 0
  2415  000F' 1903               	skipnz
  2416  0010' 2800'              	goto	l1561
  2417  0011' 2800'              	goto	l142
  2418  0012'                    l1561:
  2419                           
  2420                           ; Switch size 1, requested type "simple"
  2421                           ; Number of cases is 2, Range of values is 0 to 1
  2422                           ; switch strategies available:
  2423                           ; Name         Instructions Cycles
  2424                           ; simple_byte            7     4 (average)
  2425                           ; direct_byte           14     8 (fixed)
  2426                           ; jumptable            260     6 (fixed)
  2427                           ;	Chosen strategy is simple_byte
  2428  0012' 0808'              	movf	corner_cases@number,w
  2429  0013' 3A00               	xorlw	0	; case 0
  2430  0014' 1903               	skipnz
  2431  0015' 2800'              	goto	l1447
  2432  0016' 3A01               	xorlw	1	; case 1
  2433  0017' 1903               	skipnz
  2434  0018' 2800'              	goto	l1449
  2435  0019' 2800'              	goto	l142
  2436  001A'                    l142:
  2437  001A' 0008               	return
  2438  001B'                    __end_of_corner_cases:
  2439                           
  2440                           	psect	text12
  2441  0000'                    __ptext12:	
  2442 ;; *************** function _print_data *****************
  2443 ;; Defined at:
  2444 ;;		line 165 in file "main.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;		None
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  h               2    5[COMMON] int 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  1    wreg      void 
  2451 ;; Registers used:
  2452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2458 ;;      Params:         0       0       0       0       0
  2459 ;;      Locals:         2       0       0       0       0
  2460 ;;      Temps:          0       0       0       0       0
  2461 ;;      Totals:         2       0       0       0       0
  2462 ;;Total ram usage:        2 bytes
  2463 ;; Hardware stack levels used: 1
  2464 ;; Hardware stack levels required when called: 3
  2465 ;; This function calls:
  2466 ;;		_LCD_command
  2467 ;;		_LCD_data
  2468 ;;		_refresh_text
  2469 ;;		_show
  2470 ;; This function is called by:
  2471 ;;		_corner_cases
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           
  2476                           ;psect for function _print_data
  2477  0000'                    _print_data:
  2478  0000'                    l1255:	
  2479                           ;incstack = 0
  2480                           ; Regs used in _print_data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2481                           
  2482                           
  2483                           ;main.c: 167:     int h;;main.c: 169:     LCD_command(0x01);
  2484  0000' 3001               	movlw	1
  2485  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2486                           
  2487                           ;main.c: 170:     LCD_command(0x80);
  2488  0006' 3080               	movlw	128
  2489  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2490  000C'                    l1257:
  2491                           
  2492                           ;main.c: 171:     show("LON:");
  2493  000C' 30C2               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2494  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2495  0012'                    l1259:
  2496                           
  2497                           ;main.c: 173:         LCD_command(0x84);
  2498  0012' 3084               	movlw	132
  2499  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2500  0018'                    l1261:
  2501                           
  2502                           ;main.c: 174:         for(h=16;h<18;h++) {
  2503  0018' 3010               	movlw	16
  2504  0019' 0085'              	movwf	print_data@h
  2505  001A' 3000               	movlw	0
  2506  001B' 0086'              	movwf	print_data@h+1
  2507  001C'                    l1267:
  2508                           
  2509                           ;main.c: 175:           LCD_data(a[h]);
  2510  001C' 0805'              	movf	print_data@h,w
  2511  001D' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  2512  001E' 0084               	movwf	4
  2513  001F' 1783               	bsf	3,7	;select IRP bank3
  2514  0020' 0800               	movf	0,w
  2515  0021' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2516  0026'                    l1269:
  2517                           
  2518                           ;main.c: 176:         }
  2519  0026' 3001               	movlw	1
  2520  0027' 0785'              	addwf	print_data@h,f
  2521  0028' 1803               	skipnc
  2522  0029' 0A86'              	incf	print_data@h+1,f
  2523  002A' 3000               	movlw	0
  2524  002B' 0786'              	addwf	print_data@h+1,f
  2525  002C'                    l1271:
  2526  002C' 0806'              	movf	print_data@h+1,w
  2527  002D' 3A80               	xorlw	128
  2528  002E' 00FF               	movwf	btemp+1
  2529  002F' 3080               	movlw	128
  2530  0030' 027F               	subwf	btemp+1,w
  2531  0031' 1D03               	skipz
  2532  0032' 2800'              	goto	u525
  2533  0033' 3012               	movlw	18
  2534  0034' 0205'              	subwf	print_data@h,w
  2535  0035'                    u525:
  2536  0035' 1C03               	skipc
  2537  0036' 2800'              	goto	u521
  2538  0037' 2800'              	goto	u520
  2539  0038'                    u521:
  2540  0038' 2800'              	goto	l1267
  2541  0039'                    u520:
  2542  0039'                    l1273:
  2543                           
  2544                           ;main.c: 177:         LCD_data('.');
  2545  0039' 302E               	movlw	46
  2546  003A' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2547  003F'                    l1275:
  2548                           
  2549                           ;main.c: 178:         for(h=18;h<20;h++) {
  2550  003F' 3012               	movlw	18
  2551  0040' 0085'              	movwf	print_data@h
  2552  0041' 3000               	movlw	0
  2553  0042' 0086'              	movwf	print_data@h+1
  2554  0043'                    l1281:
  2555                           
  2556                           ;main.c: 179:           LCD_data(a[h]);
  2557  0043' 0805'              	movf	print_data@h,w
  2558  0044' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  2559  0045' 0084               	movwf	4
  2560  0046' 1783               	bsf	3,7	;select IRP bank3
  2561  0047' 0800               	movf	0,w
  2562  0048' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2563  004D'                    l1283:
  2564                           
  2565                           ;main.c: 180:         }
  2566  004D' 3001               	movlw	1
  2567  004E' 0785'              	addwf	print_data@h,f
  2568  004F' 1803               	skipnc
  2569  0050' 0A86'              	incf	print_data@h+1,f
  2570  0051' 3000               	movlw	0
  2571  0052' 0786'              	addwf	print_data@h+1,f
  2572  0053'                    l1285:
  2573  0053' 0806'              	movf	print_data@h+1,w
  2574  0054' 3A80               	xorlw	128
  2575  0055' 00FF               	movwf	btemp+1
  2576  0056' 3080               	movlw	128
  2577  0057' 027F               	subwf	btemp+1,w
  2578  0058' 1D03               	skipz
  2579  0059' 2800'              	goto	u535
  2580  005A' 3014               	movlw	20
  2581  005B' 0205'              	subwf	print_data@h,w
  2582  005C'                    u535:
  2583  005C' 1C03               	skipc
  2584  005D' 2800'              	goto	u531
  2585  005E' 2800'              	goto	u530
  2586  005F'                    u531:
  2587  005F' 2800'              	goto	l1281
  2588  0060'                    u530:
  2589  0060'                    l1287:
  2590                           
  2591                           ;main.c: 181:         for(h=21;h<25;h++) {
  2592  0060' 3015               	movlw	21
  2593  0061' 0085'              	movwf	print_data@h
  2594  0062' 3000               	movlw	0
  2595  0063' 0086'              	movwf	print_data@h+1
  2596  0064'                    l1293:
  2597                           
  2598                           ;main.c: 182:           LCD_data(a[h]);
  2599  0064' 0805'              	movf	print_data@h,w
  2600  0065' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  2601  0066' 0084               	movwf	4
  2602  0067' 1783               	bsf	3,7	;select IRP bank3
  2603  0068' 0800               	movf	0,w
  2604  0069' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2605  006E'                    l1295:
  2606                           
  2607                           ;main.c: 183:         }
  2608  006E' 3001               	movlw	1
  2609  006F' 0785'              	addwf	print_data@h,f
  2610  0070' 1803               	skipnc
  2611  0071' 0A86'              	incf	print_data@h+1,f
  2612  0072' 3000               	movlw	0
  2613  0073' 0786'              	addwf	print_data@h+1,f
  2614  0074'                    l1297:
  2615  0074' 0806'              	movf	print_data@h+1,w
  2616  0075' 3A80               	xorlw	128
  2617  0076' 00FF               	movwf	btemp+1
  2618  0077' 3080               	movlw	128
  2619  0078' 027F               	subwf	btemp+1,w
  2620  0079' 1D03               	skipz
  2621  007A' 2800'              	goto	u545
  2622  007B' 3019               	movlw	25
  2623  007C' 0205'              	subwf	print_data@h,w
  2624  007D'                    u545:
  2625  007D' 1C03               	skipc
  2626  007E' 2800'              	goto	u541
  2627  007F' 2800'              	goto	u540
  2628  0080'                    u541:
  2629  0080' 2800'              	goto	l1293
  2630  0081'                    u540:
  2631  0081'                    l1299:
  2632                           
  2633                           ;main.c: 184:         LCD_data(223);
  2634  0081' 30DF               	movlw	223
  2635  0082' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2636                           
  2637                           ;main.c: 185:         LCD_data(' ');
  2638  0087' 3020               	movlw	32
  2639  0088' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2640                           
  2641                           ;main.c: 186:         LCD_data('N');
  2642  008D' 304E               	movlw	78
  2643  008E' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2644                           
  2645                           ;main.c: 188:     LCD_command(0xc0);
  2646  0093' 30C0               	movlw	192
  2647  0094' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2648  0099'                    l1301:
  2649                           
  2650                           ;main.c: 189:         show("LAT:");
  2651  0099' 30C7               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2652  009A' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2653  009F'                    l1303:
  2654                           
  2655                           ;main.c: 191:         LCD_command(0xc4);
  2656  009F' 30C4               	movlw	196
  2657  00A0' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2658  00A5'                    l1305:
  2659                           
  2660                           ;main.c: 192:         for(h=29;h<31;h++) {
  2661  00A5' 301D               	movlw	29
  2662  00A6' 0085'              	movwf	print_data@h
  2663  00A7' 3000               	movlw	0
  2664  00A8' 0086'              	movwf	print_data@h+1
  2665  00A9'                    l1311:
  2666                           
  2667                           ;main.c: 193:           LCD_data(a[h]);
  2668  00A9' 0805'              	movf	print_data@h,w
  2669  00AA' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  2670  00AB' 0084               	movwf	4
  2671  00AC' 1783               	bsf	3,7	;select IRP bank3
  2672  00AD' 0800               	movf	0,w
  2673  00AE' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2674  00B3'                    l1313:
  2675                           
  2676                           ;main.c: 194:         }
  2677  00B3' 3001               	movlw	1
  2678  00B4' 0785'              	addwf	print_data@h,f
  2679  00B5' 1803               	skipnc
  2680  00B6' 0A86'              	incf	print_data@h+1,f
  2681  00B7' 3000               	movlw	0
  2682  00B8' 0786'              	addwf	print_data@h+1,f
  2683  00B9'                    l1315:
  2684  00B9' 0806'              	movf	print_data@h+1,w
  2685  00BA' 3A80               	xorlw	128
  2686  00BB' 00FF               	movwf	btemp+1
  2687  00BC' 3080               	movlw	128
  2688  00BD' 027F               	subwf	btemp+1,w
  2689  00BE' 1D03               	skipz
  2690  00BF' 2800'              	goto	u555
  2691  00C0' 301F               	movlw	31
  2692  00C1' 0205'              	subwf	print_data@h,w
  2693  00C2'                    u555:
  2694  00C2' 1C03               	skipc
  2695  00C3' 2800'              	goto	u551
  2696  00C4' 2800'              	goto	u550
  2697  00C5'                    u551:
  2698  00C5' 2800'              	goto	l1311
  2699  00C6'                    u550:
  2700  00C6'                    l1317:
  2701                           
  2702                           ;main.c: 195:         LCD_data('.');
  2703  00C6' 302E               	movlw	46
  2704  00C7' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2705  00CC'                    l1319:
  2706                           
  2707                           ;main.c: 196:         for(h=31;h<33;h++) {
  2708  00CC' 301F               	movlw	31
  2709  00CD' 0085'              	movwf	print_data@h
  2710  00CE' 3000               	movlw	0
  2711  00CF' 0086'              	movwf	print_data@h+1
  2712  00D0'                    l1325:
  2713                           
  2714                           ;main.c: 197:           LCD_data(a[h]);
  2715  00D0' 0805'              	movf	print_data@h,w
  2716  00D1' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  2717  00D2' 0084               	movwf	4
  2718  00D3' 1783               	bsf	3,7	;select IRP bank3
  2719  00D4' 0800               	movf	0,w
  2720  00D5' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2721  00DA'                    l1327:
  2722                           
  2723                           ;main.c: 198:         }
  2724  00DA' 3001               	movlw	1
  2725  00DB' 0785'              	addwf	print_data@h,f
  2726  00DC' 1803               	skipnc
  2727  00DD' 0A86'              	incf	print_data@h+1,f
  2728  00DE' 3000               	movlw	0
  2729  00DF' 0786'              	addwf	print_data@h+1,f
  2730  00E0'                    l1329:
  2731  00E0' 0806'              	movf	print_data@h+1,w
  2732  00E1' 3A80               	xorlw	128
  2733  00E2' 00FF               	movwf	btemp+1
  2734  00E3' 3080               	movlw	128
  2735  00E4' 027F               	subwf	btemp+1,w
  2736  00E5' 1D03               	skipz
  2737  00E6' 2800'              	goto	u565
  2738  00E7' 3021               	movlw	33
  2739  00E8' 0205'              	subwf	print_data@h,w
  2740  00E9'                    u565:
  2741  00E9' 1C03               	skipc
  2742  00EA' 2800'              	goto	u561
  2743  00EB' 2800'              	goto	u560
  2744  00EC'                    u561:
  2745  00EC' 2800'              	goto	l1325
  2746  00ED'                    u560:
  2747  00ED'                    l1331:
  2748                           
  2749                           ;main.c: 199:         for(h=34;h<38;h++) {
  2750  00ED' 3022               	movlw	34
  2751  00EE' 0085'              	movwf	print_data@h
  2752  00EF' 3000               	movlw	0
  2753  00F0' 0086'              	movwf	print_data@h+1
  2754  00F1'                    l1337:
  2755                           
  2756                           ;main.c: 200:           LCD_data(a[h]);
  2757  00F1' 0805'              	movf	print_data@h,w
  2758  00F2' 3E00'              	addlw	(low (_a| (0+256)))& (0+255)
  2759  00F3' 0084               	movwf	4
  2760  00F4' 1783               	bsf	3,7	;select IRP bank3
  2761  00F5' 0800               	movf	0,w
  2762  00F6' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2763  00FB'                    l1339:
  2764                           
  2765                           ;main.c: 201:         }
  2766  00FB' 3001               	movlw	1
  2767  00FC' 0785'              	addwf	print_data@h,f
  2768  00FD' 1803               	skipnc
  2769  00FE' 0A86'              	incf	print_data@h+1,f
  2770  00FF' 3000               	movlw	0
  2771  0100' 0786'              	addwf	print_data@h+1,f
  2772  0101'                    l1341:
  2773  0101' 0806'              	movf	print_data@h+1,w
  2774  0102' 3A80               	xorlw	128
  2775  0103' 00FF               	movwf	btemp+1
  2776  0104' 3080               	movlw	128
  2777  0105' 027F               	subwf	btemp+1,w
  2778  0106' 1D03               	skipz
  2779  0107' 2800'              	goto	u575
  2780  0108' 3026               	movlw	38
  2781  0109' 0205'              	subwf	print_data@h,w
  2782  010A'                    u575:
  2783  010A' 1C03               	skipc
  2784  010B' 2800'              	goto	u571
  2785  010C' 2800'              	goto	u570
  2786  010D'                    u571:
  2787  010D' 2800'              	goto	l1337
  2788  010E'                    u570:
  2789  010E'                    l1343:
  2790                           
  2791                           ;main.c: 202:         LCD_data(223);
  2792  010E' 30DF               	movlw	223
  2793  010F' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2794                           
  2795                           ;main.c: 203:         LCD_data(' ');
  2796  0114' 3020               	movlw	32
  2797  0115' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2798                           
  2799                           ;main.c: 204:         LCD_data('E');
  2800  011A' 3045               	movlw	69
  2801  011B' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  2802  0120'                    l1345:
  2803                           
  2804                           ;main.c: 206:     refresh_text();
  2805  0120' 120A' 118A' 2000' 120A' 118A' 	fcall	_refresh_text
  2806  0125'                    l132:
  2807  0125' 0008               	return
  2808  0126'                    __end_of_print_data:
  2809                           
  2810                           	psect	text13
  2811  0000'                    __ptext13:	
  2812 ;; *************** function _refresh_text *****************
  2813 ;; Defined at:
  2814 ;;		line 208 in file "main.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;		None
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2828 ;;      Params:         0       0       0       0       0
  2829 ;;      Locals:         0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0
  2831 ;;      Totals:         0       0       0       0       0
  2832 ;;Total ram usage:        0 bytes
  2833 ;; Hardware stack levels used: 1
  2834 ;; Hardware stack levels required when called: 2
  2835 ;; This function calls:
  2836 ;;		_LCD_command
  2837 ;;		_show
  2838 ;; This function is called by:
  2839 ;;		_print_data
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           
  2844                           ;psect for function _refresh_text
  2845  0000'                    _refresh_text:
  2846  0000'                    l1197:	
  2847                           ;incstack = 0
  2848                           ; Regs used in _refresh_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2849                           
  2850                           
  2851                           ;main.c: 210:     LCD_command(0x94);
  2852  0000' 3094               	movlw	148
  2853  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2854  0006'                    l1199:
  2855                           
  2856                           ;main.c: 211:     show("PRESS PUSH BUTTON");
  2857  0006' 307C               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2858  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2859  000C'                    l1201:
  2860                           
  2861                           ;main.c: 212:     LCD_command(0xD4);
  2862  000C' 30D4               	movlw	212
  2863  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2864                           
  2865                           ;main.c: 213:     show("FOR REFRESH DEVICE");
  2866  0012' 3069               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2867  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2868  0018'                    l135:
  2869  0018' 0008               	return
  2870  0019'                    __end_of_refresh_text:
  2871                           
  2872                           	psect	text14
  2873  0000'                    __ptext14:	
  2874 ;; *************** function _cloudy *****************
  2875 ;; Defined at:
  2876 ;;		line 227 in file "main.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2890 ;;      Params:         0       0       0       0       0
  2891 ;;      Locals:         0       0       0       0       0
  2892 ;;      Temps:          3       0       0       0       0
  2893 ;;      Totals:         3       0       0       0       0
  2894 ;;Total ram usage:        3 bytes
  2895 ;; Hardware stack levels used: 1
  2896 ;; Hardware stack levels required when called: 2
  2897 ;; This function calls:
  2898 ;;		_LCD_command
  2899 ;;		_show
  2900 ;; This function is called by:
  2901 ;;		_corner_cases
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _cloudy
  2907  0000'                    _cloudy:
  2908  0000'                    l1347:	
  2909                           ;incstack = 0
  2910                           ; Regs used in _cloudy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2911                           
  2912                           
  2913                           ;main.c: 229:     LCD_command(0x80);
  2914  0000' 3080               	movlw	128
  2915  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2916  0006'                    l1349:
  2917                           
  2918                           ;main.c: 230:     show("!CLOUDY ENVIRONMENT!");
  2919  0006' 3016               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2920  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2921  000C'                    l1351:
  2922                           
  2923                           ;main.c: 231:     LCD_command(0xC0);
  2924  000C' 30C0               	movlw	192
  2925  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2926                           
  2927                           ;main.c: 232:     show("!!CAN'T FETCH DATA!!");
  2928  0012' 3001               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2929  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2930  0018'                    l1353:
  2931                           
  2932                           ;main.c: 233:     _delay((unsigned long)((250)*(20000000/4000.0)));
  2933  0018' 3007               	movlw	7
  2934  0019' 0087'              	movwf	??_cloudy+2
  2935  001A' 3058               	movlw	88
  2936  001B' 0086'              	movwf	??_cloudy+1
  2937  001C' 3059               	movlw	89
  2938  001D' 0085'              	movwf	??_cloudy
  2939  001E'                    u787:
  2940  001E' 0B85'              	decfsz	??_cloudy,f
  2941  001F' 2800'              	goto	u787
  2942  0020' 0B86'              	decfsz	??_cloudy+1,f
  2943  0021' 2800'              	goto	u787
  2944  0022' 0B87'              	decfsz	??_cloudy+2,f
  2945  0023' 2800'              	goto	u787
  2946  0024' 2800'              	nop2
  2947  0025'                    l1355:
  2948                           
  2949                           ;main.c: 234:     LCD_command(0x94);
  2950  0025' 3094               	movlw	148
  2951  0026' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2952  002B'                    l1357:
  2953                           
  2954                           ;main.c: 235:     show(" ");
  2955  002B' 30CC               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2956  002C' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2957  0031'                    l1359:
  2958                           
  2959                           ;main.c: 236:     LCD_command(0xD4);
  2960  0031' 30D4               	movlw	212
  2961  0032' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  2962  0037'                    l1361:
  2963                           
  2964                           ;main.c: 237:     show("---TRY  RESETTING---");
  2965  0037' 302B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2966  0038' 120A' 118A' 2000' 120A' 118A' 	fcall	_show
  2967  003D'                    l145:
  2968  003D' 0008               	return
  2969  003E'                    __end_of_cloudy:
  2970                           
  2971                           	psect	text15
  2972  0000'                    __ptext15:	
  2973 ;; *************** function _show *****************
  2974 ;; Defined at:
  2975 ;;		line 120 in file "main.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  s               1    wreg     PTR unsigned char 
  2978 ;;		 -> STR_18(2), STR_17(2), STR_16(2), STR_15(14), 
  2979 ;;		 -> STR_14(21), STR_13(20), STR_12(20), STR_11(21), 
  2980 ;;		 -> STR_10(2), STR_9(21), STR_8(21), STR_7(19), 
  2981 ;;		 -> STR_6(18), STR_5(5), STR_4(5), STR_3(13), 
  2982 ;;		 -> STR_2(14), STR_1(11), 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  s               1    4[COMMON] PTR unsigned char 
  2985 ;;		 -> STR_18(2), STR_17(2), STR_16(2), STR_15(14), 
  2986 ;;		 -> STR_14(21), STR_13(20), STR_12(20), STR_11(21), 
  2987 ;;		 -> STR_10(2), STR_9(21), STR_8(21), STR_7(19), 
  2988 ;;		 -> STR_6(18), STR_5(5), STR_4(5), STR_3(13), 
  2989 ;;		 -> STR_2(14), STR_1(11), 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      void 
  2992 ;; Registers used:
  2993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2999 ;;      Params:         0       0       0       0       0
  3000 ;;      Locals:         1       0       0       0       0
  3001 ;;      Temps:          1       0       0       0       0
  3002 ;;      Totals:         2       0       0       0       0
  3003 ;;Total ram usage:        2 bytes
  3004 ;; Hardware stack levels used: 1
  3005 ;; Hardware stack levels required when called: 1
  3006 ;; This function calls:
  3007 ;;		_LCD_data
  3008 ;; This function is called by:
  3009 ;;		_main
  3010 ;;		_print_data
  3011 ;;		_refresh_text
  3012 ;;		_cloudy
  3013 ;;		_low_battery
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           
  3018                           ;psect for function _show
  3019  0000'                    _show:
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _show: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3023                           ;show@s stored from wreg
  3024  0000' 0084'              	movwf	show@s
  3025  0001'                    l1167:
  3026                           
  3027                           ;main.c: 120: void show(unsigned char *s);main.c: 121: {;main.c: 122:   while(*s)
  3028  0001' 2800'              	goto	l1173
  3029  0002'                    l1169:
  3030                           
  3031                           ;main.c: 123:   {;main.c: 124:     LCD_data(*s++);
  3032  0002' 0804'              	movf	show@s,w
  3033  0003' 0084               	movwf	4
  3034  0004' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  3035  0009' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_data
  3036  000E'                    l1171:
  3037  000E' 3001               	movlw	1
  3038  000F' 0083'              	movwf	??_show
  3039  0010' 0803'              	movf	??_show,w
  3040  0011' 0784'              	addwf	show@s,f
  3041  0012'                    l1173:
  3042                           
  3043                           ;main.c: 122:   while(*s)
  3044  0012' 0804'              	movf	show@s,w
  3045  0013' 0084               	movwf	4
  3046  0014' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  3047  0019' 3A00               	xorlw	0
  3048  001A' 1D03               	skipz
  3049  001B' 2800'              	goto	u351
  3050  001C' 2800'              	goto	u350
  3051  001D'                    u351:
  3052  001D' 2800'              	goto	l1169
  3053  001E'                    u350:
  3054  001E'                    l99:
  3055  001E' 0008               	return
  3056  001F'                    __end_of_show:
  3057                           
  3058                           	psect	text16
  3059  0000'                    __ptext16:	
  3060 ;; *************** function _LCD_data *****************
  3061 ;; Defined at:
  3062 ;;		line 93 in file "main.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;  data            1    wreg     unsigned char 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  data            1    2[COMMON] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      void 
  3069 ;; Registers used:
  3070 ;;		wreg
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3076 ;;      Params:         0       0       0       0       0
  3077 ;;      Locals:         1       0       0       0       0
  3078 ;;      Temps:          2       0       0       0       0
  3079 ;;      Totals:         3       0       0       0       0
  3080 ;;Total ram usage:        3 bytes
  3081 ;; Hardware stack levels used: 1
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_show
  3086 ;;		_read_data
  3087 ;;		_print_data
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           
  3092                           ;psect for function _LCD_data
  3093  0000'                    _LCD_data:
  3094                           
  3095                           ;incstack = 0
  3096                           ; Regs used in _LCD_data: [wreg]
  3097                           ;LCD_data@data stored from wreg
  3098  0000' 0082'              	movwf	LCD_data@data
  3099  0001'                    l1159:
  3100                           
  3101                           ;main.c: 93: void LCD_data(unsigned char data);main.c: 94: {;main.c: 95:     PORTD = dat
      +                          a;
  3102  0001' 0802'              	movf	LCD_data@data,w
  3103  0002' 1283               	bcf	3,5	;RP0=0, select bank0
  3104  0003' 1303               	bcf	3,6	;RP1=0, select bank0
  3105  0004' 0088               	movwf	8	;volatile
  3106  0005'                    l1161:
  3107                           
  3108                           ;main.c: 96:     RC4 = 1;
  3109  0005' 1607               	bsf	7,4	;volatile
  3110  0006'                    l1163:
  3111                           
  3112                           ;main.c: 97:     RC5 = 1;
  3113  0006' 1687               	bsf	7,5	;volatile
  3114                           
  3115                           ;main.c: 98:     _delay((unsigned long)((10)*(20000000/4000.0)));
  3116  0007' 3041               	movlw	65
  3117  0008' 0081'              	movwf	??_LCD_data+1
  3118  0009' 30EE               	movlw	238
  3119  000A' 0080'              	movwf	??_LCD_data
  3120  000B'                    u797:
  3121  000B' 0B80'              	decfsz	??_LCD_data,f
  3122  000C' 2800'              	goto	u797
  3123  000D' 0B81'              	decfsz	??_LCD_data+1,f
  3124  000E' 2800'              	goto	u797
  3125  000F' 0000               	nop
  3126  0010'                    l1165:
  3127                           
  3128                           ;main.c: 99:     RC5 = 0;
  3129  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  3130  0011' 1303               	bcf	3,6	;RP1=0, select bank0
  3131  0012' 1287               	bcf	7,5	;volatile
  3132  0013'                    l81:
  3133  0013' 0008               	return
  3134  0014'                    __end_of_LCD_data:
  3135                           
  3136                           	psect	text17
  3137  0000'                    __ptext17:	
  3138 ;; *************** function _LCD_init *****************
  3139 ;; Defined at:
  3140 ;;		line 101 in file "main.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;		None
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, status,2, status,0, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3154 ;;      Params:         0       0       0       0       0
  3155 ;;      Locals:         0       0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0
  3157 ;;      Totals:         0       0       0       0       0
  3158 ;;Total ram usage:        0 bytes
  3159 ;; Hardware stack levels used: 1
  3160 ;; Hardware stack levels required when called: 1
  3161 ;; This function calls:
  3162 ;;		_LCD_command
  3163 ;; This function is called by:
  3164 ;;		_main
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _LCD_init
  3170  0000'                    _LCD_init:
  3171  0000'                    l1377:	
  3172                           ;incstack = 0
  3173                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  3174                           
  3175                           
  3176                           ;main.c: 103:     LCD_command(0x38);
  3177  0000' 3038               	movlw	56
  3178  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  3179                           
  3180                           ;main.c: 104:     LCD_command(0x0E);
  3181  0006' 300E               	movlw	14
  3182  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  3183                           
  3184                           ;main.c: 105:     LCD_command(0x01);
  3185  000C' 3001               	movlw	1
  3186  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  3187                           
  3188                           ;main.c: 106:     LCD_command(0x06);
  3189  0012' 3006               	movlw	6
  3190  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  3191                           
  3192                           ;main.c: 107:     LCD_command(0x80);
  3193  0018' 3080               	movlw	128
  3194  0019' 120A' 118A' 2000' 120A' 118A' 	fcall	_LCD_command
  3195  001E'                    l84:
  3196  001E' 0008               	return
  3197  001F'                    __end_of_LCD_init:
  3198                           
  3199                           	psect	text18
  3200  0000'                    __ptext18:	
  3201 ;; *************** function _LCD_command *****************
  3202 ;; Defined at:
  3203 ;;		line 85 in file "main.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  cmd             1    wreg     unsigned char 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  cmd             1    2[COMMON] unsigned char 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3217 ;;      Params:         0       0       0       0       0
  3218 ;;      Locals:         1       0       0       0       0
  3219 ;;      Temps:          2       0       0       0       0
  3220 ;;      Totals:         3       0       0       0       0
  3221 ;;Total ram usage:        3 bytes
  3222 ;; Hardware stack levels used: 1
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_main
  3227 ;;		_LCD_init
  3228 ;;		_print_data
  3229 ;;		_refresh_text
  3230 ;;		_cloudy
  3231 ;;		_low_battery
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           
  3236                           ;psect for function _LCD_command
  3237  0000'                    _LCD_command:
  3238                           
  3239                           ;incstack = 0
  3240                           ; Regs used in _LCD_command: [wreg]
  3241                           ;LCD_command@cmd stored from wreg
  3242  0000' 0082'              	movwf	LCD_command@cmd
  3243  0001'                    l1175:
  3244                           
  3245                           ;main.c: 85: void LCD_command(unsigned char cmd);main.c: 86: {;main.c: 87:     PORTD = c
      +                          md;
  3246  0001' 0802'              	movf	LCD_command@cmd,w
  3247  0002' 1283               	bcf	3,5	;RP0=0, select bank0
  3248  0003' 1303               	bcf	3,6	;RP1=0, select bank0
  3249  0004' 0088               	movwf	8	;volatile
  3250  0005'                    l1177:
  3251                           
  3252                           ;main.c: 88:     RC4 = 0;
  3253  0005' 1207               	bcf	7,4	;volatile
  3254  0006'                    l1179:
  3255                           
  3256                           ;main.c: 89:     RC5 = 1;
  3257  0006' 1687               	bsf	7,5	;volatile
  3258                           
  3259                           ;main.c: 90:     _delay((unsigned long)((10)*(20000000/4000.0)));
  3260  0007' 3041               	movlw	65
  3261  0008' 0081'              	movwf	??_LCD_command+1
  3262  0009' 30EE               	movlw	238
  3263  000A' 0080'              	movwf	??_LCD_command
  3264  000B'                    u807:
  3265  000B' 0B80'              	decfsz	??_LCD_command,f
  3266  000C' 2800'              	goto	u807
  3267  000D' 0B81'              	decfsz	??_LCD_command+1,f
  3268  000E' 2800'              	goto	u807
  3269  000F' 0000               	nop
  3270  0010'                    l1181:
  3271                           
  3272                           ;main.c: 91:     RC5 = 0;
  3273  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  3274  0011' 1303               	bcf	3,6	;RP1=0, select bank0
  3275  0012' 1287               	bcf	7,5	;volatile
  3276  0013'                    l78:
  3277  0013' 0008               	return
  3278  0014'                    __end_of_LCD_command:
  3279  007E                     btemp	set	126	;btemp
  3280  007E                     wtemp0	set	126
  3281                           
  3282                           	psect	idloc
  3283                           
  3284                           ;Config register IDLOC0 @ 0x2000
  3285                           ;	unspecified, using default values
  3286  2000                     	org	8192
  3287  2000  3FFF               	dw	16383
  3288                           
  3289                           ;Config register IDLOC1 @ 0x2001
  3290                           ;	unspecified, using default values
  3291  2001                     	org	8193
  3292  2001  3FFF               	dw	16383
  3293                           
  3294                           ;Config register IDLOC2 @ 0x2002
  3295                           ;	unspecified, using default values
  3296  2002                     	org	8194
  3297  2002  3FFF               	dw	16383
  3298                           
  3299                           ;Config register IDLOC3 @ 0x2003
  3300                           ;	unspecified, using default values
  3301  2003                     	org	8195
  3302  2003  3FFF               	dw	16383
  3303                           
  3304                           	psect	config
  3305                           
  3306                           ;Config register CONFIG @ 0x2007
  3307                           ;	Oscillator Selection bits
  3308                           ;	FOSC = HS, HS oscillator
  3309                           ;	Watchdog Timer Enable bit
  3310                           ;	WDTE = OFF, WDT disabled
  3311                           ;	Power-up Timer Enable bit
  3312                           ;	PWRTE = OFF, PWRT disabled
  3313                           ;	Brown-out Reset Enable bit
  3314                           ;	BOREN = ON, BOR enabled
  3315                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3316                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  3317                           ;	Data EEPROM Memory Code Protection bit
  3318                           ;	CPD = OFF, Data EEPROM code protection off
  3319                           ;	Flash Program Memory Write Enable bits
  3320                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3321                           ;	In-Circuit Debugger Mode bit
  3322                           ;	DEBUG = 0x1, unprogrammed default
  3323                           ;	Flash Program Memory Code Protection bit
  3324                           ;	CP = OFF, Code protection off
  3325  2007                     	org	8199
  3326  2007  3FFA               	dw	16378

Data Sizes:
    Strings     205
    Constant    0
    Data        7
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      54
    BANK1            80      0       0
    BANK3            96      0      95
    BANK2            96      0       0

Pointer List with Targets:

    time$0	PTR long  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    show@s	PTR unsigned char  size(1) Largest target is 21
		 -> STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[14]), 
		 -> STR_14(CODE[21]), STR_13(CODE[20]), STR_12(CODE[20]), STR_11(CODE[21]), 
		 -> STR_10(CODE[2]), STR_9(CODE[21]), STR_8(CODE[21]), STR_7(CODE[19]), 
		 -> STR_6(CODE[18]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[13]), 
		 -> STR_2(CODE[14]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _read_data->_LCD_data
    _printRandoms->___awmod
    _rand->___lmul
    _low_battery->_show
    _corner_cases->_cloudy
    _print_data->_show
    _refresh_text->_show
    _cloudy->_show
    _show->_LCD_data
    _LCD_init->_LCD_command

Critical Paths under _main in BANK0

    _main->_random_number
    _random_number->_printRandoms
    _printRandoms->___awmod
    ___awmod->_rand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    5876
                                             37 BANK0      3     3      0
                        _LCD_command
                           _LCD_init
                       _corner_cases
                        _low_battery
                      _random_number
                          _read_data
                            _ser_int
                               _show
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_data                                           10    10      0     363
                                              3 COMMON    10    10      0
                           _LCD_data
                                 _rx
 ---------------------------------------------------------------------------------
 (2) _rx                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _random_number                                       14     8      6    1548
                                             23 BANK0     14     8      6
                       _printRandoms
                              _srand
                               _time
 ---------------------------------------------------------------------------------
 (2) _time                                                 5     0      5       9
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 COMMON     2     0      2
                               _time (ARG)
 ---------------------------------------------------------------------------------
 (2) _printRandoms                                        12     6      6    1055
                                             13 BANK0     10     4      6
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     244
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _low_battery                                          3     3      0     683
                                              5 COMMON     3     3      0
                        _LCD_command
                               _show
 ---------------------------------------------------------------------------------
 (1) _corner_cases                                         2     0      2    2577
                                              8 COMMON     2     0      2
                             _cloudy
                         _print_data
 ---------------------------------------------------------------------------------
 (2) _print_data                                           2     2      0    1796
                                              5 COMMON     2     2      0
                        _LCD_command
                           _LCD_data
                       _refresh_text
                               _show
 ---------------------------------------------------------------------------------
 (3) _refresh_text                                         0     0      0     683
                        _LCD_command
                               _show
 ---------------------------------------------------------------------------------
 (2) _cloudy                                               3     3      0     683
                                              5 COMMON     3     3      0
                        _LCD_command
                               _show
 ---------------------------------------------------------------------------------
 (1) _show                                                 2     2      0     661
                                              3 COMMON     2     2      0
                           _LCD_data
 ---------------------------------------------------------------------------------
 (2) _LCD_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0      22
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_command
   _LCD_init
     _LCD_command
   _corner_cases
     _cloudy
       _LCD_command
       _show
         _LCD_data
     _print_data
       _LCD_command
       _LCD_data
       _refresh_text
         _LCD_command
         _show
       _show
   _low_battery
     _LCD_command
     _show
   _random_number
     _printRandoms
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
     _srand
       _time (ARG)
     _time
   _read_data
     _LCD_data
     _rx
   _ser_int
   _show

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      36       5       67.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A3      12        0.0%
ABS                  0      0      A3       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat May 21 14:38:55 2022

                      _a 0000                        _r 0000                        pc 0002  
                     l81 0013                       l90 0008                       l84 001E  
                     l93 0008                       l78 0013                       l87 0000  
                     l89 0006                       l99 001E        printRandoms@count 0011  
                     _pv 0004                       _rx 0000        printRandoms@lower 000D  
                     fsr 0004        printRandoms@upper 000F                      l107 0014  
                    l132 0125                      l117 00A6                      l142 001A  
                    l135 0018                      l151 0032                      l145 003D  
                    l153 0041                      l148 009C                      l157 003A  
                    l409 005A                      l257 0045                      ?_rx 0000  
                    l696 0008                      l699 0046                      _RC3 003B  
                    _RC4 003C                      _RC5 003D                      u400 003D  
                    u401 003C                      u410 003E                      u500 0051  
                    u420 0007                      u501 0050                      u421 0006  
                    u350 001E                      u430 0012                      u510 0006  
                    u351 001D                      u431 0011                      u415 0039  
                    u511 0005                      u520 0039                      u440 001D  
                    u360 000C                      u600 001A                      u521 0038  
                    u441 001C                      u361 000B                      u601 0019  
                    u530 0060                      u610 0035                      u531 005F  
                    u371 0015                      u611 0034                      u540 0081  
                    u460 002F                      u372 001C                      u620 004B  
                    u541 0080                      u525 0035                      u461 002E  
                    u373 0023                      u621 004A                      u550 00C6  
                    u470 0039                      u630 0066                      u551 00C5  
                    u535 005C                      u471 0038                      u455 0021  
                    u631 0065                      u615 0031                      u560 00ED  
                    u640 006C                      u561 00EC                      u545 007D  
                    u385 0025                      u641 006B                      u570 010E  
                    u490 004C                      u650 008D                      u571 010D  
                    u555 00C2                      u491 004B                      u475 0035  
                    u395 002D                      u651 008C                      u707 0043  
                    u580 0041                      u660 00A6                      u565 00E9  
                    u485 0040                      u581 0040                      u661 00A5  
                    u717 0092                      u590 0012                      u670 0071  
                    u807 000B                      u575 010A                      u727 0012  
                    u655 0089                      u591 0011                      u671 0070  
                    u680 00AC                      u737 0037                      u585 003D  
  __end_of_random_number 003B                      u665 00A2                      u681 00AB  
                    u747 0056                      u757 0069                      u685 00A8  
                    u767 007C                      u777 008F                      u697 0023  
                    u787 001E                      u797 000B                      fsr0 0004  
                    indf 0000             ___awmod@sign 000C          random_number@rn 0023  
                   ??_rx 0000                     l1201 000C                     l1211 0000  
                   l1203 0000                     l1301 0099                     l1221 0012  
                   l1213 0003                     l1205 0021                     l1311 00A9  
                   l1303 009F                     l1231 002B                     l1223 0017  
                   l1215 0007                     l1207 002F                     l1161 0005  
                   l1313 00B3                     l1305 00A5                     l1233 002F  
                   l1225 001D                     l1241 004C                     l1217 000C  
                   l1401 0035                     l1163 0006                     l1171 000E  
                   l1331 00ED                     l1315 00B9                     l1243 0051  
                   l1235 0039                     l1227 0020                     l1219 000E  
                   l1251 0007                     l1411 0058                     l1403 003A  
                   l1181 0010                     l1165 0010                     l1173 0012  
                   l1341 0101                     l1325 00D0                     l1317 00C6  
                   l1261 0018                     l1245 0056                     l1237 003F  
                   l1229 0027                     l1405 003D                     l1413 005E  
                   l1501 0004                     l1175 0001                     l1159 0001  
                   l1167 0001                     l1351 000C                     l1343 010E  
                   l1327 00DA                     l1319 00CC                     l1271 002C  
                   l1255 0000                     l1239 0046                     l1191 002C  
                   l1183 0000                     l1423 006E                     l1415 0066  
                   l1407 004B                     l1431 0093                     l1511 001B  
                   l1503 0006                     l1177 0005                     l1169 0002  
                   l1361 0037                     l1353 0018                     l1345 0120  
                   l1337 00F1                     l1329 00E0                     l1281 0043  
                   l1273 0039                     l1257 000C                     l1193 003D  
                   l1185 0008                     l1441 0036                     l1249 0000  
                   l1433 0099                     l1425 007A                     l1417 006C  
                   l1409 0051                     l1521 004A                     l1513 0029  
                   l1505 000B                     l1179 0006                     l1355 0025  
                   l1347 0000                     l1339 00FB                     l1283 004D  
                   l1275 003F                     l1267 001C                     l1259 0012  
                   l1187 000C                     l1363 0000                     l1435 0000  
                   l1427 0080                     l1531 0084                     l1523 0062  
                   l1515 002F                     l1507 0010                     l1357 002B  
                   l1349 0006                     l1197 0000                     l1293 0064  
                   l1285 0053                     l1269 0026                     l1453 000D  
                   l1445 0000                     l1461 0006                     l1189 0023  
                   l1365 0001                     l1373 0000                     l1437 000E  
                   l1429 008D                     l1533 008A                     l1525 006B  
                   l1517 0035                     l1509 0015                     l1359 0031  
                   l1199 0006                     l1295 006E                     l1287 0060  
                   l1447 0001                     l1471 002B                     l1463 000C  
                   l1367 002D                     l1439 001D                     l1375 0000  
                   l1535 0098                     l1527 0071                     l1519 003B  
                   l1377 0000                     l1297 0074                     l1561 0012  
                   l1449 0007                     l1481 0050                     l1473 0031  
                   l1465 0019                     l1385 0004                     l1529 0078  
                   l1537 009F                     l1299 0081                     l1491 0083  
                   l1483 005D                     l1475 003E                     l1467 001F  
                   l1459 0000                     l1395 001A                     l1387 000C  
                   l1379 0000                     l1539 00AC                     l1493 0089  
                   l1485 0063                     l1477 0044                     l1469 0025  
                   l1397 0022                     l1389 0012                     l1495 0096  
                   l1487 0070                     l1479 004A                     l1399 0028  
                   l1489 0076                     l1497 0000                     l1499 0003  
                   STR_1 00BC                     STR_2 0093                     STR_3 00AF  
                   STR_4 00C7                     STR_5 00CC                     STR_6 0081  
                   STR_7 006E                     STR_8 001B                     STR_9 0006  
           ?_LCD_command 0000                     _RCIF 0065                     _main 0000  
                   _rand 0000                     _time 0000*                    _show 0000  
                   btemp 007E                     start 0000*           ?_corner_cases 0008  
       __end_of_LCD_data 0014         __end_of_LCD_init 001F                    ?_main 0000  
                  ?_rand 0000                    STR_10 00D1                    STR_11 0030  
                  STR_12 005A                    STR_13 005A                    STR_14 0045  
                  STR_15 00A1                    STR_16 00C5                    STR_17 00C5  
                  STR_18 00C5          __end_of___awmod 005B                    ?_time 0000  
                  ?_show 0000                    _RCREG 001A                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTD 0008                    _TRISD 0088  
    ___lmul@multiplicand 0004                    _randx 0000                    _srand 0000  
        __end_of_ser_int 0009                    pclath 000A                    show@s 0004  
                  status 0003                    wtemp0 007E           ??_corner_cases 000A  
        __initialization 0000             __end_of_main 00B5             __end_of_rand 0047  
           __end_of_show 001F                   ??_main 0025                   ??_rand 0002  
                 ??_time 0000                   ??_show 0003             ?_low_battery 0000  
                 ?_srand 0000                   _TRISC3 043B                   _TRISC4 043C  
                 _TRISC5 043D                   ___lmul 0000                ??___awmod 000D  
                 _cloudy 0000                   _time$0 0000             LCD_data@data 0002  
        ___awmod@divisor 0007          ___awmod@counter 000B                ??_ser_int 0000  
                 srand@x 0000       random_number@count 0021       random_number@lower 001D  
__end_of__initialization 001E       random_number@upper 001F          printRandoms@num 0015  
   __size_of_LCD_command 0014                ?_LCD_data 0000                ?_LCD_init 0000  
         __pcstackCOMMON 0000             __pidataBANK0 0000            __end_of_srand 0009  
             __end_of_rx 0009     __end_of_corner_cases 001B                  ??_srand 0002  
             __pbssBANK0 0000               __pbssBANK3 0000               ??_LCD_data 0000  
             ??_LCD_init 0003            ?_refresh_text 0000       __size_of_read_data 00A7  
             __pmaintext 0000                  ?___lmul 0000                  ?_cloudy 0000  
         ___lmul@product 0009               __stringtab 0000     __size_of_low_battery 009D  
         ??_refresh_text 0005   __size_of_random_number 003B          __size_of___lmul 0046  
                ___awmod 0000          __size_of_cloudy 003E                  __ptext1 0000  
                __ptext2 0000                  __ptext3 0000                  __ptext4 0000  
                __ptext5 0000                  __ptext6 0000                  __ptext7 0000  
                __ptext8 0000                  __ptext9 0000        __end_of_read_data 00A7  
       ___awmod@dividend 0009                  _ser_int 0000                  clrloop0 0001  
   end_of_initialization 001E             read_data@gps 0006            ?_printRandoms 000D  
  __size_of_corner_cases 001B               _print_data 0000            _random_number 0000  
         random_number@c 001B           random_number@l 0017           random_number@u 0019  
            print_data@h 0005        __size_of_LCD_data 0014             _corner_cases 0000  
      __size_of_LCD_init 001F           ??_printRandoms 0013           __end_of___lmul 0046  
         __end_of_cloudy 003E           ?_random_number 0017     __end_of_refresh_text 0019  
    start_initialization 0000            ??_LCD_command 0000                 ??___lmul 0008  
             init_fetch0 0000                 ??_cloudy 0005              __pdataBANK0 0000  
             read_data@f 000B               read_data@i 0009               read_data@j 0007  
            ?_print_data 0000                ___latbits 0002            __pcstackBANK0 0000  
     corner_cases@number 0008      __end_of_LCD_command 0014                 ?___awmod 0007  
        ??_random_number 000E                __pstrings 0000                 ?_ser_int 0000  
          ??_low_battery 0005                _read_data 0000           __size_of_srand 0009  
   __end_of_printRandoms 0042              __size_of_rx 0009            _reset_counter 0003  
               _LCD_data 0000                 _LCD_init 0000                clear_ram0 0000  
    __size_of_print_data 0126    __size_of_refresh_text 0019              __stringbase 0005  
             ?_read_data 0000        ___lmul@multiplier 0000              _LCD_command 0000  
    __end_of_low_battery 009D             _refresh_text 0000         __size_of___awmod 005B  
     __end_of__stringtab 0006                 __ptext10 0000                 __ptext11 0000  
               __ptext12 0000                 __ptext13 0000                 __ptext14 0000  
               __ptext15 0000                 __ptext16 0000                 __ptext17 0000  
               __ptext18 0000         __size_of_ser_int 0009            __size_of_main 00B5  
          __size_of_rand 0047            __size_of_show 001F              _random_case 0005  
           ??_print_data 0005    __size_of_printRandoms 0042                 init_ram0 0004  
            _low_battery 0000            read_data@flag 0004              ??_read_data 0003  
              stringcode 0000       __end_of_print_data 0126             _printRandoms 0000  
               stringdir 0000                 stringtab 0000           LCD_command@cmd 0002  



Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Jun 09 11:40:31 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 2.40
    74                           ; Generated 17/11/2021 GMT
    75                           ; 
    76                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution. Publication is not required when
    90                           ;        this file is used in an embedded application.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F877A Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228                           
   229                           	psect	idataBANK0
   230  0005                     __pidataBANK0:
   231                           
   232                           ;initializer for _oss
   233  0005  3403               	retlw	3
   234  0006  3400               	retlw	0
   235                           
   236                           	psect	idataBANK1
   237  0003                     __pidataBANK1:
   238                           
   239                           ;initializer for _sn
   240  0003  3401               	retlw	1
   241  0004  3400               	retlw	0
   242                           
   243                           	psect	strings
   244  1000                     __pstrings:
   245  1000                     stringtab:
   246  1000                     __stringtab:
   247  1000                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  1000                     stringdir:
   251  1000  3010               	movlw	high stringdir
   252  1001  008A               	movwf	10
   253  1002  0804               	movf	4,w
   254  1003  0A84               	incf	4,f
   255  1004  0782               	addwf	2,f
   256  1005                     __stringbase:
   257  1005  3400               	retlw	0
   258  1006                     __end_of__stringtab:
   259  1006                     exp@coeff:
   260  1006  3400               	retlw	0
   261  1007  3400               	retlw	0
   262  1008  3480               	retlw	128
   263  1009  343F               	retlw	63
   264  100A  3418               	retlw	24
   265  100B  3472               	retlw	114
   266  100C  3431               	retlw	49
   267  100D  343F               	retlw	63
   268  100E  34F0               	retlw	240
   269  100F  34FD               	retlw	253
   270  1010  3475               	retlw	117
   271  1011  343E               	retlw	62
   272  1012  3447               	retlw	71
   273  1013  3458               	retlw	88
   274  1014  3463               	retlw	99
   275  1015  343D               	retlw	61
   276  1016  3458               	retlw	88
   277  1017  3495               	retlw	149
   278  1018  341D               	retlw	29
   279  1019  343C               	retlw	60
   280  101A  3482               	retlw	130
   281  101B  34C4               	retlw	196
   282  101C  34AE               	retlw	174
   283  101D  343A               	retlw	58
   284  101E  34A8               	retlw	168
   285  101F  3478               	retlw	120
   286  1020  3421               	retlw	33
   287  1021  3439               	retlw	57
   288  1022  34EF               	retlw	239
   289  1023  3493               	retlw	147
   290  1024  3480               	retlw	128
   291  1025  3437               	retlw	55
   292  1026  34A0               	retlw	160
   293  1027  3492               	retlw	146
   294  1028  34A7               	retlw	167
   295  1029  3435               	retlw	53
   296  102A  3446               	retlw	70
   297  102B  3456               	retlw	86
   298  102C  3415               	retlw	21
   299  102D  3434               	retlw	52
   300  102E                     __end_ofexp@coeff:
   301  102E                     log@coeff:
   302  102E  3400               	retlw	0
   303  102F  3400               	retlw	0
   304  1030  3400               	retlw	0
   305  1031  3400               	retlw	0
   306  1032  34C4               	retlw	196
   307  1033  34FF               	retlw	255
   308  1034  347F               	retlw	127
   309  1035  343F               	retlw	63
   310  1036  3480               	retlw	128
   311  1037  34EF               	retlw	239
   312  1038  34FF               	retlw	255
   313  1039  34BE               	retlw	190
   314  103A  3490               	retlw	144
   315  103B  34E1               	retlw	225
   316  103C  34A9               	retlw	169
   317  103D  343E               	retlw	62
   318  103E  34EC               	retlw	236
   319  103F  3482               	retlw	130
   320  1040  3476               	retlw	118
   321  1041  34BE               	retlw	190
   322  1042  3482               	retlw	130
   323  1043  34AD               	retlw	173
   324  1044  342B               	retlw	43
   325  1045  343E               	retlw	62
   326  1046  340E               	retlw	14
   327  1047  343C               	retlw	60
   328  1048  34C3               	retlw	195
   329  1049  34BD               	retlw	189
   330  104A  3487               	retlw	135
   331  104B  34D1               	retlw	209
   332  104C  3413               	retlw	19
   333  104D  343D               	retlw	61
   334  104E  3441               	retlw	65
   335  104F  3478               	retlw	120
   336  1050  34D3               	retlw	211
   337  1051  34BB               	retlw	187
   338  1052                     __end_oflog@coeff:
   339  001E                     _ADRESH	set	30
   340  001F                     _ADCON0	set	31
   341  0013                     _SSPBUF	set	19
   342  0014                     _SSPCON	set	20
   343  0008                     _PORTDbits	set	8
   344  001A                     _RCREG	set	26
   345  0019                     _TXREG	set	25
   346  0018                     _RCSTA	set	24
   347  0006                     _PORTB	set	6
   348  00FA                     _GO_nDONE	set	250
   349  0063                     _SSPIF	set	99
   350  0065                     _RCIF	set	101
   351  0064                     _TXIF	set	100
   352  0039                     _RC1	set	57
   353  0038                     _RC0	set	56
   354  009E                     _ADRESL	set	158
   355  009F                     _ADCON1	set	159
   356  0093                     _SSPADD	set	147
   357  0088                     _TRISDbits	set	136
   358  0099                     _SPBRG	set	153
   359  0098                     _TXSTA	set	152
   360  0087                     _TRISCbits	set	135
   361  0086                     _TRISBbits	set	134
   362  048C                     _ACKEN	set	1164
   363  048D                     _ACKDT	set	1165
   364  0489                     _RSEN	set	1161
   365  048A                     _PEN	set	1162
   366  0488                     _SEN	set	1160
   367  048B                     _RCEN	set	1163
   368  048E                     _ACKSTAT	set	1166
   369  043C                     _TRISC4	set	1084
   370  043B                     _TRISC3	set	1083
   371  1052                     STR_2:
   372  1052  3448               	retlw	72	;'H'
   373  1053  3475               	retlw	117	;'u'
   374  1054  346D               	retlw	109	;'m'
   375  1055  3469               	retlw	105	;'i'
   376  1056  343A               	retlw	58	;':'
   377  1057  3400               	retlw	0
   378  1058                     STR_1:
   379  1058  3454               	retlw	84	;'T'
   380  1059  3465               	retlw	101	;'e'
   381  105A  346D               	retlw	109	;'m'
   382  105B  3470               	retlw	112	;'p'
   383  105C  343A               	retlw	58	;':'
   384  105D  3400               	retlw	0
   385  105E                     STR_3:
   386  105E  3468               	retlw	104	;'h'
   387  105F  3450               	retlw	80	;'P'
   388  1060  3461               	retlw	97	;'a'
   389  1061  343A               	retlw	58	;':'
   390  1062  3400               	retlw	0
   391  1063                     STR_4:
   392  1063  3441               	retlw	65	;'A'
   393  1064  346C               	retlw	108	;'l'
   394  1065  3474               	retlw	116	;'t'
   395  1066  343A               	retlw	58	;':'
   396  1067  3400               	retlw	0
   397                           
   398                           	psect	cinit
   399  07C6                     start_initialization:	
   400                           ; #config settings
   401                           
   402  07C6                     __initialization:
   403                           
   404                           ; Initialize objects allocated to BANK1
   405  07C6  1683               	bsf	3,5	;RP0=1, select bank1
   406  07C7  1303               	bcf	3,6	;RP1=0, select bank1
   407  07C8  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   408  07CD  00ED               	movwf	__pdataBANK1& (0+127)
   409  07CE  120A  118A  2004  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   410  07D3  00EE               	movwf	(__pdataBANK1+1)& (0+127)
   411                           
   412                           ; Initialize objects allocated to BANK0
   413  07D4  1283               	bcf	3,5	;RP0=0, select bank0
   414  07D5  1303               	bcf	3,6	;RP1=0, select bank0
   415  07D6  120A  118A  2005  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   416  07DB  00ED               	movwf	__pdataBANK0& (0+127)
   417  07DC  120A  118A  2006  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   418  07E1  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   419                           
   420                           ; Clear objects allocated to BANK3
   421  07E2  1783               	bsf	3,7	;select IRP bank2
   422  07E3  3090               	movlw	low __pbssBANK3
   423  07E4  0084               	movwf	4
   424  07E5  309B               	movlw	low (__pbssBANK3+11)
   425  07E6  160A  118A  22A1  120A  118A  	fcall	clear_ram0
   426                           
   427                           ; Clear objects allocated to BANK1
   428  07EB  1383               	bcf	3,7	;select IRP bank0
   429  07EC  30A0               	movlw	low __pbssBANK1
   430  07ED  0084               	movwf	4
   431  07EE  30ED               	movlw	low (__pbssBANK1+77)
   432  07EF  160A  118A  22A1  120A  118A  	fcall	clear_ram0
   433                           
   434                           ; Clear objects allocated to BANK0
   435  07F4  3020               	movlw	low __pbssBANK0
   436  07F5  0084               	movwf	4
   437  07F6  3047               	movlw	low (__pbssBANK0+39)
   438  07F7  160A  118A  22A1  120A  118A  	fcall	clear_ram0
   439  07FC                     end_of_initialization:	
   440                           ;End of C runtime variable initialization code
   441                           
   442  07FC                     __end_of__initialization:
   443  07FC  0183               	clrf	3
   444  07FD  120A  118A  2807   	ljmp	_main	;jump to C main() function
   445                           
   446                           	psect	bssBANK0
   447  0020                     __pbssBANK0:
   448  0020                     _x2:
   449  0020                     	ds	4
   450  0024                     _x1:
   451  0024                     	ds	4
   452  0028                     _b6:
   453  0028                     	ds	4
   454  002C                     _altitude:
   455  002C                     	ds	2
   456  002E                     _hpa:
   457  002E                     	ds	2
   458  0030                     _Sum:
   459  0030                     	ds	2
   460  0032                     _RH:
   461  0032                     	ds	2
   462  0034                     _Temp:
   463  0034                     	ds	2
   464  0036                     _year:
   465  0036                     	ds	1
   466  0037                     _month:
   467  0037                     	ds	1
   468  0038                     _date:
   469  0038                     	ds	1
   470  0039                     _day:
   471  0039                     	ds	1
   472  003A                     _hour:
   473  003A                     	ds	1
   474  003B                     _min:
   475  003B                     	ds	1
   476  003C                     _sec:
   477  003C                     	ds	1
   478  003D                     _Ch:
   479  003D                     	ds	1
   480  003E                     _RH_byte2:
   481  003E                     	ds	1
   482  003F                     _RH_byte1:
   483  003F                     	ds	1
   484  0040                     _T_byte2:
   485  0040                     	ds	1
   486  0041                     _T_byte1:
   487  0041                     	ds	1
   488  0042                     _Check:
   489  0042                     	ds	1
   490  0043                     _p:
   491  0043                     	ds	4
   492                           
   493                           	psect	dataBANK0
   494  006D                     __pdataBANK0:
   495  006D                     _oss:
   496  006D                     	ds	2
   497                           
   498                           	psect	bssBANK1
   499  00A0                     __pbssBANK1:
   500  00A0                     _b7:
   501  00A0                     	ds	4
   502  00A4                     _b4:
   503  00A4                     	ds	4
   504  00A8                     _x3:
   505  00A8                     	ds	4
   506  00AC                     _up:
   507  00AC                     	ds	4
   508  00B0                     _b5:
   509  00B0                     	ds	4
   510  00B4                     _b3:
   511  00B4                     	ds	4
   512  00B8                     _b2:
   513  00B8                     	ds	4
   514  00BC                     _b1:
   515  00BC                     	ds	4
   516  00C0                     _b0:
   517  00C0                     	ds	4
   518  00C4                     _af:
   519  00C4                     	ds	4
   520  00C8                     _ae:
   521  00C8                     	ds	4
   522  00CC                     _ad:
   523  00CC                     	ds	4
   524  00D0                     _ac:
   525  00D0                     	ds	4
   526  00D4                     _ab:
   527  00D4                     	ds	4
   528  00D8                     _aa:
   529  00D8                     	ds	4
   530  00DC                     _avv:
   531  00DC                     	ds	3
   532  00DF                     _errno:
   533  00DF                     	ds	2
   534  00E1                     _ac4:
   535  00E1                     	ds	2
   536  00E3                     _ac3:
   537  00E3                     	ds	2
   538  00E5                     _ac2:
   539  00E5                     	ds	2
   540  00E7                     _ac1:
   541  00E7                     	ds	2
   542  00E9                     _temperature:
   543  00E9                     	ds	2
   544  00EB                     _humidity:
   545  00EB                     	ds	2
   546                           
   547                           	psect	dataBANK1
   548  00ED                     __pdataBANK1:
   549  00ED                     _sn:
   550  00ED                     	ds	2
   551                           
   552                           	psect	bssBANK3
   553  0190                     __pbssBANK3:
   554  0190                     _AV:
   555  0190                     	ds	8
   556  0198                     _message:
   557  0198                     	ds	3
   558                           
   559                           	psect	clrtext
   560  12A1                     clear_ram0:	
   561                           ;	Called with FSR containing the base address, and
   562                           ;	W with the last address+1
   563                           
   564  12A1  0064               	clrwdt	;clear the watchdog before getting into this loop
   565  12A2                     clrloop0:
   566  12A2  0180               	clrf	0	;clear RAM location pointed to by FSR
   567  12A3  0A84               	incf	4,f	;increment pointer
   568  12A4  0604               	xorwf	4,w	;XOR with final address
   569  12A5  1903               	btfsc	3,2	;have we reached the end yet?
   570  12A6  3400               	retlw	0	;all done for this memory range, return
   571  12A7  0604               	xorwf	4,w	;XOR again to restore value
   572  12A8  2AA2               	goto	clrloop0	;do the next byte
   573                           
   574                           	psect	cstackCOMMON
   575  0070                     __pcstackCOMMON:
   576  0070                     ?_intdigits_chardigits:
   577  0070                     ?_rtc_stop:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ??_rtc_stop:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_rtc_res:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ??_rtc_res:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_rtc_nak:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ??_rtc_nak:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_bmp280_waitmssp:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ??_bmp280_waitmssp:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_print_serialnumber:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_rtc_getdata:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_rtc_lcd_data:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_rtc_terminal_data:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_ADC_Init:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ??_ADC_Init:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_print_analogvoltages:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_print_dht11data:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_bmp280_getdata:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_uncompensated_pressure:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_actual_pressure:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_bmp280_displaydata:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_bmp280_terminaldata:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_LCD_Command:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ??_LCD_Command:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_LCD_Char:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ??_LCD_Char:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_LCD_init:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_show:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_ser_int:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ??_ser_int:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_tx:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ??_tx:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_StartSignal:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ??_StartSignal:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_CheckResponse:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ??_CheckResponse:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_ReadData:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ??_ReadData:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_rtc_int:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ??_rtc_int:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_waitmssp:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ??_waitmssp:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_rtc_send:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ??_rtc_send:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_rtc_read:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ??_rtc_read:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_rtc_read_byte:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_convup:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ??_convup:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_convd:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ??_convd:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_bmp280_init:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ??_bmp280_init:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_bmp280_start:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ??_bmp280_start:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_bmp280_stop:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ??_bmp280_stop:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ?_bmp280_restart:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ??_bmp280_restart:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0070                     ?_bmp280_nak:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0070                     ??_bmp280_nak:	
   755                           ; 1 bytes @ 0x0
   756                           
   757  0070                     ?_bmp280_send:	
   758                           ; 1 bytes @ 0x0
   759                           
   760  0070                     ??_bmp280_send:	
   761                           ; 1 bytes @ 0x0
   762                           
   763  0070                     ?_bmp280_read:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0070                     ??_bmp280_read:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0070                     ?_bmp280_read_byte:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0070                     ?_main:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0070                     ?___awdiv:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?___awmod:	
   779                           ; 2 bytes @ 0x0
   780                           
   781  0070                     ?___lwdiv:	
   782                           ; 2 bytes @ 0x0
   783                           
   784  0070                     ?___lwmod:	
   785                           ; 2 bytes @ 0x0
   786                           
   787  0070                     ?___lmul:	
   788                           ; 2 bytes @ 0x0
   789                           
   790  0070                     ?___lldiv:	
   791                           ; 4 bytes @ 0x0
   792                           
   793  0070                     tx@a:	
   794                           ; 4 bytes @ 0x0
   795                           
   796  0070                     rtc_send@a:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0070                     convd@bcd:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0070                     bmp280_send@dat:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0070                     intdigits_chardigits@a:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0070                     ___awdiv@divisor:	
   809                           ; 2 bytes @ 0x0
   810                           
   811  0070                     ___awmod@divisor:	
   812                           ; 2 bytes @ 0x0
   813                           
   814  0070                     ___lwdiv@divisor:	
   815                           ; 2 bytes @ 0x0
   816                           
   817  0070                     ___lwmod@divisor:	
   818                           ; 2 bytes @ 0x0
   819                           
   820  0070                     ___lmul@multiplier:	
   821                           ; 2 bytes @ 0x0
   822                           
   823  0070                     ___lldiv@divisor:	
   824                           ; 4 bytes @ 0x0
   825                           
   826                           
   827                           ; 4 bytes @ 0x0
   828  0070                     	ds	1
   829  0071                     ??_rtc_read_byte:
   830  0071                     ?_bmp280_send_byte:	
   831                           ; 1 bytes @ 0x1
   832                           
   833  0071                     ??_bmp280_read_byte:	
   834                           ; 1 bytes @ 0x1
   835                           
   836  0071                     convup@bcd:	
   837                           ; 1 bytes @ 0x1
   838                           
   839  0071                     bmp280_send_byte@count:	
   840                           ; 1 bytes @ 0x1
   841                           
   842                           
   843                           ; 1 bytes @ 0x1
   844  0071                     	ds	1
   845  0072                     ??_rtc_terminal_data:
   846  0072                     ??_bmp280_send_byte:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0072                     LCD_Command@cmnd:	
   850                           ; 1 bytes @ 0x2
   851                           
   852  0072                     LCD_Char@data:	
   853                           ; 1 bytes @ 0x2
   854                           
   855  0072                     ReadData@i:	
   856                           ; 1 bytes @ 0x2
   857                           
   858  0072                     rtc_read_byte@addr:	
   859                           ; 1 bytes @ 0x2
   860                           
   861  0072                     bmp280_send_byte@addr:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0072                     bmp280_read_byte@addr:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0072                     intdigits_chardigits@b:	
   868                           ; 1 bytes @ 0x2
   869                           
   870  0072                     ___awdiv@dividend:	
   871                           ; 2 bytes @ 0x2
   872                           
   873  0072                     ___awmod@dividend:	
   874                           ; 2 bytes @ 0x2
   875                           
   876  0072                     ___lwdiv@dividend:	
   877                           ; 2 bytes @ 0x2
   878                           
   879  0072                     ___lwmod@dividend:	
   880                           ; 2 bytes @ 0x2
   881                           
   882                           
   883                           ; 2 bytes @ 0x2
   884  0072                     	ds	1
   885  0073                     ??_rtc_lcd_data:
   886  0073                     ??_LCD_init:	
   887                           ; 1 bytes @ 0x3
   888                           
   889  0073                     ??_show:	
   890                           ; 1 bytes @ 0x3
   891                           
   892  0073                     ReadData@j:	
   893                           ; 1 bytes @ 0x3
   894                           
   895  0073                     rtc_read_byte@rec:	
   896                           ; 1 bytes @ 0x3
   897                           
   898  0073                     bmp280_read_byte@rec:	
   899                           ; 1 bytes @ 0x3
   900                           
   901                           
   902                           ; 1 bytes @ 0x3
   903  0073                     	ds	1
   904  0074                     ??_rtc_getdata:
   905  0074                     ??_bmp280_getdata:	
   906                           ; 1 bytes @ 0x4
   907                           
   908  0074                     ??___awdiv:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  0074                     ??___awmod:	
   912                           ; 1 bytes @ 0x4
   913                           
   914  0074                     ??___lwdiv:	
   915                           ; 1 bytes @ 0x4
   916                           
   917  0074                     ??___lwmod:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0074                     show@s:	
   921                           ; 1 bytes @ 0x4
   922                           
   923  0074                     intdigits_chardigits@c:	
   924                           ; 1 bytes @ 0x4
   925                           
   926  0074                     ___lmul@multiplicand:	
   927                           ; 2 bytes @ 0x4
   928                           
   929  0074                     ___lldiv@dividend:	
   930                           ; 4 bytes @ 0x4
   931                           
   932                           
   933                           ; 4 bytes @ 0x4
   934  0074                     	ds	1
   935  0075                     ___awdiv@counter:
   936  0075                     ___awmod@counter:	
   937                           ; 1 bytes @ 0x5
   938                           
   939  0075                     ___lwmod@counter:	
   940                           ; 1 bytes @ 0x5
   941                           
   942  0075                     ___lwdiv@quotient:	
   943                           ; 1 bytes @ 0x5
   944                           
   945                           
   946                           ; 2 bytes @ 0x5
   947  0075                     	ds	1
   948  0076                     ??_intdigits_chardigits:
   949  0076                     ___awdiv@sign:	
   950                           ; 1 bytes @ 0x6
   951                           
   952  0076                     ___awmod@sign:	
   953                           ; 1 bytes @ 0x6
   954                           
   955                           
   956                           ; 1 bytes @ 0x6
   957  0076                     	ds	1
   958  0077                     ___lwdiv@counter:
   959  0077                     ___awdiv@quotient:	
   960                           ; 1 bytes @ 0x7
   961                           
   962                           
   963                           ; 2 bytes @ 0x7
   964  0077                     	ds	1
   965  0078                     ??___lmul:
   966  0078                     ??___lldiv:	
   967                           ; 1 bytes @ 0x8
   968                           
   969                           
   970                           ; 1 bytes @ 0x8
   971  0078                     	ds	1
   972  0079                     ?_show_multidigits:
   973  0079                     ?_tx_sn:	
   974                           ; 1 bytes @ 0x9
   975                           
   976  0079                     show_multidigits@val:	
   977                           ; 1 bytes @ 0x9
   978                           
   979  0079                     tx_sn@val:	
   980                           ; 2 bytes @ 0x9
   981                           
   982  0079                     ___lmul@product:	
   983                           ; 2 bytes @ 0x9
   984                           
   985  0079                     ___lldiv@quotient:	
   986                           ; 4 bytes @ 0x9
   987                           
   988                           
   989                           ; 4 bytes @ 0x9
   990  0079                     	ds	2
   991  007B                     ??_print_serialnumber:
   992  007B                     ??_bmp280_displaydata:	
   993                           ; 1 bytes @ 0xB
   994                           
   995  007B                     ??_bmp280_terminaldata:	
   996                           ; 1 bytes @ 0xB
   997                           
   998  007B                     ??_show_multidigits:	
   999                           ; 1 bytes @ 0xB
  1000                           
  1001  007B                     ??_tx_sn:	
  1002                           ; 1 bytes @ 0xB
  1003                           
  1004                           
  1005                           ; 1 bytes @ 0xB
  1006  007B                     	ds	2
  1007  007D                     ??___aldiv:
  1008  007D                     ___lldiv@counter:	
  1009                           ; 1 bytes @ 0xD
  1010                           
  1011                           
  1012                           ; 1 bytes @ 0xD
  1013  007D                     	ds	1
  1014  007E                     ??_LCD_num:
  1015                           
  1016                           	psect	cstackBANK0
  1017  0047                     __pcstackBANK0:	
  1018                           ; 1 bytes @ 0xE
  1019                           
  1020  0047                     ??_uncompensated_pressure:
  1021  0047                     ?___aldiv:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0047                     show_multidigits@digit4:	
  1025                           ; 4 bytes @ 0x0
  1026                           
  1027  0047                     tx_sn@digit4:	
  1028                           ; 2 bytes @ 0x0
  1029                           
  1030  0047                     ___aldiv@divisor:	
  1031                           ; 2 bytes @ 0x0
  1032                           
  1033                           
  1034                           ; 4 bytes @ 0x0
  1035  0047                     	ds	2
  1036  0049                     show_multidigits@result:
  1037  0049                     tx_sn@result:	
  1038                           ; 2 bytes @ 0x2
  1039                           
  1040                           
  1041                           ; 2 bytes @ 0x2
  1042  0049                     	ds	2
  1043  004B                     show_multidigits@digit3:
  1044  004B                     tx_sn@digit3:	
  1045                           ; 2 bytes @ 0x4
  1046                           
  1047  004B                     ___aldiv@dividend:	
  1048                           ; 2 bytes @ 0x4
  1049                           
  1050                           
  1051                           ; 4 bytes @ 0x4
  1052  004B                     	ds	2
  1053  004D                     show_multidigits@digit1:
  1054  004D                     tx_sn@digit1:	
  1055                           ; 2 bytes @ 0x6
  1056                           
  1057                           
  1058                           ; 2 bytes @ 0x6
  1059  004D                     	ds	2
  1060  004F                     ___aldiv@counter:
  1061  004F                     show_multidigits@digit2:	
  1062                           ; 1 bytes @ 0x8
  1063                           
  1064  004F                     tx_sn@digit2:	
  1065                           ; 2 bytes @ 0x8
  1066                           
  1067                           
  1068                           ; 2 bytes @ 0x8
  1069  004F                     	ds	1
  1070  0050                     ___aldiv@sign:
  1071                           
  1072                           ; 1 bytes @ 0x9
  1073  0050                     	ds	1
  1074  0051                     show_multidigits@result1:
  1075  0051                     tx_sn@result1:	
  1076                           ; 2 bytes @ 0xA
  1077                           
  1078  0051                     ___aldiv@quotient:	
  1079                           ; 2 bytes @ 0xA
  1080                           
  1081                           
  1082                           ; 4 bytes @ 0xA
  1083  0051                     	ds	2
  1084  0053                     show_multidigits@remainder:
  1085  0053                     tx_sn@remainder:	
  1086                           ; 2 bytes @ 0xC
  1087                           
  1088                           
  1089                           ; 2 bytes @ 0xC
  1090  0053                     	ds	1
  1091  0054                     uncompensated_pressure@ff6:
  1092                           
  1093                           ; 4 bytes @ 0xD
  1094  0054                     	ds	1
  1095  0055                     ??_print_dht11data:
  1096  0055                     ??_actual_pressure:	
  1097                           ; 1 bytes @ 0xE
  1098                           
  1099  0055                     ?_LCD_num:	
  1100                           ; 1 bytes @ 0xE
  1101                           
  1102  0055                     LCD_num@val:	
  1103                           ; 1 bytes @ 0xE
  1104                           
  1105                           
  1106                           ; 4 bytes @ 0xE
  1107  0055                     	ds	3
  1108  0058                     uncompensated_pressure@ff7:
  1109                           
  1110                           ; 4 bytes @ 0x11
  1111  0058                     	ds	1
  1112  0059                     LCD_num@digit1:
  1113                           
  1114                           ; 2 bytes @ 0x12
  1115  0059                     	ds	2
  1116  005B                     LCD_num@digit2:
  1117                           
  1118                           ; 2 bytes @ 0x14
  1119  005B                     	ds	1
  1120  005C                     uncompensated_pressure@ff8:
  1121                           
  1122                           ; 4 bytes @ 0x15
  1123  005C                     	ds	1
  1124  005D                     LCD_num@digit3:
  1125                           
  1126                           ; 2 bytes @ 0x16
  1127  005D                     	ds	2
  1128  005F                     LCD_num@result:
  1129                           
  1130                           ; 2 bytes @ 0x18
  1131  005F                     	ds	2
  1132  0061                     LCD_num@result1:
  1133                           
  1134                           ; 2 bytes @ 0x1A
  1135  0061                     	ds	2
  1136  0063                     LCD_num@remainder:
  1137  0063                     _actual_pressure$1207:	
  1138                           ; 2 bytes @ 0x1C
  1139                           
  1140                           
  1141                           ; 4 bytes @ 0x1C
  1142  0063                     	ds	2
  1143  0065                     ??_print_analogvoltages:
  1144                           
  1145                           ; 1 bytes @ 0x1E
  1146  0065                     	ds	3
  1147  0068                     print_analogvoltages@i:
  1148                           
  1149                           ; 1 bytes @ 0x21
  1150  0068                     	ds	1
  1151  0069                     print_analogvoltages@j:
  1152                           
  1153                           ; 1 bytes @ 0x22
  1154  0069                     	ds	1
  1155  006A                     ??_main:
  1156                           
  1157                           ; 1 bytes @ 0x23
  1158  006A                     	ds	3
  1159                           
  1160                           	psect	maintext
  1161  0007                     __pmaintext:	
  1162 ;;
  1163 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1164 ;;
  1165 ;; *************** function _main *****************
  1166 ;; Defined at:
  1167 ;;		line 57 in file "main.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;		None
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : B00/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1181 ;;      Params:         0       0       0       0       0
  1182 ;;      Locals:         0       0       0       0       0
  1183 ;;      Temps:          0       3       0       0       0
  1184 ;;      Totals:         0       3       0       0       0
  1185 ;;Total ram usage:        3 bytes
  1186 ;; Hardware stack levels required when called: 4
  1187 ;; This function calls:
  1188 ;;		_ADC_Init
  1189 ;;		_LCD_Command
  1190 ;;		_LCD_init
  1191 ;;		_actual_pressure
  1192 ;;		_bmp280_displaydata
  1193 ;;		_bmp280_getdata
  1194 ;;		_bmp280_init
  1195 ;;		_bmp280_terminaldata
  1196 ;;		_print_analogvoltages
  1197 ;;		_print_dht11data
  1198 ;;		_print_serialnumber
  1199 ;;		_rtc_getdata
  1200 ;;		_rtc_int
  1201 ;;		_rtc_lcd_data
  1202 ;;		_rtc_terminal_data
  1203 ;;		_ser_int
  1204 ;;		_tx
  1205 ;;		_uncompensated_pressure
  1206 ;; This function is called by:
  1207 ;;		Startup code after reset
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           
  1212                           ;psect for function _main
  1213  0007                     _main:
  1214  0007                     l3278:	
  1215                           ;incstack = 0
  1216                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1217                           
  1218                           
  1219                           ;main.c: 59: LCD_init();
  1220  0007  160A  118A  2421  120A  118A  	fcall	_LCD_init
  1221                           
  1222                           ;main.c: 60: ser_int();
  1223  000C  160A  118A  2310  120A  118A  	fcall	_ser_int
  1224  0011                     l375:	
  1225                           ;main.c: 61: while (1)
  1226                           
  1227                           
  1228                           ;main.c: 62: {;main.c: 63: LCD_Command(0x01);
  1229  0011  3001               	movlw	1
  1230  0012  160A  118A  2540  120A  118A  	fcall	_LCD_Command
  1231                           
  1232                           ;main.c: 66: print_serialnumber();
  1233  0017  160A  118A  234E  120A  118A  	fcall	_print_serialnumber
  1234                           
  1235                           ;main.c: 68: rtc_int();
  1236  001C  160A  118A  2376  120A  118A  	fcall	_rtc_int
  1237                           
  1238                           ;main.c: 69: rtc_getdata();
  1239  0021  160A  118A  268C  120A  118A  	fcall	_rtc_getdata
  1240                           
  1241                           ;main.c: 70: rtc_lcd_data();
  1242  0026  120A  158A  24AC  120A  118A  	fcall	_rtc_lcd_data
  1243                           
  1244                           ;main.c: 71: rtc_terminal_data();
  1245  002B  120A  158A  258D  120A  118A  	fcall	_rtc_terminal_data
  1246                           
  1247                           ;main.c: 74: ADC_Init ();
  1248  0030  120A  158A  2009  120A  118A  	fcall	_ADC_Init
  1249  0035                     l3280:
  1250                           
  1251                           ;main.c: 75: GO_nDONE=1;
  1252  0035  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0036  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0037  151F               	bsf	31,2	;volatile
  1255  0038                     l376:	
  1256                           ;main.c: 76: while(GO_nDONE==1);
  1257                           
  1258  0038  191F               	btfsc	31,2	;volatile
  1259  0039  283B               	goto	u3871
  1260  003A  283C               	goto	u3870
  1261  003B                     u3871:
  1262  003B  2838               	goto	l376
  1263  003C                     u3870:
  1264  003C                     l3282:
  1265                           
  1266                           ;main.c: 77: _delay((unsigned long)((10)*(20000000/4000.0)));
  1267  003C  3041               	movlw	65
  1268  003D  1283               	bcf	3,5	;RP0=0, select bank0
  1269  003E  1303               	bcf	3,6	;RP1=0, select bank0
  1270  003F  00EB               	movwf	??_main+1
  1271  0040  30ED               	movlw	237
  1272  0041  00EA               	movwf	??_main
  1273  0042                     u4297:
  1274  0042  0BEA               	decfsz	??_main,f
  1275  0043  2842               	goto	u4297
  1276  0044  0BEB               	decfsz	??_main+1,f
  1277  0045  2842               	goto	u4297
  1278  0046  2847               	nop2
  1279  0047                     l3284:
  1280                           
  1281                           ;main.c: 78: LCD_Command(0xC0);
  1282  0047  30C0               	movlw	192
  1283  0048  160A  118A  2540  120A  118A  	fcall	_LCD_Command
  1284  004D                     l3286:
  1285                           
  1286                           ;main.c: 79: print_analogvoltages();
  1287  004D  120A  158A  2075  120A  118A  	fcall	_print_analogvoltages
  1288  0052                     l3288:
  1289                           
  1290                           ;main.c: 83: print_dht11data();
  1291  0052  120A  158A  23D6  120A  118A  	fcall	_print_dht11data
  1292  0057                     l3290:
  1293                           
  1294                           ;main.c: 87: bmp280_init();
  1295  0057  160A  118A  2360  120A  118A  	fcall	_bmp280_init
  1296  005C                     l3292:
  1297                           
  1298                           ;main.c: 88: bmp280_getdata();
  1299  005C  120A  158A  223F  120A  118A  	fcall	_bmp280_getdata
  1300  0061                     l3294:
  1301                           
  1302                           ;main.c: 89: uncompensated_pressure();
  1303  0061  120A  158A  2308  120A  118A  	fcall	_uncompensated_pressure
  1304  0066                     l3296:
  1305                           
  1306                           ;main.c: 91: ac1 = (aa<<8) + ab;
  1307  0066  1683               	bsf	3,5	;RP0=1, select bank1
  1308  0067  1303               	bcf	3,6	;RP1=0, select bank1
  1309  0068  0859               	movf	(_aa+1)^(0+128),w
  1310  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1311  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1312  006B  00EB               	movwf	??_main+1
  1313  006C  1683               	bsf	3,5	;RP0=1, select bank1
  1314  006D  1303               	bcf	3,6	;RP1=0, select bank1
  1315  006E  0858               	movf	_aa^(0+128),w
  1316  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0071  00EA               	movwf	??_main
  1319  0072  086A               	movf	??_main,w
  1320  0073  00EB               	movwf	??_main+1
  1321  0074  01EA               	clrf	??_main
  1322  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1323  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1324  0077  0854               	movf	_ab^(0+128),w
  1325  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1326  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1327  007A  076A               	addwf	??_main,w
  1328  007B  1683               	bsf	3,5	;RP0=1, select bank1
  1329  007C  1303               	bcf	3,6	;RP1=0, select bank1
  1330  007D  00E7               	movwf	_ac1^(0+128)
  1331  007E  0855               	movf	(_ab+1)^(0+128),w
  1332  007F  1803               	skipnc
  1333  0080  0A55               	incf	(_ab+1)^(0+128),w
  1334  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1335  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1336  0083  076B               	addwf	??_main+1,w
  1337  0084  1683               	bsf	3,5	;RP0=1, select bank1
  1338  0085  1303               	bcf	3,6	;RP1=0, select bank1
  1339  0086  00E8               	movwf	(_ac1+1)^(0+128)
  1340  0087                     l3298:
  1341                           
  1342                           ;main.c: 92: ac2 = (ac<<8) + ad;
  1343  0087  0851               	movf	(_ac+1)^(0+128),w
  1344  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1345  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1346  008A  00EB               	movwf	??_main+1
  1347  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1348  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1349  008D  0850               	movf	_ac^(0+128),w
  1350  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1351  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0090  00EA               	movwf	??_main
  1353  0091  086A               	movf	??_main,w
  1354  0092  00EB               	movwf	??_main+1
  1355  0093  01EA               	clrf	??_main
  1356  0094  1683               	bsf	3,5	;RP0=1, select bank1
  1357  0095  1303               	bcf	3,6	;RP1=0, select bank1
  1358  0096  084C               	movf	_ad^(0+128),w
  1359  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0099  076A               	addwf	??_main,w
  1362  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1363  009B  1303               	bcf	3,6	;RP1=0, select bank1
  1364  009C  00E5               	movwf	_ac2^(0+128)
  1365  009D  084D               	movf	(_ad+1)^(0+128),w
  1366  009E  1803               	skipnc
  1367  009F  0A4D               	incf	(_ad+1)^(0+128),w
  1368  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1369  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1370  00A2  076B               	addwf	??_main+1,w
  1371  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1372  00A4  1303               	bcf	3,6	;RP1=0, select bank1
  1373  00A5  00E6               	movwf	(_ac2+1)^(0+128)
  1374  00A6                     l3300:
  1375                           
  1376                           ;main.c: 93: ac3 = (ae<<8) + af;
  1377  00A6  0849               	movf	(_ae+1)^(0+128),w
  1378  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1379  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  1380  00A9  00EB               	movwf	??_main+1
  1381  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  1382  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  1383  00AC  0848               	movf	_ae^(0+128),w
  1384  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1385  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1386  00AF  00EA               	movwf	??_main
  1387  00B0  086A               	movf	??_main,w
  1388  00B1  00EB               	movwf	??_main+1
  1389  00B2  01EA               	clrf	??_main
  1390  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  1391  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  1392  00B5  0844               	movf	_af^(0+128),w
  1393  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1394  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1395  00B8  076A               	addwf	??_main,w
  1396  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  1397  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  1398  00BB  00E3               	movwf	_ac3^(0+128)
  1399  00BC  0845               	movf	(_af+1)^(0+128),w
  1400  00BD  1803               	skipnc
  1401  00BE  0A45               	incf	(_af+1)^(0+128),w
  1402  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1403  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  1404  00C1  076B               	addwf	??_main+1,w
  1405  00C2  1683               	bsf	3,5	;RP0=1, select bank1
  1406  00C3  1303               	bcf	3,6	;RP1=0, select bank1
  1407  00C4  00E4               	movwf	(_ac3+1)^(0+128)
  1408  00C5                     l3302:
  1409                           
  1410                           ;main.c: 94: ac4 = (b0<<8) + b1;
  1411  00C5  0840               	movf	_b0^(0+128),w
  1412  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1413  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1414  00C8  00EB               	movwf	??_main+1
  1415  00C9  01EA               	clrf	??_main
  1416  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1417  00CB  1303               	bcf	3,6	;RP1=0, select bank1
  1418  00CC  083C               	movf	_b1^(0+128),w
  1419  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1420  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1421  00CF  076A               	addwf	??_main,w
  1422  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  1423  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  1424  00D2  00E1               	movwf	_ac4^(0+128)
  1425  00D3  083D               	movf	(_b1+1)^(0+128),w
  1426  00D4  1803               	skipnc
  1427  00D5  0A3D               	incf	(_b1+1)^(0+128),w
  1428  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1429  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  1430  00D8  076B               	addwf	??_main+1,w
  1431  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  1432  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  1433  00DB  00E2               	movwf	(_ac4+1)^(0+128)
  1434  00DC                     l3304:
  1435                           
  1436                           ;main.c: 96: actual_pressure();
  1437  00DC  120A  118A  229D  120A  118A  	fcall	_actual_pressure
  1438  00E1                     l3306:
  1439                           
  1440                           ;main.c: 99: bmp280_displaydata();
  1441  00E1  160A  118A  2505  120A  118A  	fcall	_bmp280_displaydata
  1442  00E6                     l3308:
  1443                           
  1444                           ;main.c: 100: bmp280_terminaldata();
  1445  00E6  160A  118A  23A6  120A  118A  	fcall	_bmp280_terminaldata
  1446  00EB                     l3310:
  1447                           
  1448                           ;main.c: 103: tx(0x0d);
  1449  00EB  300D               	movlw	13
  1450  00EC  160A  118A  22E1  120A  118A  	fcall	_tx
  1451  00F1                     l3312:
  1452                           
  1453                           ;main.c: 104: _delay((unsigned long)((250)*(20000000/4000.0)));
  1454  00F1  3007               	movlw	7
  1455  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1456  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1457  00F4  00EC               	movwf	??_main+2
  1458  00F5  3058               	movlw	88
  1459  00F6  00EB               	movwf	??_main+1
  1460  00F7  3059               	movlw	89
  1461  00F8  00EA               	movwf	??_main
  1462  00F9                     u4307:
  1463  00F9  0BEA               	decfsz	??_main,f
  1464  00FA  28F9               	goto	u4307
  1465  00FB  0BEB               	decfsz	??_main+1,f
  1466  00FC  28F9               	goto	u4307
  1467  00FD  0BEC               	decfsz	??_main+2,f
  1468  00FE  28F9               	goto	u4307
  1469  00FF                     l3314:
  1470                           
  1471                           ;main.c: 105: sn += 1;
  1472  00FF  3001               	movlw	1
  1473  0100  1683               	bsf	3,5	;RP0=1, select bank1
  1474  0101  1303               	bcf	3,6	;RP1=0, select bank1
  1475  0102  07ED               	addwf	_sn^(0+128),f
  1476  0103  1803               	skipnc
  1477  0104  0AEE               	incf	(_sn+1)^(0+128),f
  1478  0105  3000               	movlw	0
  1479  0106  07EE               	addwf	(_sn+1)^(0+128),f
  1480  0107  2811               	goto	l375
  1481  0108  120A  118A  2800   	ljmp	start
  1482  010B                     __end_of_main:
  1483                           
  1484                           	psect	text1
  1485  0B08                     __ptext1:	
  1486 ;; *************** function _uncompensated_pressure *****************
  1487 ;; Defined at:
  1488 ;;		line 267 in file "main.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  ff8             4   21[BANK0 ] long 
  1493 ;;  ff7             4   17[BANK0 ] long 
  1494 ;;  ff6             4   13[BANK0 ] long 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         0       0       0       0       0
  1505 ;;      Locals:         0      12       0       0       0
  1506 ;;      Temps:          0      13       0       0       0
  1507 ;;      Totals:         0      25       0       0       0
  1508 ;;Total ram usage:       25 bytes
  1509 ;; Hardware stack levels used: 1
  1510 ;; Hardware stack levels required when called: 3
  1511 ;; This function calls:
  1512 ;;		_bmp280_read_byte
  1513 ;;		_bmp280_send_byte
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           
  1520                           ;psect for function _uncompensated_pressure
  1521  0B08                     _uncompensated_pressure:
  1522  0B08                     l2998:	
  1523                           ;incstack = 0
  1524                           ; Regs used in _uncompensated_pressure: [wreg+status,2+status,0+pclath+cstack]
  1525                           
  1526                           
  1527                           ;main.c: 269: bmp280_send_byte(0xf4,(0x34+(oss<<6)));
  1528  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  1530  0B0A  086D               	movf	_oss,w
  1531  0B0B  00C7               	movwf	??_uncompensated_pressure
  1532  0B0C  3005               	movlw	5
  1533  0B0D                     u3285:
  1534  0B0D  1003               	clrc
  1535  0B0E  0DC7               	rlf	??_uncompensated_pressure,f
  1536  0B0F  3EFF               	addlw	-1
  1537  0B10  1D03               	skipz
  1538  0B11  2B0D               	goto	u3285
  1539  0B12  1003               	clrc
  1540  0B13  0D47               	rlf	??_uncompensated_pressure,w
  1541  0B14  3E34               	addlw	52
  1542  0B15  00C8               	movwf	??_uncompensated_pressure+1
  1543  0B16  0848               	movf	??_uncompensated_pressure+1,w
  1544  0B17  00F1               	movwf	bmp280_send_byte@count
  1545  0B18  30F4               	movlw	244
  1546  0B19  160A  118A  23C3  120A  158A  	fcall	_bmp280_send_byte
  1547  0B1E                     l3000:
  1548                           
  1549                           ;main.c: 270: _delay((unsigned long)((25)*(20000000/4000.0)));
  1550  0B1E  30A3               	movlw	163
  1551  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  1552  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  1553  0B21  00C8               	movwf	??_uncompensated_pressure+1
  1554  0B22  3054               	movlw	84
  1555  0B23  00C7               	movwf	??_uncompensated_pressure
  1556  0B24                     u4317:
  1557  0B24  0BC7               	decfsz	??_uncompensated_pressure,f
  1558  0B25  2B24               	goto	u4317
  1559  0B26  0BC8               	decfsz	??_uncompensated_pressure+1,f
  1560  0B27  2B24               	goto	u4317
  1561  0B28  0000               	nop
  1562  0B29                     l3002:
  1563                           
  1564                           ;main.c: 272: long ff6=(bmp280_read_byte(0xf6));
  1565  0B29  30F6               	movlw	246
  1566  0B2A  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  1567  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0B31  00C7               	movwf	??_uncompensated_pressure
  1570  0B32  01C8               	clrf	??_uncompensated_pressure+1
  1571  0B33  01C9               	clrf	??_uncompensated_pressure+2
  1572  0B34  01CA               	clrf	??_uncompensated_pressure+3
  1573  0B35  084A               	movf	??_uncompensated_pressure+3,w
  1574  0B36  00D7               	movwf	uncompensated_pressure@ff6+3
  1575  0B37  0849               	movf	??_uncompensated_pressure+2,w
  1576  0B38  00D6               	movwf	uncompensated_pressure@ff6+2
  1577  0B39  0848               	movf	??_uncompensated_pressure+1,w
  1578  0B3A  00D5               	movwf	uncompensated_pressure@ff6+1
  1579  0B3B  0847               	movf	??_uncompensated_pressure,w
  1580  0B3C  00D4               	movwf	uncompensated_pressure@ff6
  1581  0B3D                     l3004:
  1582                           
  1583                           ;main.c: 273: long ff7=(bmp280_read_byte(0xf7));
  1584  0B3D  30F7               	movlw	247
  1585  0B3E  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  1586  0B43  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0B44  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0B45  00C7               	movwf	??_uncompensated_pressure
  1589  0B46  01C8               	clrf	??_uncompensated_pressure+1
  1590  0B47  01C9               	clrf	??_uncompensated_pressure+2
  1591  0B48  01CA               	clrf	??_uncompensated_pressure+3
  1592  0B49  084A               	movf	??_uncompensated_pressure+3,w
  1593  0B4A  00DB               	movwf	uncompensated_pressure@ff7+3
  1594  0B4B  0849               	movf	??_uncompensated_pressure+2,w
  1595  0B4C  00DA               	movwf	uncompensated_pressure@ff7+2
  1596  0B4D  0848               	movf	??_uncompensated_pressure+1,w
  1597  0B4E  00D9               	movwf	uncompensated_pressure@ff7+1
  1598  0B4F  0847               	movf	??_uncompensated_pressure,w
  1599  0B50  00D8               	movwf	uncompensated_pressure@ff7
  1600  0B51                     l3006:
  1601                           
  1602                           ;main.c: 274: long ff8=(bmp280_read_byte(0xf8));
  1603  0B51  30F8               	movlw	248
  1604  0B52  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  1605  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0B59  00C7               	movwf	??_uncompensated_pressure
  1608  0B5A  01C8               	clrf	??_uncompensated_pressure+1
  1609  0B5B  01C9               	clrf	??_uncompensated_pressure+2
  1610  0B5C  01CA               	clrf	??_uncompensated_pressure+3
  1611  0B5D  084A               	movf	??_uncompensated_pressure+3,w
  1612  0B5E  00DF               	movwf	uncompensated_pressure@ff8+3
  1613  0B5F  0849               	movf	??_uncompensated_pressure+2,w
  1614  0B60  00DE               	movwf	uncompensated_pressure@ff8+2
  1615  0B61  0848               	movf	??_uncompensated_pressure+1,w
  1616  0B62  00DD               	movwf	uncompensated_pressure@ff8+1
  1617  0B63  0847               	movf	??_uncompensated_pressure,w
  1618  0B64  00DC               	movwf	uncompensated_pressure@ff8
  1619  0B65                     l3008:
  1620                           
  1621                           ;main.c: 275: up=(((ff6<<16)+(ff7<<8)+ff8)>>(8-oss));
  1622  0B65  086D               	movf	_oss,w
  1623  0B66  3C08               	sublw	8
  1624  0B67  00C7               	movwf	??_uncompensated_pressure
  1625  0B68  0AC7               	incf	??_uncompensated_pressure,f
  1626  0B69  085C               	movf	uncompensated_pressure@ff8,w
  1627  0B6A  00C8               	movwf	??_uncompensated_pressure+1
  1628  0B6B  085D               	movf	uncompensated_pressure@ff8+1,w
  1629  0B6C  00C9               	movwf	??_uncompensated_pressure+2
  1630  0B6D  085E               	movf	uncompensated_pressure@ff8+2,w
  1631  0B6E  00CA               	movwf	??_uncompensated_pressure+3
  1632  0B6F  085F               	movf	uncompensated_pressure@ff8+3,w
  1633  0B70  00CB               	movwf	??_uncompensated_pressure+4
  1634  0B71  0858               	movf	uncompensated_pressure@ff7,w
  1635  0B72  00CC               	movwf	??_uncompensated_pressure+5
  1636  0B73  0859               	movf	uncompensated_pressure@ff7+1,w
  1637  0B74  00CD               	movwf	??_uncompensated_pressure+6
  1638  0B75  085A               	movf	uncompensated_pressure@ff7+2,w
  1639  0B76  00CE               	movwf	??_uncompensated_pressure+7
  1640  0B77  085B               	movf	uncompensated_pressure@ff7+3,w
  1641  0B78  00CF               	movwf	??_uncompensated_pressure+8
  1642  0B79  3008               	movlw	8
  1643  0B7A                     u3295:
  1644  0B7A  1003               	clrc
  1645  0B7B  0DCC               	rlf	??_uncompensated_pressure+5,f
  1646  0B7C  0DCD               	rlf	??_uncompensated_pressure+6,f
  1647  0B7D  0DCE               	rlf	??_uncompensated_pressure+7,f
  1648  0B7E  0DCF               	rlf	??_uncompensated_pressure+8,f
  1649  0B7F                     u3290:
  1650  0B7F  3EFF               	addlw	-1
  1651  0B80  1D03               	skipz
  1652  0B81  2B7A               	goto	u3295
  1653  0B82  0854               	movf	uncompensated_pressure@ff6,w
  1654  0B83  00D0               	movwf	??_uncompensated_pressure+9
  1655  0B84  0855               	movf	uncompensated_pressure@ff6+1,w
  1656  0B85  00D1               	movwf	??_uncompensated_pressure+10
  1657  0B86  0856               	movf	uncompensated_pressure@ff6+2,w
  1658  0B87  00D2               	movwf	??_uncompensated_pressure+11
  1659  0B88  0857               	movf	uncompensated_pressure@ff6+3,w
  1660  0B89  00D3               	movwf	??_uncompensated_pressure+12
  1661  0B8A  3010               	movlw	16
  1662  0B8B                     u3305:
  1663  0B8B  1003               	clrc
  1664  0B8C  0DD0               	rlf	??_uncompensated_pressure+9,f
  1665  0B8D  0DD1               	rlf	??_uncompensated_pressure+10,f
  1666  0B8E  0DD2               	rlf	??_uncompensated_pressure+11,f
  1667  0B8F  0DD3               	rlf	??_uncompensated_pressure+12,f
  1668  0B90                     u3300:
  1669  0B90  3EFF               	addlw	-1
  1670  0B91  1D03               	skipz
  1671  0B92  2B8B               	goto	u3305
  1672  0B93  0850               	movf	??_uncompensated_pressure+9,w
  1673  0B94  07CC               	addwf	??_uncompensated_pressure+5,f
  1674  0B95  0851               	movf	??_uncompensated_pressure+10,w
  1675  0B96  1803               	skipnc
  1676  0B97  0F51               	incfsz	??_uncompensated_pressure+10,w
  1677  0B98  2B9A               	goto	u3310
  1678  0B99  2B9B               	goto	u3311
  1679  0B9A                     u3310:
  1680  0B9A  07CD               	addwf	??_uncompensated_pressure+6,f
  1681  0B9B                     u3311:
  1682  0B9B  0852               	movf	??_uncompensated_pressure+11,w
  1683  0B9C  1803               	skipnc
  1684  0B9D  0F52               	incfsz	??_uncompensated_pressure+11,w
  1685  0B9E  2BA0               	goto	u3312
  1686  0B9F  2BA1               	goto	u3313
  1687  0BA0                     u3312:
  1688  0BA0  07CE               	addwf	??_uncompensated_pressure+7,f
  1689  0BA1                     u3313:
  1690  0BA1  0853               	movf	??_uncompensated_pressure+12,w
  1691  0BA2  1803               	skipnc
  1692  0BA3  0A53               	incf	??_uncompensated_pressure+12,w
  1693  0BA4  07CF               	addwf	??_uncompensated_pressure+8,f
  1694  0BA5  084C               	movf	??_uncompensated_pressure+5,w
  1695  0BA6  07C8               	addwf	??_uncompensated_pressure+1,f
  1696  0BA7  084D               	movf	??_uncompensated_pressure+6,w
  1697  0BA8  1803               	skipnc
  1698  0BA9  0F4D               	incfsz	??_uncompensated_pressure+6,w
  1699  0BAA  2BAC               	goto	u3320
  1700  0BAB  2BAD               	goto	u3321
  1701  0BAC                     u3320:
  1702  0BAC  07C9               	addwf	??_uncompensated_pressure+2,f
  1703  0BAD                     u3321:
  1704  0BAD  084E               	movf	??_uncompensated_pressure+7,w
  1705  0BAE  1803               	skipnc
  1706  0BAF  0F4E               	incfsz	??_uncompensated_pressure+7,w
  1707  0BB0  2BB2               	goto	u3322
  1708  0BB1  2BB3               	goto	u3323
  1709  0BB2                     u3322:
  1710  0BB2  07CA               	addwf	??_uncompensated_pressure+3,f
  1711  0BB3                     u3323:
  1712  0BB3  084F               	movf	??_uncompensated_pressure+8,w
  1713  0BB4  1803               	skipnc
  1714  0BB5  0A4F               	incf	??_uncompensated_pressure+8,w
  1715  0BB6  07CB               	addwf	??_uncompensated_pressure+4,f
  1716  0BB7  2BBD               	goto	u3330
  1717  0BB8                     u3335:
  1718  0BB8  0D4B               	rlf	??_uncompensated_pressure+4,w
  1719  0BB9  0CCB               	rrf	??_uncompensated_pressure+4,f
  1720  0BBA  0CCA               	rrf	??_uncompensated_pressure+3,f
  1721  0BBB  0CC9               	rrf	??_uncompensated_pressure+2,f
  1722  0BBC  0CC8               	rrf	??_uncompensated_pressure+1,f
  1723  0BBD                     u3330:
  1724  0BBD  0BC7               	decfsz	??_uncompensated_pressure,f
  1725  0BBE  2BB8               	goto	u3335
  1726  0BBF  084B               	movf	??_uncompensated_pressure+4,w
  1727  0BC0  1683               	bsf	3,5	;RP0=1, select bank1
  1728  0BC1  1303               	bcf	3,6	;RP1=0, select bank1
  1729  0BC2  00AF               	movwf	(_up+3)^(0+128)
  1730  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  1731  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  1732  0BC5  084A               	movf	??_uncompensated_pressure+3,w
  1733  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  1734  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  1735  0BC8  00AE               	movwf	(_up+2)^(0+128)
  1736  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  1737  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  1738  0BCB  0849               	movf	??_uncompensated_pressure+2,w
  1739  0BCC  1683               	bsf	3,5	;RP0=1, select bank1
  1740  0BCD  1303               	bcf	3,6	;RP1=0, select bank1
  1741  0BCE  00AD               	movwf	(_up+1)^(0+128)
  1742  0BCF  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0BD0  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0BD1  0848               	movf	??_uncompensated_pressure+1,w
  1745  0BD2  1683               	bsf	3,5	;RP0=1, select bank1
  1746  0BD3  1303               	bcf	3,6	;RP1=0, select bank1
  1747  0BD4  00AC               	movwf	_up^(0+128)
  1748  0BD5                     l417:
  1749  0BD5  0008               	return
  1750  0BD6                     __end_of_uncompensated_pressure:
  1751                           
  1752                           	psect	text2
  1753  13C3                     __ptext2:	
  1754 ;; *************** function _bmp280_send_byte *****************
  1755 ;; Defined at:
  1756 ;;		line 59 in file "bmp280.h"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  addr            1    wreg     unsigned char 
  1759 ;;  count           1    1[COMMON] unsigned char 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  addr            1    2[COMMON] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, pclath, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1771 ;;      Params:         1       0       0       0       0
  1772 ;;      Locals:         1       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0
  1774 ;;      Totals:         2       0       0       0       0
  1775 ;;Total ram usage:        2 bytes
  1776 ;; Hardware stack levels used: 1
  1777 ;; Hardware stack levels required when called: 2
  1778 ;; This function calls:
  1779 ;;		_bmp280_send
  1780 ;;		_bmp280_start
  1781 ;;		_bmp280_stop
  1782 ;; This function is called by:
  1783 ;;		_uncompensated_pressure
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function _bmp280_send_byte
  1789  13C3                     _bmp280_send_byte:
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in _bmp280_send_byte: [wreg+status,2+status,0+pclath+cstack]
  1793                           ;bmp280_send_byte@addr stored from wreg
  1794  13C3  00F2               	movwf	bmp280_send_byte@addr
  1795  13C4                     l2752:
  1796                           
  1797                           ;bmp280.h: 61: bmp280_start();
  1798  13C4  120A  158A  2000  160A  118A  	fcall	_bmp280_start
  1799  13C9                     l2754:
  1800                           
  1801                           ;bmp280.h: 62: bmp280_send(0xEE);
  1802  13C9  30EE               	movlw	238
  1803  13CA  160A  118A  232C  160A  118A  	fcall	_bmp280_send
  1804  13CF                     l2756:
  1805                           
  1806                           ;bmp280.h: 63: bmp280_send(addr);
  1807  13CF  0872               	movf	bmp280_send_byte@addr,w
  1808  13D0  160A  118A  232C  160A  118A  	fcall	_bmp280_send
  1809  13D5                     l2758:
  1810                           
  1811                           ;bmp280.h: 64: bmp280_send(count);
  1812  13D5  0871               	movf	bmp280_send_byte@count,w
  1813  13D6  160A  118A  232C  160A  118A  	fcall	_bmp280_send
  1814  13DB                     l2760:
  1815                           
  1816                           ;bmp280.h: 65: bmp280_stop();
  1817  13DB  160A  118A  22B2  160A  118A  	fcall	_bmp280_stop
  1818  13E0                     l298:
  1819  13E0  0008               	return
  1820  13E1                     __end_of_bmp280_send_byte:
  1821                           
  1822                           	psect	text3
  1823  0800                     __ptext3:	
  1824 ;; *************** function _bmp280_start *****************
  1825 ;; Defined at:
  1826 ;;		line 21 in file "bmp280.h"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		status,2, status,0, pclath, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1840 ;;      Params:         0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used: 1
  1846 ;; Hardware stack levels required when called: 1
  1847 ;; This function calls:
  1848 ;;		_bmp280_waitmssp
  1849 ;; This function is called by:
  1850 ;;		_bmp280_send_byte
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           
  1855                           ;psect for function _bmp280_start
  1856  0800                     _bmp280_start:
  1857  0800                     l1952:	
  1858                           ;incstack = 0
  1859                           ; Regs used in _bmp280_start: [status,2+status,0+pclath+cstack]
  1860                           
  1861                           
  1862                           ;bmp280.h: 23: SEN=1;
  1863  0800  1683               	bsf	3,5	;RP0=1, select bank1
  1864  0801  1303               	bcf	3,6	;RP1=0, select bank1
  1865  0802  1411               	bsf	17,0	;volatile
  1866  0803                     l1954:
  1867                           
  1868                           ;bmp280.h: 24: bmp280_waitmssp();
  1869  0803  160A  118A  2291  120A  158A  	fcall	_bmp280_waitmssp
  1870  0808                     l270:
  1871  0808  0008               	return
  1872  0809                     __end_of_bmp280_start:
  1873                           
  1874                           	psect	text4
  1875  1310                     __ptext4:	
  1876 ;; *************** function _ser_int *****************
  1877 ;; Defined at:
  1878 ;;		line 7 in file "uart.h"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0
  1895 ;;      Totals:         0       0       0       0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used: 1
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           
  1906                           ;psect for function _ser_int
  1907  1310                     _ser_int:
  1908  1310                     l2906:	
  1909                           ;incstack = 0
  1910                           ; Regs used in _ser_int: [wreg]
  1911                           
  1912                           
  1913                           ;uart.h: 9: TXSTA= 0x20;
  1914  1310  3020               	movlw	32
  1915  1311  1683               	bsf	3,5	;RP0=1, select bank1
  1916  1312  1303               	bcf	3,6	;RP1=0, select bank1
  1917  1313  0098               	movwf	24	;volatile
  1918                           
  1919                           ;uart.h: 10: RCSTA= 0b10010000;
  1920  1314  3090               	movlw	144
  1921  1315  1283               	bcf	3,5	;RP0=0, select bank0
  1922  1316  1303               	bcf	3,6	;RP1=0, select bank0
  1923  1317  0098               	movwf	24	;volatile
  1924                           
  1925                           ;uart.h: 11: SPBRG=31;
  1926  1318  301F               	movlw	31
  1927  1319  1683               	bsf	3,5	;RP0=1, select bank1
  1928  131A  1303               	bcf	3,6	;RP1=0, select bank1
  1929  131B  0099               	movwf	25	;volatile
  1930  131C                     l140:
  1931  131C  0008               	return
  1932  131D                     __end_of_ser_int:
  1933                           
  1934                           	psect	text5
  1935  0D8D                     __ptext5:	
  1936 ;; *************** function _rtc_terminal_data *****************
  1937 ;; Defined at:
  1938 ;;		line 228 in file "main.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0, pclath, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1952 ;;      Params:         0       0       0       0       0
  1953 ;;      Locals:         0       0       0       0       0
  1954 ;;      Temps:          0       0       0       0       0
  1955 ;;      Totals:         0       0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used: 1
  1958 ;; Hardware stack levels required when called: 1
  1959 ;; This function calls:
  1960 ;;		_convd
  1961 ;;		_convup
  1962 ;;		_tx
  1963 ;; This function is called by:
  1964 ;;		_main
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _rtc_terminal_data
  1970  0D8D                     _rtc_terminal_data:
  1971  0D8D                     l2922:	
  1972                           ;incstack = 0
  1973                           ; Regs used in _rtc_terminal_data: [wreg+status,2+status,0+pclath+cstack]
  1974                           
  1975                           
  1976                           ;main.c: 230: tx(convup(date));
  1977  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0D8F  0838               	movf	_date,w
  1980  0D90  160A  118A  2304  120A  158A  	fcall	_convup
  1981  0D95  160A  118A  22E1  120A  158A  	fcall	_tx
  1982                           
  1983                           ;main.c: 231: tx(convd(date));
  1984  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0D9C  0838               	movf	_date,w
  1987  0D9D  160A  118A  228C  120A  158A  	fcall	_convd
  1988  0DA2  160A  118A  22E1  120A  158A  	fcall	_tx
  1989                           
  1990                           ;main.c: 232: tx(':');
  1991  0DA7  303A               	movlw	58
  1992  0DA8  160A  118A  22E1  120A  158A  	fcall	_tx
  1993                           
  1994                           ;main.c: 233: tx(convup(month));
  1995  0DAD  1283               	bcf	3,5	;RP0=0, select bank0
  1996  0DAE  1303               	bcf	3,6	;RP1=0, select bank0
  1997  0DAF  0837               	movf	_month,w
  1998  0DB0  160A  118A  2304  120A  158A  	fcall	_convup
  1999  0DB5  160A  118A  22E1  120A  158A  	fcall	_tx
  2000                           
  2001                           ;main.c: 234: tx(convd(month));
  2002  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  2003  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  2004  0DBC  0837               	movf	_month,w
  2005  0DBD  160A  118A  228C  120A  158A  	fcall	_convd
  2006  0DC2  160A  118A  22E1  120A  158A  	fcall	_tx
  2007                           
  2008                           ;main.c: 235: tx(':');
  2009  0DC7  303A               	movlw	58
  2010  0DC8  160A  118A  22E1  120A  158A  	fcall	_tx
  2011                           
  2012                           ;main.c: 236: tx(convup(year));
  2013  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  2014  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  2015  0DCF  0836               	movf	_year,w
  2016  0DD0  160A  118A  2304  120A  158A  	fcall	_convup
  2017  0DD5  160A  118A  22E1  120A  158A  	fcall	_tx
  2018                           
  2019                           ;main.c: 237: tx(convd(year));
  2020  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  2021  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  2022  0DDC  0836               	movf	_year,w
  2023  0DDD  160A  118A  228C  120A  158A  	fcall	_convd
  2024  0DE2  160A  118A  22E1  120A  158A  	fcall	_tx
  2025                           
  2026                           ;main.c: 238: tx(',');
  2027  0DE7  302C               	movlw	44
  2028  0DE8  160A  118A  22E1  120A  158A  	fcall	_tx
  2029                           
  2030                           ;main.c: 239: tx(convup(day));
  2031  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0DEF  0839               	movf	_day,w
  2034  0DF0  160A  118A  2304  120A  158A  	fcall	_convup
  2035  0DF5  160A  118A  22E1  120A  158A  	fcall	_tx
  2036                           
  2037                           ;main.c: 240: tx(convd(day));
  2038  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  2040  0DFC  0839               	movf	_day,w
  2041  0DFD  160A  118A  228C  120A  158A  	fcall	_convd
  2042  0E02  160A  118A  22E1  120A  158A  	fcall	_tx
  2043                           
  2044                           ;main.c: 241: tx(',');
  2045  0E07  302C               	movlw	44
  2046  0E08  160A  118A  22E1  120A  158A  	fcall	_tx
  2047                           
  2048                           ;main.c: 242: tx(convup(hour));
  2049  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0E0F  083A               	movf	_hour,w
  2052  0E10  160A  118A  2304  120A  158A  	fcall	_convup
  2053  0E15  160A  118A  22E1  120A  158A  	fcall	_tx
  2054                           
  2055                           ;main.c: 243: tx(convd(hour));
  2056  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  2058  0E1C  083A               	movf	_hour,w
  2059  0E1D  160A  118A  228C  120A  158A  	fcall	_convd
  2060  0E22  160A  118A  22E1  120A  158A  	fcall	_tx
  2061                           
  2062                           ;main.c: 244: tx(':');
  2063  0E27  303A               	movlw	58
  2064  0E28  160A  118A  22E1  120A  158A  	fcall	_tx
  2065                           
  2066                           ;main.c: 245: tx(convup(min));
  2067  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0E2F  083B               	movf	_min,w
  2070  0E30  160A  118A  2304  120A  158A  	fcall	_convup
  2071  0E35  160A  118A  22E1  120A  158A  	fcall	_tx
  2072                           
  2073                           ;main.c: 246: tx(convd(min));
  2074  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0E3C  083B               	movf	_min,w
  2077  0E3D  160A  118A  228C  120A  158A  	fcall	_convd
  2078  0E42  160A  118A  22E1  120A  158A  	fcall	_tx
  2079                           
  2080                           ;main.c: 247: tx(':');
  2081  0E47  303A               	movlw	58
  2082  0E48  160A  118A  22E1  120A  158A  	fcall	_tx
  2083                           
  2084                           ;main.c: 248: tx(convup(sec));
  2085  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  2086  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  2087  0E4F  083C               	movf	_sec,w
  2088  0E50  160A  118A  2304  120A  158A  	fcall	_convup
  2089  0E55  160A  118A  22E1  120A  158A  	fcall	_tx
  2090                           
  2091                           ;main.c: 249: tx(convd(sec));
  2092  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0E5C  083C               	movf	_sec,w
  2095  0E5D  160A  118A  228C  120A  158A  	fcall	_convd
  2096  0E62  160A  118A  22E1  120A  158A  	fcall	_tx
  2097                           
  2098                           ;main.c: 250: tx(',');
  2099  0E67  302C               	movlw	44
  2100  0E68  160A  118A  22E1  120A  158A  	fcall	_tx
  2101  0E6D                     l411:
  2102  0E6D  0008               	return
  2103  0E6E                     __end_of_rtc_terminal_data:
  2104                           
  2105                           	psect	text6
  2106  0CAC                     __ptext6:	
  2107 ;; *************** function _rtc_lcd_data *****************
  2108 ;; Defined at:
  2109 ;;		line 203 in file "main.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0, pclath, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         0       0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0
  2126 ;;      Totals:         0       0       0       0       0
  2127 ;;Total ram usage:        0 bytes
  2128 ;; Hardware stack levels used: 1
  2129 ;; Hardware stack levels required when called: 1
  2130 ;; This function calls:
  2131 ;;		_LCD_Char
  2132 ;;		_LCD_Command
  2133 ;;		_convd
  2134 ;;		_convup
  2135 ;; This function is called by:
  2136 ;;		_main
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           
  2141                           ;psect for function _rtc_lcd_data
  2142  0CAC                     _rtc_lcd_data:
  2143  0CAC                     l2920:	
  2144                           ;incstack = 0
  2145                           ; Regs used in _rtc_lcd_data: [wreg+status,2+status,0+pclath+cstack]
  2146                           
  2147                           
  2148                           ;main.c: 205: LCD_Command(0x80);
  2149  0CAC  3080               	movlw	128
  2150  0CAD  160A  118A  2540  120A  158A  	fcall	_LCD_Command
  2151                           
  2152                           ;main.c: 206: LCD_Char(convup(date));
  2153  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  2154  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  2155  0CB4  0838               	movf	_date,w
  2156  0CB5  160A  118A  2304  120A  158A  	fcall	_convup
  2157  0CBA  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2158                           
  2159                           ;main.c: 207: LCD_Char(convd(date));
  2160  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  2161  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  2162  0CC1  0838               	movf	_date,w
  2163  0CC2  160A  118A  228C  120A  158A  	fcall	_convd
  2164  0CC7  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2165                           
  2166                           ;main.c: 208: LCD_Char(':');
  2167  0CCC  303A               	movlw	58
  2168  0CCD  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2169                           
  2170                           ;main.c: 209: LCD_Char(convup(month));
  2171  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  2173  0CD4  0837               	movf	_month,w
  2174  0CD5  160A  118A  2304  120A  158A  	fcall	_convup
  2175  0CDA  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2176                           
  2177                           ;main.c: 210: LCD_Char(convd(month));
  2178  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0CE1  0837               	movf	_month,w
  2181  0CE2  160A  118A  228C  120A  158A  	fcall	_convd
  2182  0CE7  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2183                           
  2184                           ;main.c: 211: LCD_Char(':');
  2185  0CEC  303A               	movlw	58
  2186  0CED  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2187                           
  2188                           ;main.c: 212: LCD_Char(convup(year));
  2189  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0CF4  0836               	movf	_year,w
  2192  0CF5  160A  118A  2304  120A  158A  	fcall	_convup
  2193  0CFA  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2194                           
  2195                           ;main.c: 213: LCD_Char(convd(year));
  2196  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0D01  0836               	movf	_year,w
  2199  0D02  160A  118A  228C  120A  158A  	fcall	_convd
  2200  0D07  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2201                           
  2202                           ;main.c: 214: LCD_Char('/');
  2203  0D0C  302F               	movlw	47
  2204  0D0D  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2205                           
  2206                           ;main.c: 215: LCD_Char(convup(day));
  2207  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  2208  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0D14  0839               	movf	_day,w
  2210  0D15  160A  118A  2304  120A  158A  	fcall	_convup
  2211  0D1A  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2212                           
  2213                           ;main.c: 216: LCD_Char(convd(day));
  2214  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0D21  0839               	movf	_day,w
  2217  0D22  160A  118A  228C  120A  158A  	fcall	_convd
  2218  0D27  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2219                           
  2220                           ;main.c: 218: LCD_Command(0x8C);
  2221  0D2C  308C               	movlw	140
  2222  0D2D  160A  118A  2540  120A  158A  	fcall	_LCD_Command
  2223                           
  2224                           ;main.c: 219: LCD_Char(convup(hour));
  2225  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0D34  083A               	movf	_hour,w
  2228  0D35  160A  118A  2304  120A  158A  	fcall	_convup
  2229  0D3A  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2230                           
  2231                           ;main.c: 220: LCD_Char(convd(hour));
  2232  0D3F  1283               	bcf	3,5	;RP0=0, select bank0
  2233  0D40  1303               	bcf	3,6	;RP1=0, select bank0
  2234  0D41  083A               	movf	_hour,w
  2235  0D42  160A  118A  228C  120A  158A  	fcall	_convd
  2236  0D47  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2237                           
  2238                           ;main.c: 221: LCD_Char(':');
  2239  0D4C  303A               	movlw	58
  2240  0D4D  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2241                           
  2242                           ;main.c: 222: LCD_Char(convup(min));
  2243  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0D54  083B               	movf	_min,w
  2246  0D55  160A  118A  2304  120A  158A  	fcall	_convup
  2247  0D5A  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2248                           
  2249                           ;main.c: 223: LCD_Char(convd(min));
  2250  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0D60  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0D61  083B               	movf	_min,w
  2253  0D62  160A  118A  228C  120A  158A  	fcall	_convd
  2254  0D67  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2255                           
  2256                           ;main.c: 224: LCD_Char(':');
  2257  0D6C  303A               	movlw	58
  2258  0D6D  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2259                           
  2260                           ;main.c: 225: LCD_Char(convup(sec));
  2261  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0D74  083C               	movf	_sec,w
  2264  0D75  160A  118A  2304  120A  158A  	fcall	_convup
  2265  0D7A  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2266                           
  2267                           ;main.c: 226: LCD_Char(convd(sec));
  2268  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0D81  083C               	movf	_sec,w
  2271  0D82  160A  118A  228C  120A  158A  	fcall	_convd
  2272  0D87  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  2273  0D8C                     l408:
  2274  0D8C  0008               	return
  2275  0D8D                     __end_of_rtc_lcd_data:
  2276                           
  2277                           	psect	text7
  2278  1304                     __ptext7:	
  2279 ;; *************** function _convup *****************
  2280 ;; Defined at:
  2281 ;;		line 97 in file "ds1307.h"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  bcd             1    wreg     unsigned char 
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  bcd             1    1[COMMON] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      unsigned char 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2295 ;;      Params:         0       0       0       0       0
  2296 ;;      Locals:         1       0       0       0       0
  2297 ;;      Temps:          1       0       0       0       0
  2298 ;;      Totals:         2       0       0       0       0
  2299 ;;Total ram usage:        2 bytes
  2300 ;; Hardware stack levels used: 1
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_rtc_lcd_data
  2305 ;;		_rtc_terminal_data
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _convup
  2311  1304                     _convup:
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _convup: [wreg+status,2+status,0]
  2315                           ;convup@bcd stored from wreg
  2316  1304  00F1               	movwf	convup@bcd
  2317  1305                     l2744:
  2318                           
  2319                           ;ds1307.h: 99: return ((bcd>>4)+48);
  2320  1305  0871               	movf	convup@bcd,w
  2321  1306  00F0               	movwf	??_convup
  2322  1307  3004               	movlw	4
  2323  1308                     u2845:
  2324  1308  1003               	clrc
  2325  1309  0CF0               	rrf	??_convup,f
  2326  130A  3EFF               	addlw	-1
  2327  130B  1D03               	skipz
  2328  130C  2B08               	goto	u2845
  2329  130D  0870               	movf	??_convup,w
  2330  130E  3E30               	addlw	48
  2331  130F                     l261:
  2332  130F  0008               	return
  2333  1310                     __end_of_convup:
  2334                           
  2335                           	psect	text8
  2336  128C                     __ptext8:	
  2337 ;; *************** function _convd *****************
  2338 ;; Defined at:
  2339 ;;		line 101 in file "ds1307.h"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  bcd             1    wreg     unsigned char 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  bcd             1    0[COMMON] unsigned char 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      unsigned char 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2353 ;;      Params:         0       0       0       0       0
  2354 ;;      Locals:         1       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0
  2356 ;;      Totals:         1       0       0       0       0
  2357 ;;Total ram usage:        1 bytes
  2358 ;; Hardware stack levels used: 1
  2359 ;; This function calls:
  2360 ;;		Nothing
  2361 ;; This function is called by:
  2362 ;;		_rtc_lcd_data
  2363 ;;		_rtc_terminal_data
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function _convd
  2369  128C                     _convd:
  2370                           
  2371                           ;incstack = 0
  2372                           ; Regs used in _convd: [wreg+status,2+status,0]
  2373                           ;convd@bcd stored from wreg
  2374  128C  00F0               	movwf	convd@bcd
  2375  128D                     l2748:
  2376                           
  2377                           ;ds1307.h: 103: return ((bcd&0x0F)+48);
  2378  128D  0870               	movf	convd@bcd,w
  2379  128E  390F               	andlw	15
  2380  128F  3E30               	addlw	48
  2381  1290                     l264:
  2382  1290  0008               	return
  2383  1291                     __end_of_convd:
  2384                           
  2385                           	psect	text9
  2386  1376                     __ptext9:	
  2387 ;; *************** function _rtc_int *****************
  2388 ;; Defined at:
  2389 ;;		line 19 in file "ds1307.h"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2403 ;;      Params:         0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0
  2405 ;;      Temps:          0       0       0       0       0
  2406 ;;      Totals:         0       0       0       0       0
  2407 ;;Total ram usage:        0 bytes
  2408 ;; Hardware stack levels used: 1
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_main
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _rtc_int
  2418  1376                     _rtc_int:
  2419  1376                     l2908:	
  2420                           ;incstack = 0
  2421                           ; Regs used in _rtc_int: [wreg]
  2422                           
  2423                           
  2424                           ;ds1307.h: 21: TRISC3=TRISC4=1;
  2425  1376  1683               	bsf	3,5	;RP0=1, select bank1
  2426  1377  1303               	bcf	3,6	;RP1=0, select bank1
  2427  1378  1607               	bsf	7,4	;volatile
  2428  1379  1A07               	btfsc	7,4	;volatile
  2429  137A  2B7C               	goto	u3181
  2430  137B  2B80               	goto	u3180
  2431  137C                     u3181:
  2432  137C  1683               	bsf	3,5	;RP0=1, select bank1
  2433  137D  1303               	bcf	3,6	;RP1=0, select bank1
  2434  137E  1587               	bsf	7,3	;volatile
  2435  137F  2B83               	goto	u3194
  2436  1380                     u3180:
  2437  1380  1683               	bsf	3,5	;RP0=1, select bank1
  2438  1381  1303               	bcf	3,6	;RP1=0, select bank1
  2439  1382  1187               	bcf	7,3	;volatile
  2440  1383                     u3194:
  2441  1383                     l2910:
  2442                           
  2443                           ;ds1307.h: 22: SSPCON=0x28;
  2444  1383  3028               	movlw	40
  2445  1384  1283               	bcf	3,5	;RP0=0, select bank0
  2446  1385  1303               	bcf	3,6	;RP1=0, select bank0
  2447  1386  0094               	movwf	20	;volatile
  2448                           
  2449                           ;ds1307.h: 23: SSPADD= (((11059200/4)/100)-1);
  2450  1387  30FF               	movlw	255
  2451  1388  1683               	bsf	3,5	;RP0=1, select bank1
  2452  1389  1303               	bcf	3,6	;RP1=0, select bank1
  2453  138A  0093               	movwf	19	;volatile
  2454  138B                     l218:
  2455  138B  0008               	return
  2456  138C                     __end_of_rtc_int:
  2457                           
  2458                           	psect	text10
  2459  168C                     __ptext10:	
  2460 ;; *************** function _rtc_getdata *****************
  2461 ;; Defined at:
  2462 ;;		line 193 in file "main.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;		None
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0, pclath, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2476 ;;      Params:         0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0
  2478 ;;      Temps:          1       0       0       0       0
  2479 ;;      Totals:         1       0       0       0       0
  2480 ;;Total ram usage:        1 bytes
  2481 ;; Hardware stack levels used: 1
  2482 ;; Hardware stack levels required when called: 3
  2483 ;; This function calls:
  2484 ;;		_rtc_read_byte
  2485 ;; This function is called by:
  2486 ;;		_main
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function _rtc_getdata
  2492  168C                     _rtc_getdata:
  2493  168C                     l2918:	
  2494                           ;incstack = 0
  2495                           ; Regs used in _rtc_getdata: [wreg+status,2+status,0+pclath+cstack]
  2496                           
  2497                           
  2498                           ;main.c: 195: sec =rtc_read_byte(0x00);
  2499  168C  3000               	movlw	0
  2500  168D  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2501  1692  00F4               	movwf	??_rtc_getdata
  2502  1693  0874               	movf	??_rtc_getdata,w
  2503  1694  1283               	bcf	3,5	;RP0=0, select bank0
  2504  1695  1303               	bcf	3,6	;RP1=0, select bank0
  2505  1696  00BC               	movwf	_sec
  2506                           
  2507                           ;main.c: 196: min =rtc_read_byte(0x01);
  2508  1697  3001               	movlw	1
  2509  1698  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2510  169D  00F4               	movwf	??_rtc_getdata
  2511  169E  0874               	movf	??_rtc_getdata,w
  2512  169F  1283               	bcf	3,5	;RP0=0, select bank0
  2513  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  2514  16A1  00BB               	movwf	_min
  2515                           
  2516                           ;main.c: 197: hour =rtc_read_byte(0x02);
  2517  16A2  3002               	movlw	2
  2518  16A3  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2519  16A8  00F4               	movwf	??_rtc_getdata
  2520  16A9  0874               	movf	??_rtc_getdata,w
  2521  16AA  1283               	bcf	3,5	;RP0=0, select bank0
  2522  16AB  1303               	bcf	3,6	;RP1=0, select bank0
  2523  16AC  00BA               	movwf	_hour
  2524                           
  2525                           ;main.c: 198: day =rtc_read_byte(0x03);
  2526  16AD  3003               	movlw	3
  2527  16AE  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2528  16B3  00F4               	movwf	??_rtc_getdata
  2529  16B4  0874               	movf	??_rtc_getdata,w
  2530  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  2531  16B6  1303               	bcf	3,6	;RP1=0, select bank0
  2532  16B7  00B9               	movwf	_day
  2533                           
  2534                           ;main.c: 199: date =rtc_read_byte(0x04);
  2535  16B8  3004               	movlw	4
  2536  16B9  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2537  16BE  00F4               	movwf	??_rtc_getdata
  2538  16BF  0874               	movf	??_rtc_getdata,w
  2539  16C0  1283               	bcf	3,5	;RP0=0, select bank0
  2540  16C1  1303               	bcf	3,6	;RP1=0, select bank0
  2541  16C2  00B8               	movwf	_date
  2542                           
  2543                           ;main.c: 200: month=rtc_read_byte(0x05);
  2544  16C3  3005               	movlw	5
  2545  16C4  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2546  16C9  00F4               	movwf	??_rtc_getdata
  2547  16CA  0874               	movf	??_rtc_getdata,w
  2548  16CB  1283               	bcf	3,5	;RP0=0, select bank0
  2549  16CC  1303               	bcf	3,6	;RP1=0, select bank0
  2550  16CD  00B7               	movwf	_month
  2551                           
  2552                           ;main.c: 201: year =rtc_read_byte(0x06);
  2553  16CE  3006               	movlw	6
  2554  16CF  160A  118A  24CB  160A  118A  	fcall	_rtc_read_byte
  2555  16D4  00F4               	movwf	??_rtc_getdata
  2556  16D5  0874               	movf	??_rtc_getdata,w
  2557  16D6  1283               	bcf	3,5	;RP0=0, select bank0
  2558  16D7  1303               	bcf	3,6	;RP1=0, select bank0
  2559  16D8  00B6               	movwf	_year
  2560  16D9                     l405:
  2561  16D9  0008               	return
  2562  16DA                     __end_of_rtc_getdata:
  2563                           
  2564                           	psect	text11
  2565  14CB                     __ptext11:	
  2566 ;; *************** function _rtc_read_byte *****************
  2567 ;; Defined at:
  2568 ;;		line 52 in file "ds1307.h"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  addr            1    wreg     unsigned char 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  addr            1    2[COMMON] unsigned char 
  2573 ;;  rec             1    3[COMMON] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      unsigned char 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2583 ;;      Params:         0       0       0       0       0
  2584 ;;      Locals:         2       0       0       0       0
  2585 ;;      Temps:          1       0       0       0       0
  2586 ;;      Totals:         3       0       0       0       0
  2587 ;;Total ram usage:        3 bytes
  2588 ;; Hardware stack levels used: 1
  2589 ;; Hardware stack levels required when called: 2
  2590 ;; This function calls:
  2591 ;;		_rtc_nak
  2592 ;;		_rtc_read
  2593 ;;		_rtc_res
  2594 ;;		_rtc_send
  2595 ;;		_rtc_stop
  2596 ;;		_waitmssp
  2597 ;; This function is called by:
  2598 ;;		_rtc_getdata
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _rtc_read_byte
  2604  14CB                     _rtc_read_byte:
  2605                           
  2606                           ;incstack = 0
  2607                           ; Regs used in _rtc_read_byte: [wreg+status,2+status,0+pclath+cstack]
  2608                           ;rtc_read_byte@addr stored from wreg
  2609  14CB  00F2               	movwf	rtc_read_byte@addr
  2610  14CC                     l239:	
  2611                           ;ds1307.h: 54: unsigned char rec;;ds1307.h: 55: L: rtc_res();
  2612                           
  2613  14CC                     l2724:
  2614  14CC  160A  118A  22BB  160A  118A  	fcall	_rtc_res
  2615  14D1                     l2726:
  2616                           
  2617                           ;ds1307.h: 56: SSPBUF=0xD0;
  2618  14D1  30D0               	movlw	208
  2619  14D2  1283               	bcf	3,5	;RP0=0, select bank0
  2620  14D3  1303               	bcf	3,6	;RP1=0, select bank0
  2621  14D4  0093               	movwf	19	;volatile
  2622  14D5                     l2728:
  2623                           
  2624                           ;ds1307.h: 57: waitmssp();
  2625  14D5  160A  118A  2299  160A  118A  	fcall	_waitmssp
  2626  14DA                     l240:	
  2627                           ;ds1307.h: 58: while(ACKSTAT){goto L;}
  2628                           
  2629  14DA  1683               	bsf	3,5	;RP0=1, select bank1
  2630  14DB  1303               	bcf	3,6	;RP1=0, select bank1
  2631  14DC  1B11               	btfsc	17,6	;volatile
  2632  14DD  2CDF               	goto	u2831
  2633  14DE  2CE0               	goto	u2830
  2634  14DF                     u2831:
  2635  14DF  2CCC               	goto	l239
  2636  14E0                     u2830:
  2637  14E0                     l2730:
  2638                           
  2639                           ;ds1307.h: 60: rtc_send(addr);
  2640  14E0  0872               	movf	rtc_read_byte@addr,w
  2641  14E1  160A  118A  233D  160A  118A  	fcall	_rtc_send
  2642  14E6                     l2732:
  2643                           
  2644                           ;ds1307.h: 61: rtc_res();
  2645  14E6  160A  118A  22BB  160A  118A  	fcall	_rtc_res
  2646  14EB                     l2734:
  2647                           
  2648                           ;ds1307.h: 62: rtc_send(0xD1);
  2649  14EB  30D1               	movlw	209
  2650  14EC  160A  118A  233D  160A  118A  	fcall	_rtc_send
  2651  14F1                     l2736:
  2652                           
  2653                           ;ds1307.h: 63: rec=rtc_read();
  2654  14F1  160A  118A  22F8  160A  118A  	fcall	_rtc_read
  2655  14F6  00F1               	movwf	??_rtc_read_byte
  2656  14F7  0871               	movf	??_rtc_read_byte,w
  2657  14F8  00F3               	movwf	rtc_read_byte@rec
  2658  14F9                     l2738:
  2659                           
  2660                           ;ds1307.h: 64: rtc_nak();
  2661  14F9  160A  118A  22D7  160A  118A  	fcall	_rtc_nak
  2662  14FE                     l2740:
  2663                           
  2664                           ;ds1307.h: 65: rtc_stop();
  2665  14FE  160A  118A  22C4  160A  118A  	fcall	_rtc_stop
  2666                           
  2667                           ;ds1307.h: 66: return rec;
  2668  1503  0873               	movf	rtc_read_byte@rec,w
  2669  1504                     l243:
  2670  1504  0008               	return
  2671  1505                     __end_of_rtc_read_byte:
  2672                           
  2673                           	psect	text12
  2674  12C4                     __ptext12:	
  2675 ;; *************** function _rtc_stop *****************
  2676 ;; Defined at:
  2677 ;;		line 75 in file "ds1307.h"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;		None
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;		None
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		status,2, status,0, pclath, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2691 ;;      Params:         0       0       0       0       0
  2692 ;;      Locals:         0       0       0       0       0
  2693 ;;      Temps:          0       0       0       0       0
  2694 ;;      Totals:         0       0       0       0       0
  2695 ;;Total ram usage:        0 bytes
  2696 ;; Hardware stack levels used: 1
  2697 ;; Hardware stack levels required when called: 1
  2698 ;; This function calls:
  2699 ;;		_waitmssp
  2700 ;; This function is called by:
  2701 ;;		_rtc_read_byte
  2702 ;;		_rtc_send_byte
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           
  2707                           ;psect for function _rtc_stop
  2708  12C4                     _rtc_stop:
  2709  12C4                     l1932:	
  2710                           ;incstack = 0
  2711                           ; Regs used in _rtc_stop: [status,2+status,0+pclath+cstack]
  2712                           
  2713                           
  2714                           ;ds1307.h: 77: PEN=1;
  2715  12C4  1683               	bsf	3,5	;RP0=1, select bank1
  2716  12C5  1303               	bcf	3,6	;RP1=0, select bank1
  2717  12C6  1511               	bsf	17,2	;volatile
  2718  12C7                     l1934:
  2719                           
  2720                           ;ds1307.h: 78: waitmssp();
  2721  12C7  160A  118A  2299  160A  118A  	fcall	_waitmssp
  2722  12CC                     l249:
  2723  12CC  0008               	return
  2724  12CD                     __end_of_rtc_stop:
  2725                           
  2726                           	psect	text13
  2727  133D                     __ptext13:	
  2728 ;; *************** function _rtc_send *****************
  2729 ;; Defined at:
  2730 ;;		line 30 in file "ds1307.h"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  a               1    wreg     unsigned char 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  a               1    0[COMMON] unsigned char 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2, status,0, pclath, cstack
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2744 ;;      Params:         0       0       0       0       0
  2745 ;;      Locals:         1       0       0       0       0
  2746 ;;      Temps:          0       0       0       0       0
  2747 ;;      Totals:         1       0       0       0       0
  2748 ;;Total ram usage:        1 bytes
  2749 ;; Hardware stack levels used: 1
  2750 ;; Hardware stack levels required when called: 1
  2751 ;; This function calls:
  2752 ;;		_waitmssp
  2753 ;; This function is called by:
  2754 ;;		_rtc_read_byte
  2755 ;;		_rtc_send_byte
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           
  2760                           ;psect for function _rtc_send
  2761  133D                     _rtc_send:
  2762                           
  2763                           ;incstack = 0
  2764                           ; Regs used in _rtc_send: [wreg+status,2+status,0+pclath+cstack]
  2765                           ;rtc_send@a stored from wreg
  2766  133D  00F0               	movwf	rtc_send@a
  2767  133E                     l1928:
  2768                           
  2769                           ;ds1307.h: 32: SSPBUF=a;
  2770  133E  0870               	movf	rtc_send@a,w
  2771  133F  1283               	bcf	3,5	;RP0=0, select bank0
  2772  1340  1303               	bcf	3,6	;RP1=0, select bank0
  2773  1341  0093               	movwf	19	;volatile
  2774  1342                     l1930:
  2775                           
  2776                           ;ds1307.h: 33: waitmssp();
  2777  1342  160A  118A  2299  160A  118A  	fcall	_waitmssp
  2778  1347                     l227:	
  2779                           ;ds1307.h: 34: while(ACKSTAT);
  2780                           
  2781  1347  1683               	bsf	3,5	;RP0=1, select bank1
  2782  1348  1303               	bcf	3,6	;RP1=0, select bank1
  2783  1349  1B11               	btfsc	17,6	;volatile
  2784  134A  2B4C               	goto	u1241
  2785  134B  2B4D               	goto	u1240
  2786  134C                     u1241:
  2787  134C  2B47               	goto	l227
  2788  134D                     u1240:
  2789  134D                     l230:
  2790  134D  0008               	return
  2791  134E                     __end_of_rtc_send:
  2792                           
  2793                           	psect	text14
  2794  12BB                     __ptext14:	
  2795 ;; *************** function _rtc_res *****************
  2796 ;; Defined at:
  2797 ;;		line 80 in file "ds1307.h"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		status,2, status,0, pclath, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2811 ;;      Params:         0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0
  2814 ;;      Totals:         0       0       0       0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used: 1
  2817 ;; Hardware stack levels required when called: 1
  2818 ;; This function calls:
  2819 ;;		_waitmssp
  2820 ;; This function is called by:
  2821 ;;		_rtc_read_byte
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           
  2826                           ;psect for function _rtc_res
  2827  12BB                     _rtc_res:
  2828  12BB                     l1944:	
  2829                           ;incstack = 0
  2830                           ; Regs used in _rtc_res: [status,2+status,0+pclath+cstack]
  2831                           
  2832                           
  2833                           ;ds1307.h: 82: RSEN=1;
  2834  12BB  1683               	bsf	3,5	;RP0=1, select bank1
  2835  12BC  1303               	bcf	3,6	;RP1=0, select bank1
  2836  12BD  1491               	bsf	17,1	;volatile
  2837  12BE                     l1946:
  2838                           
  2839                           ;ds1307.h: 83: waitmssp();
  2840  12BE  160A  118A  2299  160A  118A  	fcall	_waitmssp
  2841  12C3                     l252:
  2842  12C3  0008               	return
  2843  12C4                     __end_of_rtc_res:
  2844                           
  2845                           	psect	text15
  2846  12F8                     __ptext15:	
  2847 ;; *************** function _rtc_read *****************
  2848 ;; Defined at:
  2849 ;;		line 45 in file "ds1307.h"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      unsigned char 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, status,0, pclath, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2863 ;;      Params:         0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used: 1
  2869 ;; Hardware stack levels required when called: 1
  2870 ;; This function calls:
  2871 ;;		_waitmssp
  2872 ;; This function is called by:
  2873 ;;		_rtc_read_byte
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           
  2878                           ;psect for function _rtc_read
  2879  12F8                     _rtc_read:
  2880  12F8                     l1936:	
  2881                           ;incstack = 0
  2882                           ; Regs used in _rtc_read: [wreg+status,2+status,0+pclath+cstack]
  2883                           
  2884                           
  2885                           ;ds1307.h: 47: RCEN=1;
  2886  12F8  1683               	bsf	3,5	;RP0=1, select bank1
  2887  12F9  1303               	bcf	3,6	;RP1=0, select bank1
  2888  12FA  1591               	bsf	17,3	;volatile
  2889  12FB                     l1938:
  2890                           
  2891                           ;ds1307.h: 48: waitmssp();
  2892  12FB  160A  118A  2299  160A  118A  	fcall	_waitmssp
  2893  1300                     l1940:
  2894                           
  2895                           ;ds1307.h: 49: return SSPBUF;
  2896  1300  1283               	bcf	3,5	;RP0=0, select bank0
  2897  1301  1303               	bcf	3,6	;RP1=0, select bank0
  2898  1302  0813               	movf	19,w	;volatile
  2899  1303                     l236:
  2900  1303  0008               	return
  2901  1304                     __end_of_rtc_read:
  2902                           
  2903                           	psect	text16
  2904  12D7                     __ptext16:	
  2905 ;; *************** function _rtc_nak *****************
  2906 ;; Defined at:
  2907 ;;		line 91 in file "ds1307.h"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		status,2, status,0, pclath, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2921 ;;      Params:         0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used: 1
  2927 ;; Hardware stack levels required when called: 1
  2928 ;; This function calls:
  2929 ;;		_waitmssp
  2930 ;; This function is called by:
  2931 ;;		_rtc_read_byte
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           
  2936                           ;psect for function _rtc_nak
  2937  12D7                     _rtc_nak:
  2938  12D7                     l1948:	
  2939                           ;incstack = 0
  2940                           ; Regs used in _rtc_nak: [status,2+status,0+pclath+cstack]
  2941                           
  2942                           
  2943                           ;ds1307.h: 93: ACKDT=1;
  2944  12D7  1683               	bsf	3,5	;RP0=1, select bank1
  2945  12D8  1303               	bcf	3,6	;RP1=0, select bank1
  2946  12D9  1691               	bsf	17,5	;volatile
  2947                           
  2948                           ;ds1307.h: 94: ACKEN=1;
  2949  12DA  1611               	bsf	17,4	;volatile
  2950  12DB                     l1950:
  2951                           
  2952                           ;ds1307.h: 95: waitmssp();
  2953  12DB  160A  118A  2299  160A  118A  	fcall	_waitmssp
  2954  12E0                     l258:
  2955  12E0  0008               	return
  2956  12E1                     __end_of_rtc_nak:
  2957                           
  2958                           	psect	text17
  2959  1299                     __ptext17:	
  2960 ;; *************** function _waitmssp *****************
  2961 ;; Defined at:
  2962 ;;		line 25 in file "ds1307.h"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		None
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2976 ;;      Params:         0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0
  2979 ;;      Totals:         0       0       0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used: 1
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_rtc_send
  2986 ;;		_rtc_read
  2987 ;;		_rtc_read_byte
  2988 ;;		_rtc_stop
  2989 ;;		_rtc_res
  2990 ;;		_rtc_nak
  2991 ;;		_rtc_start
  2992 ;;		_rtc_ack
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           
  2997                           ;psect for function _waitmssp
  2998  1299                     _waitmssp:
  2999  1299                     l1888:	
  3000                           ;incstack = 0
  3001                           ; Regs used in _waitmssp: []
  3002                           
  3003  1299                     l221:	
  3004                           ;ds1307.h: 27: while(!SSPIF);
  3005                           
  3006  1299  1283               	bcf	3,5	;RP0=0, select bank0
  3007  129A  1303               	bcf	3,6	;RP1=0, select bank0
  3008  129B  1D8C               	btfss	12,3	;volatile
  3009  129C  2A9E               	goto	u1171
  3010  129D  2A9F               	goto	u1170
  3011  129E                     u1171:
  3012  129E  2A99               	goto	l221
  3013  129F                     u1170:
  3014  129F                     l223:
  3015                           
  3016                           ;ds1307.h: 28: SSPIF=0;
  3017  129F  118C               	bcf	12,3	;volatile
  3018  12A0                     l224:
  3019  12A0  0008               	return
  3020  12A1                     __end_of_waitmssp:
  3021                           
  3022                           	psect	text18
  3023  134E                     __ptext18:	
  3024 ;; *************** function _print_serialnumber *****************
  3025 ;; Defined at:
  3026 ;;		line 132 in file "main.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0
  3043 ;;      Totals:         0       0       0       0       0
  3044 ;;Total ram usage:        0 bytes
  3045 ;; Hardware stack levels used: 1
  3046 ;; Hardware stack levels required when called: 2
  3047 ;; This function calls:
  3048 ;;		_tx
  3049 ;;		_tx_sn
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _print_serialnumber
  3057  134E                     _print_serialnumber:
  3058  134E                     l2916:	
  3059                           ;incstack = 0
  3060                           ; Regs used in _print_serialnumber: [wreg+status,2+status,0+pclath+cstack]
  3061                           
  3062                           
  3063                           ;main.c: 134: tx_sn(sn);
  3064  134E  1683               	bsf	3,5	;RP0=1, select bank1
  3065  134F  1303               	bcf	3,6	;RP1=0, select bank1
  3066  1350  086E               	movf	(_sn+1)^(0+128),w
  3067  1351  00FA               	movwf	tx_sn@val+1
  3068  1352  086D               	movf	_sn^(0+128),w
  3069  1353  00F9               	movwf	tx_sn@val
  3070  1354  120A  118A  210B  160A  118A  	fcall	_tx_sn
  3071                           
  3072                           ;main.c: 135: tx(')');
  3073  1359  3029               	movlw	41
  3074  135A  160A  118A  22E1  160A  118A  	fcall	_tx
  3075  135F                     l387:
  3076  135F  0008               	return
  3077  1360                     __end_of_print_serialnumber:
  3078                           
  3079                           	psect	text19
  3080  0BD6                     __ptext19:	
  3081 ;; *************** function _print_dht11data *****************
  3082 ;; Defined at:
  3083 ;;		line 162 in file "main.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0       0       0       0       0
  3098 ;;      Locals:         0       0       0       0       0
  3099 ;;      Temps:          0       8       0       0       0
  3100 ;;      Totals:         0       8       0       0       0
  3101 ;;Total ram usage:        8 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; Hardware stack levels required when called: 2
  3104 ;; This function calls:
  3105 ;;		_CheckResponse
  3106 ;;		_LCD_Command
  3107 ;;		_ReadData
  3108 ;;		_StartSignal
  3109 ;;		_show
  3110 ;;		_show_multidigits
  3111 ;;		_tx
  3112 ;;		_tx_sn
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           
  3119                           ;psect for function _print_dht11data
  3120  0BD6                     _print_dht11data:
  3121  0BD6                     l2962:	
  3122                           ;incstack = 0
  3123                           ; Regs used in _print_dht11data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3124                           
  3125                           
  3126                           ;main.c: 164: StartSignal();
  3127  0BD6  160A  118A  238C  120A  158A  	fcall	_StartSignal
  3128                           
  3129                           ;main.c: 165: CheckResponse();
  3130  0BDB  160A  118A  2400  120A  158A  	fcall	_CheckResponse
  3131  0BE0                     l2964:
  3132                           
  3133                           ;main.c: 166: if(Check == 1)
  3134  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0BE2  0342               	decf	_Check,w
  3137  0BE3  1D03               	btfss	3,2
  3138  0BE4  2BE6               	goto	u3261
  3139  0BE5  2BE7               	goto	u3260
  3140  0BE6                     u3261:
  3141  0BE6  2C4F               	goto	l2972
  3142  0BE7                     u3260:
  3143  0BE7                     l2966:
  3144                           
  3145                           ;main.c: 167: {;main.c: 168: RH_byte1 = ReadData();
  3146  0BE7  160A  118A  25C0  120A  158A  	fcall	_ReadData
  3147  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  3148  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  3149  0BEE  00D5               	movwf	??_print_dht11data
  3150  0BEF  0855               	movf	??_print_dht11data,w
  3151  0BF0  00BF               	movwf	_RH_byte1
  3152                           
  3153                           ;main.c: 169: RH_byte2 = ReadData();
  3154  0BF1  160A  118A  25C0  120A  158A  	fcall	_ReadData
  3155  0BF6  1283               	bcf	3,5	;RP0=0, select bank0
  3156  0BF7  1303               	bcf	3,6	;RP1=0, select bank0
  3157  0BF8  00D5               	movwf	??_print_dht11data
  3158  0BF9  0855               	movf	??_print_dht11data,w
  3159  0BFA  00BE               	movwf	_RH_byte2
  3160                           
  3161                           ;main.c: 170: T_byte1 = ReadData();
  3162  0BFB  160A  118A  25C0  120A  158A  	fcall	_ReadData
  3163  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0C02  00D5               	movwf	??_print_dht11data
  3166  0C03  0855               	movf	??_print_dht11data,w
  3167  0C04  00C1               	movwf	_T_byte1
  3168                           
  3169                           ;main.c: 171: T_byte2 = ReadData();
  3170  0C05  160A  118A  25C0  120A  158A  	fcall	_ReadData
  3171  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0C0C  00D5               	movwf	??_print_dht11data
  3174  0C0D  0855               	movf	??_print_dht11data,w
  3175  0C0E  00C0               	movwf	_T_byte2
  3176                           
  3177                           ;main.c: 172: Sum = ReadData();
  3178  0C0F  160A  118A  25C0  120A  158A  	fcall	_ReadData
  3179  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  3180  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  3181  0C16  00D5               	movwf	??_print_dht11data
  3182  0C17  01D6               	clrf	??_print_dht11data+1
  3183  0C18  0855               	movf	??_print_dht11data,w
  3184  0C19  00B0               	movwf	_Sum
  3185  0C1A  0856               	movf	??_print_dht11data+1,w
  3186  0C1B  00B1               	movwf	_Sum+1
  3187  0C1C                     l2968:
  3188                           
  3189                           ;main.c: 173: if(Sum == ((RH_byte1+RH_byte2+T_byte1+T_byte2) & 0XFF))
  3190  0C1C  083F               	movf	_RH_byte1,w
  3191  0C1D  073E               	addwf	_RH_byte2,w
  3192  0C1E  00D5               	movwf	??_print_dht11data
  3193  0C1F  01D6               	clrf	??_print_dht11data+1
  3194  0C20  0DD6               	rlf	??_print_dht11data+1,f
  3195  0C21  0841               	movf	_T_byte1,w
  3196  0C22  0755               	addwf	??_print_dht11data,w
  3197  0C23  00D7               	movwf	??_print_dht11data+2
  3198  0C24  3000               	movlw	0
  3199  0C25  1803               	skipnc
  3200  0C26  3001               	movlw	1
  3201  0C27  0756               	addwf	??_print_dht11data+1,w
  3202  0C28  00D8               	movwf	??_print_dht11data+3
  3203  0C29  0840               	movf	_T_byte2,w
  3204  0C2A  0757               	addwf	??_print_dht11data+2,w
  3205  0C2B  00D9               	movwf	??_print_dht11data+4
  3206  0C2C  3000               	movlw	0
  3207  0C2D  1803               	skipnc
  3208  0C2E  3001               	movlw	1
  3209  0C2F  0758               	addwf	??_print_dht11data+3,w
  3210  0C30  00DA               	movwf	??_print_dht11data+5
  3211  0C31  30FF               	movlw	255
  3212  0C32  0559               	andwf	??_print_dht11data+4,w
  3213  0C33  00DB               	movwf	??_print_dht11data+6
  3214  0C34  3000               	movlw	0
  3215  0C35  055A               	andwf	??_print_dht11data+5,w
  3216  0C36  00DC               	movwf	??_print_dht11data+7
  3217  0C37  0831               	movf	_Sum+1,w
  3218  0C38  065C               	xorwf	??_print_dht11data+7,w
  3219  0C39  1D03               	skipz
  3220  0C3A  2C3D               	goto	u3275
  3221  0C3B  0830               	movf	_Sum,w
  3222  0C3C  065B               	xorwf	??_print_dht11data+6,w
  3223  0C3D                     u3275:
  3224  0C3D  1D03               	skipz
  3225  0C3E  2C40               	goto	u3271
  3226  0C3F  2C41               	goto	u3270
  3227  0C40                     u3271:
  3228  0C40  2C4F               	goto	l2972
  3229  0C41                     u3270:
  3230  0C41                     l2970:
  3231                           
  3232                           ;main.c: 174: {;main.c: 175: Temp = T_byte1;
  3233  0C41  0841               	movf	_T_byte1,w
  3234  0C42  00D5               	movwf	??_print_dht11data
  3235  0C43  01D6               	clrf	??_print_dht11data+1
  3236  0C44  0855               	movf	??_print_dht11data,w
  3237  0C45  00B4               	movwf	_Temp
  3238  0C46  0856               	movf	??_print_dht11data+1,w
  3239  0C47  00B5               	movwf	_Temp+1
  3240                           
  3241                           ;main.c: 176: RH = RH_byte1;
  3242  0C48  083F               	movf	_RH_byte1,w
  3243  0C49  00D5               	movwf	??_print_dht11data
  3244  0C4A  01D6               	clrf	??_print_dht11data+1
  3245  0C4B  0855               	movf	??_print_dht11data,w
  3246  0C4C  00B2               	movwf	_RH
  3247  0C4D  0856               	movf	??_print_dht11data+1,w
  3248  0C4E  00B3               	movwf	_RH+1
  3249  0C4F                     l2972:
  3250                           
  3251                           ;main.c: 177: };main.c: 178: };main.c: 179: LCD_Command(0x94);
  3252  0C4F  3094               	movlw	148
  3253  0C50  160A  118A  2540  120A  158A  	fcall	_LCD_Command
  3254  0C55                     l2974:
  3255                           
  3256                           ;main.c: 180: show("Temp:");
  3257  0C55  3053               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3258  0C56  160A  118A  23E1  120A  158A  	fcall	_show
  3259  0C5B                     l2976:
  3260                           
  3261                           ;main.c: 181: LCD_Command(0x99);
  3262  0C5B  3099               	movlw	153
  3263  0C5C  160A  118A  2540  120A  158A  	fcall	_LCD_Command
  3264  0C61                     l2978:
  3265                           
  3266                           ;main.c: 182: show_multidigits (Temp);
  3267  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0C63  0835               	movf	_Temp+1,w
  3270  0C64  00FA               	movwf	show_multidigits@val+1
  3271  0C65  0834               	movf	_Temp,w
  3272  0C66  00F9               	movwf	show_multidigits@val
  3273  0C67  120A  158A  266E  120A  158A  	fcall	_show_multidigits
  3274  0C6C                     l2980:
  3275                           
  3276                           ;main.c: 183: tx_sn(Temp);
  3277  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  3279  0C6E  0835               	movf	_Temp+1,w
  3280  0C6F  00FA               	movwf	tx_sn@val+1
  3281  0C70  0834               	movf	_Temp,w
  3282  0C71  00F9               	movwf	tx_sn@val
  3283  0C72  120A  118A  210B  120A  158A  	fcall	_tx_sn
  3284  0C77                     l2982:
  3285                           
  3286                           ;main.c: 184: tx(',');
  3287  0C77  302C               	movlw	44
  3288  0C78  160A  118A  22E1  120A  158A  	fcall	_tx
  3289  0C7D                     l2984:
  3290                           
  3291                           ;main.c: 185: LCD_Command(0x9D);
  3292  0C7D  309D               	movlw	157
  3293  0C7E  160A  118A  2540  120A  158A  	fcall	_LCD_Command
  3294  0C83                     l2986:
  3295                           
  3296                           ;main.c: 186: show("Humi:");
  3297  0C83  304D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3298  0C84  160A  118A  23E1  120A  158A  	fcall	_show
  3299  0C89                     l2988:
  3300                           
  3301                           ;main.c: 187: LCD_Command(0xA2);
  3302  0C89  30A2               	movlw	162
  3303  0C8A  160A  118A  2540  120A  158A  	fcall	_LCD_Command
  3304  0C8F                     l2990:
  3305                           
  3306                           ;main.c: 188: show_multidigits(RH);
  3307  0C8F  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0C90  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0C91  0833               	movf	_RH+1,w
  3310  0C92  00FA               	movwf	show_multidigits@val+1
  3311  0C93  0832               	movf	_RH,w
  3312  0C94  00F9               	movwf	show_multidigits@val
  3313  0C95  120A  158A  266E  120A  158A  	fcall	_show_multidigits
  3314  0C9A                     l2992:
  3315                           
  3316                           ;main.c: 189: tx_sn(RH);
  3317  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  3318  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  3319  0C9C  0833               	movf	_RH+1,w
  3320  0C9D  00FA               	movwf	tx_sn@val+1
  3321  0C9E  0832               	movf	_RH,w
  3322  0C9F  00F9               	movwf	tx_sn@val
  3323  0CA0  120A  118A  210B  120A  158A  	fcall	_tx_sn
  3324  0CA5                     l2994:
  3325                           
  3326                           ;main.c: 190: tx(',');
  3327  0CA5  302C               	movlw	44
  3328  0CA6  160A  118A  22E1  120A  158A  	fcall	_tx
  3329  0CAB                     l402:
  3330  0CAB  0008               	return
  3331  0CAC                     __end_of_print_dht11data:
  3332                           
  3333                           	psect	text20
  3334  138C                     __ptext20:	
  3335 ;; *************** function _StartSignal *****************
  3336 ;; Defined at:
  3337 ;;		line 7 in file "dht11.h"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         0       0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0
  3353 ;;      Temps:          2       0       0       0       0
  3354 ;;      Totals:         2       0       0       0       0
  3355 ;;Total ram usage:        2 bytes
  3356 ;; Hardware stack levels used: 1
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_print_dht11data
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           
  3365                           ;psect for function _StartSignal
  3366  138C                     _StartSignal:
  3367  138C                     l2680:	
  3368                           ;incstack = 0
  3369                           ; Regs used in _StartSignal: [wreg]
  3370                           
  3371                           
  3372                           ;dht11.h: 9: TRISDbits.TRISD0 = 0;
  3373  138C  1683               	bsf	3,5	;RP0=1, select bank1
  3374  138D  1303               	bcf	3,6	;RP1=0, select bank1
  3375  138E  1008               	bcf	8,0	;volatile
  3376                           
  3377                           ;dht11.h: 10: PORTDbits.RD0 = 0;
  3378  138F  1283               	bcf	3,5	;RP0=0, select bank0
  3379  1390  1303               	bcf	3,6	;RP1=0, select bank0
  3380  1391  1008               	bcf	8,0	;volatile
  3381  1392                     l2682:
  3382                           
  3383                           ;dht11.h: 11: _delay((unsigned long)((25)*(20000000/4000.0)));
  3384  1392  30A3               	movlw	163
  3385  1393  00F1               	movwf	??_StartSignal+1
  3386  1394  3055               	movlw	85
  3387  1395  00F0               	movwf	??_StartSignal
  3388  1396                     u4327:
  3389  1396  0BF0               	decfsz	??_StartSignal,f
  3390  1397  2B96               	goto	u4327
  3391  1398  0BF1               	decfsz	??_StartSignal+1,f
  3392  1399  2B96               	goto	u4327
  3393  139A                     l2684:
  3394                           
  3395                           ;dht11.h: 12: PORTDbits.RD0 = 1;
  3396  139A  1283               	bcf	3,5	;RP0=0, select bank0
  3397  139B  1303               	bcf	3,6	;RP1=0, select bank0
  3398  139C  1408               	bsf	8,0	;volatile
  3399                           
  3400                           ;dht11.h: 13: _delay((unsigned long)((30)*(20000000/4000000.0)));
  3401  139D  3031               	movlw	49
  3402  139E  00F0               	movwf	??_StartSignal
  3403  139F                     u4337:
  3404  139F  0BF0               	decfsz	??_StartSignal,f
  3405  13A0  2B9F               	goto	u4337
  3406  13A1  2BA2               	nop2
  3407  13A2                     l2686:
  3408                           
  3409                           ;dht11.h: 14: TRISDbits.TRISD0 = 1;
  3410  13A2  1683               	bsf	3,5	;RP0=1, select bank1
  3411  13A3  1303               	bcf	3,6	;RP1=0, select bank1
  3412  13A4  1408               	bsf	8,0	;volatile
  3413  13A5                     l183:
  3414  13A5  0008               	return
  3415  13A6                     __end_of_StartSignal:
  3416                           
  3417                           	psect	text21
  3418  15C0                     __ptext21:	
  3419 ;; *************** function _ReadData *****************
  3420 ;; Defined at:
  3421 ;;		line 32 in file "dht11.h"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  j               1    3[COMMON] unsigned char 
  3426 ;;  i               1    2[COMMON] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      unsigned char 
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3436 ;;      Params:         0       0       0       0       0
  3437 ;;      Locals:         2       0       0       0       0
  3438 ;;      Temps:          2       0       0       0       0
  3439 ;;      Totals:         4       0       0       0       0
  3440 ;;Total ram usage:        4 bytes
  3441 ;; Hardware stack levels used: 1
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_print_dht11data
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _ReadData
  3451  15C0                     _ReadData:
  3452  15C0                     l2702:	
  3453                           ;incstack = 0
  3454                           ; Regs used in _ReadData: [wreg+status,2+status,0]
  3455                           
  3456                           
  3457                           ;dht11.h: 34: char i, j;;dht11.h: 35: for(j = 0; j < 8; j++)
  3458  15C0  01F3               	clrf	ReadData@j
  3459  15C1                     l193:
  3460  15C1  1283               	bcf	3,5	;RP0=0, select bank0
  3461  15C2  1303               	bcf	3,6	;RP1=0, select bank0
  3462  15C3  1C08               	btfss	8,0	;volatile
  3463  15C4  2DC6               	goto	u2771
  3464  15C5  2DC7               	goto	u2770
  3465  15C6                     u2771:
  3466  15C6  2DC1               	goto	l193
  3467  15C7                     u2770:
  3468  15C7                     l2708:
  3469                           
  3470                           ;dht11.h: 38: _delay((unsigned long)((30)*(20000000/4000000.0)));
  3471  15C7  3031               	movlw	49
  3472  15C8  00F0               	movwf	??_ReadData
  3473  15C9                     u4347:
  3474  15C9  0BF0               	decfsz	??_ReadData,f
  3475  15CA  2DC9               	goto	u4347
  3476  15CB  2DCC               	nop2
  3477  15CC                     l2710:
  3478                           
  3479                           ;dht11.h: 39: if(PORTDbits.RD0 == 0)
  3480  15CC  1283               	bcf	3,5	;RP0=0, select bank0
  3481  15CD  1303               	bcf	3,6	;RP1=0, select bank0
  3482  15CE  1808               	btfsc	8,0	;volatile
  3483  15CF  2DD1               	goto	u2781
  3484  15D0  2DD2               	goto	u2780
  3485  15D1                     u2781:
  3486  15D1  2DE3               	goto	l2714
  3487  15D2                     u2780:
  3488  15D2                     l2712:
  3489                           
  3490                           ;dht11.h: 40: i&= ~(1<<(7 - j));
  3491  15D2  3001               	movlw	1
  3492  15D3  00F0               	movwf	??_ReadData
  3493  15D4  0873               	movf	ReadData@j,w
  3494  15D5  3C07               	sublw	7
  3495  15D6  3E01               	addlw	1
  3496  15D7  2DDA               	goto	u2794
  3497  15D8                     u2795:
  3498  15D8  1003               	clrc
  3499  15D9  0DF0               	rlf	??_ReadData,f
  3500  15DA                     u2794:
  3501  15DA  3EFF               	addlw	-1
  3502  15DB  1D03               	skipz
  3503  15DC  2DD8               	goto	u2795
  3504  15DD  0870               	movf	??_ReadData,w
  3505  15DE  3AFF               	xorlw	255
  3506  15DF  00F1               	movwf	??_ReadData+1
  3507  15E0  0871               	movf	??_ReadData+1,w
  3508  15E1  05F2               	andwf	ReadData@i,f
  3509  15E2  2DF6               	goto	l2716
  3510  15E3                     l2714:
  3511                           
  3512                           ;dht11.h: 41: else;dht11.h: 42: {;dht11.h: 43: i|= (1 << (7 - j));
  3513  15E3  3001               	movlw	1
  3514  15E4  00F0               	movwf	??_ReadData
  3515  15E5  0873               	movf	ReadData@j,w
  3516  15E6  3C07               	sublw	7
  3517  15E7  3E01               	addlw	1
  3518  15E8  2DEB               	goto	u2804
  3519  15E9                     u2805:
  3520  15E9  1003               	clrc
  3521  15EA  0DF0               	rlf	??_ReadData,f
  3522  15EB                     u2804:
  3523  15EB  3EFF               	addlw	-1
  3524  15EC  1D03               	skipz
  3525  15ED  2DE9               	goto	u2805
  3526  15EE  0870               	movf	??_ReadData,w
  3527  15EF  00F1               	movwf	??_ReadData+1
  3528  15F0  0871               	movf	??_ReadData+1,w
  3529  15F1  04F2               	iorwf	ReadData@i,f
  3530  15F2                     l198:	
  3531                           ;dht11.h: 44: while(PORTDbits.RD0);
  3532                           
  3533  15F2  1808               	btfsc	8,0	;volatile
  3534  15F3  2DF5               	goto	u2811
  3535  15F4  2DF6               	goto	u2810
  3536  15F5                     u2811:
  3537  15F5  2DF2               	goto	l198
  3538  15F6                     u2810:
  3539  15F6                     l2716:
  3540  15F6  3001               	movlw	1
  3541  15F7  00F0               	movwf	??_ReadData
  3542  15F8  0870               	movf	??_ReadData,w
  3543  15F9  07F3               	addwf	ReadData@j,f
  3544  15FA                     l2718:
  3545  15FA  3008               	movlw	8
  3546  15FB  0273               	subwf	ReadData@j,w
  3547  15FC  1C03               	skipc
  3548  15FD  2DFF               	goto	u2821
  3549  15FE  2E00               	goto	u2820
  3550  15FF                     u2821:
  3551  15FF  2DC1               	goto	l193
  3552  1600                     u2820:
  3553  1600                     l2720:
  3554                           
  3555                           ;dht11.h: 45: };dht11.h: 46: };dht11.h: 47: return i;
  3556  1600  0872               	movf	ReadData@i,w
  3557  1601                     l201:
  3558  1601  0008               	return
  3559  1602                     __end_of_ReadData:
  3560                           
  3561                           	psect	text22
  3562  1400                     __ptext22:	
  3563 ;; *************** function _CheckResponse *****************
  3564 ;; Defined at:
  3565 ;;		line 17 in file "dht11.h"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3579 ;;      Params:         0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0
  3581 ;;      Temps:          1       0       0       0       0
  3582 ;;      Totals:         1       0       0       0       0
  3583 ;;Total ram usage:        1 bytes
  3584 ;; Hardware stack levels used: 1
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_print_dht11data
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           
  3593                           ;psect for function _CheckResponse
  3594  1400                     _CheckResponse:
  3595  1400                     l2688:	
  3596                           ;incstack = 0
  3597                           ; Regs used in _CheckResponse: [wreg+status,2]
  3598                           
  3599                           
  3600                           ;dht11.h: 19: Check = 0;
  3601  1400  1283               	bcf	3,5	;RP0=0, select bank0
  3602  1401  1303               	bcf	3,6	;RP1=0, select bank0
  3603  1402  01C2               	clrf	_Check
  3604  1403                     l2690:
  3605                           
  3606                           ;dht11.h: 20: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3607  1403  3042               	movlw	66
  3608  1404  00F0               	movwf	??_CheckResponse
  3609  1405                     u4357:
  3610  1405  0BF0               	decfsz	??_CheckResponse,f
  3611  1406  2C05               	goto	u4357
  3612  1407  0000               	nop
  3613  1408                     l2692:
  3614                           
  3615                           ;dht11.h: 21: if (PORTDbits.RD0 == 0)
  3616  1408  1283               	bcf	3,5	;RP0=0, select bank0
  3617  1409  1303               	bcf	3,6	;RP1=0, select bank0
  3618  140A  1808               	btfsc	8,0	;volatile
  3619  140B  2C0D               	goto	u2751
  3620  140C  2C0E               	goto	u2750
  3621  140D                     u2751:
  3622  140D  2C20               	goto	l188
  3623  140E                     u2750:
  3624  140E                     l2694:
  3625                           
  3626                           ;dht11.h: 22: {;dht11.h: 23: _delay((unsigned long)((80)*(20000000/4000000.0)));
  3627  140E  3085               	movlw	133
  3628  140F  00F0               	movwf	??_CheckResponse
  3629  1410                     u4367:
  3630  1410  0BF0               	decfsz	??_CheckResponse,f
  3631  1411  2C10               	goto	u4367
  3632  1412                     l2696:
  3633                           
  3634                           ;dht11.h: 24: if (PORTDbits.RD0 == 1)
  3635  1412  1283               	bcf	3,5	;RP0=0, select bank0
  3636  1413  1303               	bcf	3,6	;RP1=0, select bank0
  3637  1414  1C08               	btfss	8,0	;volatile
  3638  1415  2C17               	goto	u2761
  3639  1416  2C18               	goto	u2760
  3640  1417                     u2761:
  3641  1417  2C20               	goto	l188
  3642  1418                     u2760:
  3643  1418                     l2698:
  3644                           
  3645                           ;dht11.h: 25: {;dht11.h: 26: _delay((unsigned long)((50)*(20000000/4000000.0)));
  3646  1418  3053               	movlw	83
  3647  1419  00F0               	movwf	??_CheckResponse
  3648  141A                     u4377:
  3649  141A  0BF0               	decfsz	??_CheckResponse,f
  3650  141B  2C1A               	goto	u4377
  3651  141C                     l2700:
  3652                           
  3653                           ;dht11.h: 27: Check = 1;
  3654  141C  1283               	bcf	3,5	;RP0=0, select bank0
  3655  141D  1303               	bcf	3,6	;RP1=0, select bank0
  3656  141E  01C2               	clrf	_Check
  3657  141F  0AC2               	incf	_Check,f
  3658  1420                     l188:
  3659  1420  0008               	return
  3660  1421                     __end_of_CheckResponse:
  3661                           
  3662                           	psect	text23
  3663  0875                     __ptext23:	
  3664 ;; *************** function _print_analogvoltages *****************
  3665 ;; Defined at:
  3666 ;;		line 138 in file "main.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  j               1   34[BANK0 ] unsigned char 
  3671 ;;  i               1   33[BANK0 ] unsigned char 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3681 ;;      Params:         0       0       0       0       0
  3682 ;;      Locals:         0       2       0       0       0
  3683 ;;      Temps:          0       3       0       0       0
  3684 ;;      Totals:         0       5       0       0       0
  3685 ;;Total ram usage:        5 bytes
  3686 ;; Hardware stack levels used: 1
  3687 ;; Hardware stack levels required when called: 2
  3688 ;; This function calls:
  3689 ;;		_LCD_Char
  3690 ;;		_LCD_num
  3691 ;;		_tx
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           
  3698                           ;psect for function _print_analogvoltages
  3699  0875                     _print_analogvoltages:
  3700  0875                     l2926:	
  3701                           ;incstack = 0
  3702                           ; Regs used in _print_analogvoltages: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3703                           
  3704                           
  3705                           ;main.c: 140: for (unsigned char i=0;i<4;i++)
  3706  0875  1283               	bcf	3,5	;RP0=0, select bank0
  3707  0876  1303               	bcf	3,6	;RP1=0, select bank0
  3708  0877  01E8               	clrf	print_analogvoltages@i
  3709  0878                     l2932:
  3710                           
  3711                           ;main.c: 141: {;main.c: 142: LCD_num(AV[i]);
  3712  0878  0868               	movf	print_analogvoltages@i,w
  3713  0879  00E5               	movwf	??_print_analogvoltages
  3714  087A  0765               	addwf	??_print_analogvoltages,w
  3715  087B  3E90               	addlw	(low (_AV| (0+256)))& (0+255)
  3716  087C  0084               	movwf	4
  3717  087D  1783               	bsf	3,7	;select IRP bank3
  3718  087E  0800               	movf	0,w
  3719  087F  00E6               	movwf	??_print_analogvoltages+1
  3720  0880  0A84               	incf	4,f
  3721  0881  0800               	movf	0,w
  3722  0882  00E7               	movwf	??_print_analogvoltages+2
  3723  0883  0866               	movf	??_print_analogvoltages+1,w
  3724  0884  00D5               	movwf	LCD_num@val
  3725  0885  0867               	movf	??_print_analogvoltages+2,w
  3726  0886  00D6               	movwf	LCD_num@val+1
  3727  0887  01D7               	clrf	LCD_num@val+2
  3728  0888  01D8               	clrf	LCD_num@val+3
  3729  0889  120A  158A  2180  120A  158A  	fcall	_LCD_num
  3730  088E                     l2934:
  3731                           
  3732                           ;main.c: 143: LCD_Char(' ');
  3733  088E  3020               	movlw	32
  3734  088F  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  3735  0894                     l2936:
  3736                           
  3737                           ;main.c: 144: for (unsigned char j=0;j<3;j++)
  3738  0894  1283               	bcf	3,5	;RP0=0, select bank0
  3739  0895  1303               	bcf	3,6	;RP1=0, select bank0
  3740  0896  01E9               	clrf	print_analogvoltages@j
  3741  0897                     l2942:
  3742                           
  3743                           ;main.c: 145: {;main.c: 146: tx((avv[j]+0x30));
  3744  0897  0869               	movf	print_analogvoltages@j,w
  3745  0898  3EDC               	addlw	(low (_avv| 0))& (0+255)
  3746  0899  0084               	movwf	4
  3747  089A  1383               	bcf	3,7	;select IRP bank1
  3748  089B  0800               	movf	0,w
  3749  089C  3E30               	addlw	48
  3750  089D  160A  118A  22E1  120A  158A  	fcall	_tx
  3751  08A2                     l2944:
  3752                           
  3753                           ;main.c: 147: if (j == 0)
  3754  08A2  1283               	bcf	3,5	;RP0=0, select bank0
  3755  08A3  1303               	bcf	3,6	;RP1=0, select bank0
  3756  08A4  0869               	movf	print_analogvoltages@j,w
  3757  08A5  1D03               	btfss	3,2
  3758  08A6  28A8               	goto	u3221
  3759  08A7  28A9               	goto	u3220
  3760  08A8                     u3221:
  3761  08A8  28B0               	goto	l2948
  3762  08A9                     u3220:
  3763  08A9                     l2946:
  3764                           
  3765                           ;main.c: 148: {;main.c: 149: tx('.');
  3766  08A9  302E               	movlw	46
  3767  08AA  160A  118A  22E1  120A  158A  	fcall	_tx
  3768                           
  3769                           ;main.c: 150: }
  3770  08AF  28BC               	goto	l2952
  3771  08B0                     l2948:
  3772                           
  3773                           ;main.c: 151: else if (j == 2)
  3774  08B0  3002               	movlw	2
  3775  08B1  0669               	xorwf	print_analogvoltages@j,w
  3776  08B2  1D03               	btfss	3,2
  3777  08B3  28B5               	goto	u3231
  3778  08B4  28B6               	goto	u3230
  3779  08B5                     u3231:
  3780  08B5  28BC               	goto	l2952
  3781  08B6                     u3230:
  3782  08B6                     l2950:
  3783                           
  3784                           ;main.c: 152: {;main.c: 153: tx(',');
  3785  08B6  302C               	movlw	44
  3786  08B7  160A  118A  22E1  120A  158A  	fcall	_tx
  3787  08BC                     l2952:
  3788  08BC  3001               	movlw	1
  3789  08BD  1283               	bcf	3,5	;RP0=0, select bank0
  3790  08BE  1303               	bcf	3,6	;RP1=0, select bank0
  3791  08BF  00E5               	movwf	??_print_analogvoltages
  3792  08C0  0865               	movf	??_print_analogvoltages,w
  3793  08C1  07E9               	addwf	print_analogvoltages@j,f
  3794  08C2                     l2954:
  3795  08C2  3003               	movlw	3
  3796  08C3  0269               	subwf	print_analogvoltages@j,w
  3797  08C4  1C03               	skipc
  3798  08C5  28C7               	goto	u3241
  3799  08C6  28C8               	goto	u3240
  3800  08C7                     u3241:
  3801  08C7  2897               	goto	l2942
  3802  08C8                     u3240:
  3803  08C8                     l2956:
  3804                           
  3805                           ;main.c: 154: };main.c: 155: };main.c: 157: _delay((unsigned long)((100)*(20000000/4000.
      +                          0)));
  3806  08C8  3003               	movlw	3
  3807  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  3808  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  3809  08CB  00E7               	movwf	??_print_analogvoltages+2
  3810  08CC  308A               	movlw	138
  3811  08CD  00E6               	movwf	??_print_analogvoltages+1
  3812  08CE  3055               	movlw	85
  3813  08CF  00E5               	movwf	??_print_analogvoltages
  3814  08D0                     u4387:
  3815  08D0  0BE5               	decfsz	??_print_analogvoltages,f
  3816  08D1  28D0               	goto	u4387
  3817  08D2  0BE6               	decfsz	??_print_analogvoltages+1,f
  3818  08D3  28D0               	goto	u4387
  3819  08D4  0BE7               	decfsz	??_print_analogvoltages+2,f
  3820  08D5  28D0               	goto	u4387
  3821  08D6                     l2958:
  3822  08D6  3001               	movlw	1
  3823  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  3824  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  3825  08D9  00E5               	movwf	??_print_analogvoltages
  3826  08DA  0865               	movf	??_print_analogvoltages,w
  3827  08DB  07E8               	addwf	print_analogvoltages@i,f
  3828  08DC                     l2960:
  3829  08DC  3004               	movlw	4
  3830  08DD  0268               	subwf	print_analogvoltages@i,w
  3831  08DE  1C03               	skipc
  3832  08DF  28E1               	goto	u3251
  3833  08E0  28E2               	goto	u3250
  3834  08E1                     u3251:
  3835  08E1  2878               	goto	l2932
  3836  08E2                     u3250:
  3837  08E2                     l397:
  3838  08E2  0008               	return
  3839  08E3                     __end_of_print_analogvoltages:
  3840                           
  3841                           	psect	text24
  3842  0980                     __ptext24:	
  3843 ;; *************** function _LCD_num *****************
  3844 ;; Defined at:
  3845 ;;		line 58 in file "lcd4bit.h"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  val             4   14[BANK0 ] long 
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;  remainder       2   28[BANK0 ] unsigned int 
  3850 ;;  result1         2   26[BANK0 ] unsigned int 
  3851 ;;  result          2   24[BANK0 ] unsigned int 
  3852 ;;  digit3          2   22[BANK0 ] unsigned int 
  3853 ;;  digit2          2   20[BANK0 ] unsigned int 
  3854 ;;  digit1          2   18[BANK0 ] unsigned int 
  3855 ;;  calb_val        2    0        int 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, pclath, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3865 ;;      Params:         0       4       0       0       0
  3866 ;;      Locals:         0      12       0       0       0
  3867 ;;      Temps:          0       0       0       0       0
  3868 ;;      Totals:         0      16       0       0       0
  3869 ;;Total ram usage:       16 bytes
  3870 ;; Hardware stack levels used: 1
  3871 ;; Hardware stack levels required when called: 1
  3872 ;; This function calls:
  3873 ;;		_LCD_Char
  3874 ;;		___aldiv
  3875 ;;		___lmul
  3876 ;;		___lwdiv
  3877 ;;		___lwmod
  3878 ;;		_intdigits_chardigits
  3879 ;; This function is called by:
  3880 ;;		_print_analogvoltages
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function _LCD_num
  3886  0980                     _LCD_num:
  3887  0980                     l2528:	
  3888                           ;incstack = 0
  3889                           ; Regs used in _LCD_num: [wreg+status,2+status,0+pclath+cstack]
  3890                           
  3891  0980                     l2530:
  3892                           
  3893                           ;lcd4bit.h: 61: unsigned int remainder, digit1, digit2, digit3, result,;lcd4bit.h: 62: r
      +                          esult1;;lcd4bit.h: 63: result = ((val*100)/calb_val);
  3894  0980  3000               	movlw	0
  3895  0981  1283               	bcf	3,5	;RP0=0, select bank0
  3896  0982  1303               	bcf	3,6	;RP1=0, select bank0
  3897  0983  00CA               	movwf	___aldiv@divisor+3
  3898  0984  3000               	movlw	0
  3899  0985  00C9               	movwf	___aldiv@divisor+2
  3900  0986  3000               	movlw	0
  3901  0987  00C8               	movwf	___aldiv@divisor+1
  3902  0988  30C8               	movlw	200
  3903  0989  00C7               	movwf	___aldiv@divisor
  3904  098A  0858               	movf	LCD_num@val+3,w
  3905  098B  00F3               	movwf	___lmul@multiplier+3
  3906  098C  0857               	movf	LCD_num@val+2,w
  3907  098D  00F2               	movwf	___lmul@multiplier+2
  3908  098E  0856               	movf	LCD_num@val+1,w
  3909  098F  00F1               	movwf	___lmul@multiplier+1
  3910  0990  0855               	movf	LCD_num@val,w
  3911  0991  00F0               	movwf	___lmul@multiplier
  3912  0992  3000               	movlw	0
  3913  0993  00F7               	movwf	___lmul@multiplicand+3
  3914  0994  3000               	movlw	0
  3915  0995  00F6               	movwf	___lmul@multiplicand+2
  3916  0996  3000               	movlw	0
  3917  0997  00F5               	movwf	___lmul@multiplicand+1
  3918  0998  3064               	movlw	100
  3919  0999  00F4               	movwf	___lmul@multiplicand
  3920  099A  160A  118A  2646  120A  158A  	fcall	___lmul
  3921  099F  0873               	movf	?___lmul+3,w
  3922  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  3923  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  3924  09A2  00CE               	movwf	___aldiv@dividend+3
  3925  09A3  0872               	movf	?___lmul+2,w
  3926  09A4  00CD               	movwf	___aldiv@dividend+2
  3927  09A5  0871               	movf	?___lmul+1,w
  3928  09A6  00CC               	movwf	___aldiv@dividend+1
  3929  09A7  0870               	movf	?___lmul,w
  3930  09A8  00CB               	movwf	___aldiv@dividend
  3931  09A9  120A  158A  20E3  120A  158A  	fcall	___aldiv
  3932  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  3933  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  3934  09B0  0848               	movf	?___aldiv+1,w
  3935  09B1  00E0               	movwf	LCD_num@result+1
  3936  09B2  0847               	movf	?___aldiv,w
  3937  09B3  00DF               	movwf	LCD_num@result
  3938  09B4                     l2532:
  3939                           
  3940                           ;lcd4bit.h: 64: remainder = result% 10;
  3941  09B4  300A               	movlw	10
  3942  09B5  00F0               	movwf	___lwmod@divisor
  3943  09B6  3000               	movlw	0
  3944  09B7  00F1               	movwf	___lwmod@divisor+1
  3945  09B8  0860               	movf	LCD_num@result+1,w
  3946  09B9  00F3               	movwf	___lwmod@dividend+1
  3947  09BA  085F               	movf	LCD_num@result,w
  3948  09BB  00F2               	movwf	___lwmod@dividend
  3949  09BC  160A  118A  2457  120A  158A  	fcall	___lwmod
  3950  09C1  0871               	movf	?___lwmod+1,w
  3951  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  3952  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  3953  09C4  00E4               	movwf	LCD_num@remainder+1
  3954  09C5  0870               	movf	?___lwmod,w
  3955  09C6  00E3               	movwf	LCD_num@remainder
  3956  09C7                     l2534:
  3957                           
  3958                           ;lcd4bit.h: 65: result1 = result /10;
  3959  09C7  300A               	movlw	10
  3960  09C8  00F0               	movwf	___lwdiv@divisor
  3961  09C9  3000               	movlw	0
  3962  09CA  00F1               	movwf	___lwdiv@divisor+1
  3963  09CB  0860               	movf	LCD_num@result+1,w
  3964  09CC  00F3               	movwf	___lwdiv@dividend+1
  3965  09CD  085F               	movf	LCD_num@result,w
  3966  09CE  00F2               	movwf	___lwdiv@dividend
  3967  09CF  160A  118A  2602  120A  158A  	fcall	___lwdiv
  3968  09D4  0871               	movf	?___lwdiv+1,w
  3969  09D5  1283               	bcf	3,5	;RP0=0, select bank0
  3970  09D6  1303               	bcf	3,6	;RP1=0, select bank0
  3971  09D7  00E2               	movwf	LCD_num@result1+1
  3972  09D8  0870               	movf	?___lwdiv,w
  3973  09D9  00E1               	movwf	LCD_num@result1
  3974  09DA                     l2536:
  3975                           
  3976                           ;lcd4bit.h: 66: digit1 = remainder;
  3977  09DA  0864               	movf	LCD_num@remainder+1,w
  3978  09DB  00DA               	movwf	LCD_num@digit1+1
  3979  09DC  0863               	movf	LCD_num@remainder,w
  3980  09DD  00D9               	movwf	LCD_num@digit1
  3981                           
  3982                           ;lcd4bit.h: 67: remainder = result1%10;
  3983  09DE  300A               	movlw	10
  3984  09DF  00F0               	movwf	___lwmod@divisor
  3985  09E0  3000               	movlw	0
  3986  09E1  00F1               	movwf	___lwmod@divisor+1
  3987  09E2  0862               	movf	LCD_num@result1+1,w
  3988  09E3  00F3               	movwf	___lwmod@dividend+1
  3989  09E4  0861               	movf	LCD_num@result1,w
  3990  09E5  00F2               	movwf	___lwmod@dividend
  3991  09E6  160A  118A  2457  120A  158A  	fcall	___lwmod
  3992  09EB  0871               	movf	?___lwmod+1,w
  3993  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  3994  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  3995  09EE  00E4               	movwf	LCD_num@remainder+1
  3996  09EF  0870               	movf	?___lwmod,w
  3997  09F0  00E3               	movwf	LCD_num@remainder
  3998  09F1                     l2538:
  3999                           
  4000                           ;lcd4bit.h: 68: digit2 = remainder;
  4001  09F1  0864               	movf	LCD_num@remainder+1,w
  4002  09F2  00DC               	movwf	LCD_num@digit2+1
  4003  09F3  0863               	movf	LCD_num@remainder,w
  4004  09F4  00DB               	movwf	LCD_num@digit2
  4005  09F5                     l2540:
  4006                           
  4007                           ;lcd4bit.h: 69: remainder = (result1/10);
  4008  09F5  300A               	movlw	10
  4009  09F6  00F0               	movwf	___lwdiv@divisor
  4010  09F7  3000               	movlw	0
  4011  09F8  00F1               	movwf	___lwdiv@divisor+1
  4012  09F9  0862               	movf	LCD_num@result1+1,w
  4013  09FA  00F3               	movwf	___lwdiv@dividend+1
  4014  09FB  0861               	movf	LCD_num@result1,w
  4015  09FC  00F2               	movwf	___lwdiv@dividend
  4016  09FD  160A  118A  2602  120A  158A  	fcall	___lwdiv
  4017  0A02  0871               	movf	?___lwdiv+1,w
  4018  0A03  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0A04  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0A05  00E4               	movwf	LCD_num@remainder+1
  4021  0A06  0870               	movf	?___lwdiv,w
  4022  0A07  00E3               	movwf	LCD_num@remainder
  4023                           
  4024                           ;lcd4bit.h: 70: digit3=remainder;
  4025  0A08  0864               	movf	LCD_num@remainder+1,w
  4026  0A09  00DE               	movwf	LCD_num@digit3+1
  4027  0A0A  0863               	movf	LCD_num@remainder,w
  4028  0A0B  00DD               	movwf	LCD_num@digit3
  4029  0A0C                     l2542:
  4030                           
  4031                           ;lcd4bit.h: 71: LCD_Char(digit3+0x30);
  4032  0A0C  085D               	movf	LCD_num@digit3,w
  4033  0A0D  3E30               	addlw	48
  4034  0A0E  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  4035  0A13                     l2544:
  4036                           
  4037                           ;lcd4bit.h: 72: LCD_Char('.');
  4038  0A13  302E               	movlw	46
  4039  0A14  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  4040  0A19                     l2546:
  4041                           
  4042                           ;lcd4bit.h: 73: LCD_Char(digit2+0x30);
  4043  0A19  1283               	bcf	3,5	;RP0=0, select bank0
  4044  0A1A  1303               	bcf	3,6	;RP1=0, select bank0
  4045  0A1B  085B               	movf	LCD_num@digit2,w
  4046  0A1C  3E30               	addlw	48
  4047  0A1D  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  4048  0A22                     l2548:
  4049                           
  4050                           ;lcd4bit.h: 74: LCD_Char(digit1+0x30);
  4051  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  4052  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  4053  0A24  0859               	movf	LCD_num@digit1,w
  4054  0A25  3E30               	addlw	48
  4055  0A26  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  4056  0A2B                     l2550:
  4057                           
  4058                           ;lcd4bit.h: 76: intdigits_chardigits(digit3,digit2,digit1);
  4059  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  4060  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  4061  0A2D  085E               	movf	LCD_num@digit3+1,w
  4062  0A2E  00F1               	movwf	intdigits_chardigits@a+1
  4063  0A2F  085D               	movf	LCD_num@digit3,w
  4064  0A30  00F0               	movwf	intdigits_chardigits@a
  4065  0A31  085C               	movf	LCD_num@digit2+1,w
  4066  0A32  00F3               	movwf	intdigits_chardigits@b+1
  4067  0A33  085B               	movf	LCD_num@digit2,w
  4068  0A34  00F2               	movwf	intdigits_chardigits@b
  4069  0A35  085A               	movf	LCD_num@digit1+1,w
  4070  0A36  00F5               	movwf	intdigits_chardigits@c+1
  4071  0A37  0859               	movf	LCD_num@digit1,w
  4072  0A38  00F4               	movwf	intdigits_chardigits@c
  4073  0A39  160A  118A  231D  120A  158A  	fcall	_intdigits_chardigits
  4074  0A3E                     l118:
  4075  0A3E  0008               	return
  4076  0A3F                     __end_of_LCD_num:
  4077                           
  4078                           	psect	text25
  4079  131D                     __ptext25:	
  4080 ;; *************** function _intdigits_chardigits *****************
  4081 ;; Defined at:
  4082 ;;		line 86 in file "lcd4bit.h"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  a               2    0[COMMON] unsigned int 
  4085 ;;  b               2    2[COMMON] unsigned int 
  4086 ;;  c               2    4[COMMON] unsigned int 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      unsigned char 
  4091 ;; Registers used:
  4092 ;;		wreg
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4098 ;;      Params:         6       0       0       0       0
  4099 ;;      Locals:         0       0       0       0       0
  4100 ;;      Temps:          1       0       0       0       0
  4101 ;;      Totals:         7       0       0       0       0
  4102 ;;Total ram usage:        7 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_LCD_num
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _intdigits_chardigits
  4113  131D                     _intdigits_chardigits:
  4114  131D                     l1924:	
  4115                           ;incstack = 0
  4116                           ; Regs used in _intdigits_chardigits: [wreg]
  4117                           
  4118                           
  4119                           ;lcd4bit.h: 88: avv[0] = (unsigned char)a;
  4120  131D  0870               	movf	intdigits_chardigits@a,w
  4121  131E  00F6               	movwf	??_intdigits_chardigits
  4122  131F  0876               	movf	??_intdigits_chardigits,w
  4123  1320  1683               	bsf	3,5	;RP0=1, select bank1
  4124  1321  1303               	bcf	3,6	;RP1=0, select bank1
  4125  1322  00DC               	movwf	_avv^(0+128)
  4126                           
  4127                           ;lcd4bit.h: 89: avv[1] = (unsigned char)b;
  4128  1323  0872               	movf	intdigits_chardigits@b,w
  4129  1324  00F6               	movwf	??_intdigits_chardigits
  4130  1325  0876               	movf	??_intdigits_chardigits,w
  4131  1326  00DD               	movwf	(_avv^(0+128)+1)
  4132                           
  4133                           ;lcd4bit.h: 90: avv[2] = (unsigned char)c;
  4134  1327  0874               	movf	intdigits_chardigits@c,w
  4135  1328  00F6               	movwf	??_intdigits_chardigits
  4136  1329  0876               	movf	??_intdigits_chardigits,w
  4137  132A  00DE               	movwf	(_avv^(0+128)+2)
  4138  132B                     l127:
  4139  132B  0008               	return
  4140  132C                     __end_of_intdigits_chardigits:
  4141                           
  4142                           	psect	text26
  4143  13A6                     __ptext26:	
  4144 ;; *************** function _bmp280_terminaldata *****************
  4145 ;; Defined at:
  4146 ;;		line 323 in file "main.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, pclath, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4160 ;;      Params:         0       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0
  4163 ;;      Totals:         0       0       0       0       0
  4164 ;;Total ram usage:        0 bytes
  4165 ;; Hardware stack levels used: 1
  4166 ;; Hardware stack levels required when called: 2
  4167 ;; This function calls:
  4168 ;;		_tx
  4169 ;;		_tx_sn
  4170 ;; This function is called by:
  4171 ;;		_main
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           
  4176                           ;psect for function _bmp280_terminaldata
  4177  13A6                     _bmp280_terminaldata:
  4178  13A6                     l3040:	
  4179                           ;incstack = 0
  4180                           ; Regs used in _bmp280_terminaldata: [wreg+status,2+status,0+pclath+cstack]
  4181                           
  4182                           
  4183                           ;main.c: 325: tx_sn(hpa);
  4184  13A6  1283               	bcf	3,5	;RP0=0, select bank0
  4185  13A7  1303               	bcf	3,6	;RP1=0, select bank0
  4186  13A8  082F               	movf	_hpa+1,w
  4187  13A9  00FA               	movwf	tx_sn@val+1
  4188  13AA  082E               	movf	_hpa,w
  4189  13AB  00F9               	movwf	tx_sn@val
  4190  13AC  120A  118A  210B  160A  118A  	fcall	_tx_sn
  4191                           
  4192                           ;main.c: 326: tx(',');
  4193  13B1  302C               	movlw	44
  4194  13B2  160A  118A  22E1  160A  118A  	fcall	_tx
  4195                           
  4196                           ;main.c: 327: tx_sn(altitude);
  4197  13B7  1283               	bcf	3,5	;RP0=0, select bank0
  4198  13B8  1303               	bcf	3,6	;RP1=0, select bank0
  4199  13B9  082D               	movf	_altitude+1,w
  4200  13BA  00FA               	movwf	tx_sn@val+1
  4201  13BB  082C               	movf	_altitude,w
  4202  13BC  00F9               	movwf	tx_sn@val
  4203  13BD  120A  118A  210B  160A  118A  	fcall	_tx_sn
  4204  13C2                     l431:
  4205  13C2  0008               	return
  4206  13C3                     __end_of_bmp280_terminaldata:
  4207                           
  4208                           	psect	text27
  4209  010B                     __ptext27:	
  4210 ;; *************** function _tx_sn *****************
  4211 ;; Defined at:
  4212 ;;		line 27 in file "uart.h"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  val             2    9[COMMON] unsigned int 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  remainder       2   12[BANK0 ] int 
  4217 ;;  result1         2   10[BANK0 ] int 
  4218 ;;  digit2          2    8[BANK0 ] int 
  4219 ;;  digit1          2    6[BANK0 ] int 
  4220 ;;  digit3          2    4[BANK0 ] int 
  4221 ;;  result          2    2[BANK0 ] int 
  4222 ;;  digit4          2    0[BANK0 ] int 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0, pclath, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4232 ;;      Params:         2       0       0       0       0
  4233 ;;      Locals:         0      14       0       0       0
  4234 ;;      Temps:          0       0       0       0       0
  4235 ;;      Totals:         2      14       0       0       0
  4236 ;;Total ram usage:       16 bytes
  4237 ;; Hardware stack levels used: 1
  4238 ;; Hardware stack levels required when called: 1
  4239 ;; This function calls:
  4240 ;;		___awdiv
  4241 ;;		___awmod
  4242 ;;		___lwdiv
  4243 ;;		___lwmod
  4244 ;;		_tx
  4245 ;; This function is called by:
  4246 ;;		_print_serialnumber
  4247 ;;		_print_dht11data
  4248 ;;		_bmp280_terminaldata
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _tx_sn
  4254  010B                     _tx_sn:
  4255  010B                     l2620:	
  4256                           ;incstack = 0
  4257                           ; Regs used in _tx_sn: [wreg+status,2+status,0+pclath+cstack]
  4258                           
  4259                           
  4260                           ;uart.h: 29: int remainder, digit1, digit2, digit3, digit4, result, result1;;uart.h: 30:
      +                           if (val<=9)
  4261  010B  3000               	movlw	0
  4262  010C  027A               	subwf	tx_sn@val+1,w
  4263  010D  300A               	movlw	10
  4264  010E  1903               	skipnz
  4265  010F  0279               	subwf	tx_sn@val,w
  4266  0110  1803               	skipnc
  4267  0111  2913               	goto	u2681
  4268  0112  2914               	goto	u2680
  4269  0113                     u2681:
  4270  0113  291C               	goto	l2624
  4271  0114                     u2680:
  4272  0114                     l2622:
  4273                           
  4274                           ;uart.h: 31: {;uart.h: 32: tx(val+0x30);
  4275  0114  0879               	movf	tx_sn@val,w
  4276  0115  3E30               	addlw	48
  4277  0116  160A  118A  22E1  120A  118A  	fcall	_tx
  4278                           
  4279                           ;uart.h: 33: }
  4280  011B  2A9C               	goto	l162
  4281  011C                     l2624:
  4282                           
  4283                           ;uart.h: 34: else if (val>=10 && val <100)
  4284  011C  3000               	movlw	0
  4285  011D  027A               	subwf	tx_sn@val+1,w
  4286  011E  300A               	movlw	10
  4287  011F  1903               	skipnz
  4288  0120  0279               	subwf	tx_sn@val,w
  4289  0121  1C03               	skipc
  4290  0122  2924               	goto	u2691
  4291  0123  2925               	goto	u2690
  4292  0124                     u2691:
  4293  0124  2969               	goto	l2638
  4294  0125                     u2690:
  4295  0125                     l2626:
  4296  0125  3000               	movlw	0
  4297  0126  027A               	subwf	tx_sn@val+1,w
  4298  0127  3064               	movlw	100
  4299  0128  1903               	skipnz
  4300  0129  0279               	subwf	tx_sn@val,w
  4301  012A  1803               	skipnc
  4302  012B  292D               	goto	u2701
  4303  012C  292E               	goto	u2700
  4304  012D                     u2701:
  4305  012D  2969               	goto	l2638
  4306  012E                     u2700:
  4307  012E                     l2628:
  4308                           
  4309                           ;uart.h: 35: {;uart.h: 36: remainder = val % 10;
  4310  012E  300A               	movlw	10
  4311  012F  00F0               	movwf	___lwmod@divisor
  4312  0130  3000               	movlw	0
  4313  0131  00F1               	movwf	___lwmod@divisor+1
  4314  0132  087A               	movf	tx_sn@val+1,w
  4315  0133  00F3               	movwf	___lwmod@dividend+1
  4316  0134  0879               	movf	tx_sn@val,w
  4317  0135  00F2               	movwf	___lwmod@dividend
  4318  0136  160A  118A  2457  120A  118A  	fcall	___lwmod
  4319  013B  0871               	movf	?___lwmod+1,w
  4320  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4321  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4322  013E  00D4               	movwf	tx_sn@remainder+1
  4323  013F  0870               	movf	?___lwmod,w
  4324  0140  00D3               	movwf	tx_sn@remainder
  4325  0141                     l2630:
  4326                           
  4327                           ;uart.h: 37: digit1 = remainder;
  4328  0141  0854               	movf	tx_sn@remainder+1,w
  4329  0142  00CE               	movwf	tx_sn@digit1+1
  4330  0143  0853               	movf	tx_sn@remainder,w
  4331  0144  00CD               	movwf	tx_sn@digit1
  4332  0145                     l2632:
  4333                           
  4334                           ;uart.h: 38: digit2 = val/10;
  4335  0145  300A               	movlw	10
  4336  0146  00F0               	movwf	___lwdiv@divisor
  4337  0147  3000               	movlw	0
  4338  0148  00F1               	movwf	___lwdiv@divisor+1
  4339  0149  087A               	movf	tx_sn@val+1,w
  4340  014A  00F3               	movwf	___lwdiv@dividend+1
  4341  014B  0879               	movf	tx_sn@val,w
  4342  014C  00F2               	movwf	___lwdiv@dividend
  4343  014D  160A  118A  2602  120A  118A  	fcall	___lwdiv
  4344  0152  0871               	movf	?___lwdiv+1,w
  4345  0153  1283               	bcf	3,5	;RP0=0, select bank0
  4346  0154  1303               	bcf	3,6	;RP1=0, select bank0
  4347  0155  00D0               	movwf	tx_sn@digit2+1
  4348  0156  0870               	movf	?___lwdiv,w
  4349  0157  00CF               	movwf	tx_sn@digit2
  4350  0158                     l2634:
  4351                           
  4352                           ;uart.h: 39: tx(digit2+0x30);
  4353  0158  084F               	movf	tx_sn@digit2,w
  4354  0159  3E30               	addlw	48
  4355  015A  160A  118A  22E1  120A  118A  	fcall	_tx
  4356  015F                     l2636:
  4357                           
  4358                           ;uart.h: 40: tx(digit1+0x30);
  4359  015F  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0160  1303               	bcf	3,6	;RP1=0, select bank0
  4361  0161  084D               	movf	tx_sn@digit1,w
  4362  0162  3E30               	addlw	48
  4363  0163  160A  118A  22E1  120A  118A  	fcall	_tx
  4364                           
  4365                           ;uart.h: 41: }
  4366  0168  2A9C               	goto	l162
  4367  0169                     l2638:
  4368                           
  4369                           ;uart.h: 42: else if (val>=100 && val <1000)
  4370  0169  3000               	movlw	0
  4371  016A  027A               	subwf	tx_sn@val+1,w
  4372  016B  3064               	movlw	100
  4373  016C  1903               	skipnz
  4374  016D  0279               	subwf	tx_sn@val,w
  4375  016E  1C03               	skipc
  4376  016F  2971               	goto	u2711
  4377  0170  2972               	goto	u2710
  4378  0171                     u2711:
  4379  0171  29E9               	goto	l2656
  4380  0172                     u2710:
  4381  0172                     l2640:
  4382  0172  3003               	movlw	3
  4383  0173  027A               	subwf	tx_sn@val+1,w
  4384  0174  30E8               	movlw	232
  4385  0175  1903               	skipnz
  4386  0176  0279               	subwf	tx_sn@val,w
  4387  0177  1803               	skipnc
  4388  0178  297A               	goto	u2721
  4389  0179  297B               	goto	u2720
  4390  017A                     u2721:
  4391  017A  29E9               	goto	l2656
  4392  017B                     u2720:
  4393  017B                     l2642:
  4394                           
  4395                           ;uart.h: 43: {;uart.h: 44: remainder = val % 10;
  4396  017B  300A               	movlw	10
  4397  017C  00F0               	movwf	___lwmod@divisor
  4398  017D  3000               	movlw	0
  4399  017E  00F1               	movwf	___lwmod@divisor+1
  4400  017F  087A               	movf	tx_sn@val+1,w
  4401  0180  00F3               	movwf	___lwmod@dividend+1
  4402  0181  0879               	movf	tx_sn@val,w
  4403  0182  00F2               	movwf	___lwmod@dividend
  4404  0183  160A  118A  2457  120A  118A  	fcall	___lwmod
  4405  0188  0871               	movf	?___lwmod+1,w
  4406  0189  1283               	bcf	3,5	;RP0=0, select bank0
  4407  018A  1303               	bcf	3,6	;RP1=0, select bank0
  4408  018B  00D4               	movwf	tx_sn@remainder+1
  4409  018C  0870               	movf	?___lwmod,w
  4410  018D  00D3               	movwf	tx_sn@remainder
  4411                           
  4412                           ;uart.h: 45: result1 = val /10;
  4413  018E  300A               	movlw	10
  4414  018F  00F0               	movwf	___lwdiv@divisor
  4415  0190  3000               	movlw	0
  4416  0191  00F1               	movwf	___lwdiv@divisor+1
  4417  0192  087A               	movf	tx_sn@val+1,w
  4418  0193  00F3               	movwf	___lwdiv@dividend+1
  4419  0194  0879               	movf	tx_sn@val,w
  4420  0195  00F2               	movwf	___lwdiv@dividend
  4421  0196  160A  118A  2602  120A  118A  	fcall	___lwdiv
  4422  019B  0871               	movf	?___lwdiv+1,w
  4423  019C  1283               	bcf	3,5	;RP0=0, select bank0
  4424  019D  1303               	bcf	3,6	;RP1=0, select bank0
  4425  019E  00D2               	movwf	tx_sn@result1+1
  4426  019F  0870               	movf	?___lwdiv,w
  4427  01A0  00D1               	movwf	tx_sn@result1
  4428  01A1                     l2644:
  4429                           
  4430                           ;uart.h: 46: digit1 = remainder;
  4431  01A1  0854               	movf	tx_sn@remainder+1,w
  4432  01A2  00CE               	movwf	tx_sn@digit1+1
  4433  01A3  0853               	movf	tx_sn@remainder,w
  4434  01A4  00CD               	movwf	tx_sn@digit1
  4435  01A5                     l2646:
  4436                           
  4437                           ;uart.h: 47: remainder = result1%10;
  4438  01A5  300A               	movlw	10
  4439  01A6  00F0               	movwf	___awmod@divisor
  4440  01A7  3000               	movlw	0
  4441  01A8  00F1               	movwf	___awmod@divisor+1
  4442  01A9  0852               	movf	tx_sn@result1+1,w
  4443  01AA  00F3               	movwf	___awmod@dividend+1
  4444  01AB  0851               	movf	tx_sn@result1,w
  4445  01AC  00F2               	movwf	___awmod@dividend
  4446  01AD  160A  118A  26DA  120A  118A  	fcall	___awmod
  4447  01B2  0871               	movf	?___awmod+1,w
  4448  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  4449  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  4450  01B5  00D4               	movwf	tx_sn@remainder+1
  4451  01B6  0870               	movf	?___awmod,w
  4452  01B7  00D3               	movwf	tx_sn@remainder
  4453                           
  4454                           ;uart.h: 48: digit2 = remainder;
  4455  01B8  0854               	movf	tx_sn@remainder+1,w
  4456  01B9  00D0               	movwf	tx_sn@digit2+1
  4457  01BA  0853               	movf	tx_sn@remainder,w
  4458  01BB  00CF               	movwf	tx_sn@digit2
  4459  01BC                     l2648:
  4460                           
  4461                           ;uart.h: 49: digit3 = result1/10;
  4462  01BC  300A               	movlw	10
  4463  01BD  00F0               	movwf	___awdiv@divisor
  4464  01BE  3000               	movlw	0
  4465  01BF  00F1               	movwf	___awdiv@divisor+1
  4466  01C0  0852               	movf	tx_sn@result1+1,w
  4467  01C1  00F3               	movwf	___awdiv@dividend+1
  4468  01C2  0851               	movf	tx_sn@result1,w
  4469  01C3  00F2               	movwf	___awdiv@dividend
  4470  01C4  160A  118A  2799  120A  118A  	fcall	___awdiv
  4471  01C9  0871               	movf	?___awdiv+1,w
  4472  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  4473  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  4474  01CC  00CC               	movwf	tx_sn@digit3+1
  4475  01CD  0870               	movf	?___awdiv,w
  4476  01CE  00CB               	movwf	tx_sn@digit3
  4477  01CF                     l2650:
  4478                           
  4479                           ;uart.h: 50: tx(digit3+0x30);
  4480  01CF  084B               	movf	tx_sn@digit3,w
  4481  01D0  3E30               	addlw	48
  4482  01D1  160A  118A  22E1  120A  118A  	fcall	_tx
  4483  01D6                     l2652:
  4484                           
  4485                           ;uart.h: 51: tx(digit2+0x30);
  4486  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  4487  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  4488  01D8  084F               	movf	tx_sn@digit2,w
  4489  01D9  3E30               	addlw	48
  4490  01DA  160A  118A  22E1  120A  118A  	fcall	_tx
  4491  01DF                     l2654:
  4492                           
  4493                           ;uart.h: 52: tx(digit1+0x30);
  4494  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  4495  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  4496  01E1  084D               	movf	tx_sn@digit1,w
  4497  01E2  3E30               	addlw	48
  4498  01E3  160A  118A  22E1  120A  118A  	fcall	_tx
  4499                           
  4500                           ;uart.h: 53: }
  4501  01E8  2A9C               	goto	l162
  4502  01E9                     l2656:
  4503                           
  4504                           ;uart.h: 54: else if (val>=1000 && val <9999)
  4505  01E9  3003               	movlw	3
  4506  01EA  027A               	subwf	tx_sn@val+1,w
  4507  01EB  30E8               	movlw	232
  4508  01EC  1903               	skipnz
  4509  01ED  0279               	subwf	tx_sn@val,w
  4510  01EE  1C03               	skipc
  4511  01EF  29F1               	goto	u2731
  4512  01F0  29F2               	goto	u2730
  4513  01F1                     u2731:
  4514  01F1  2A9C               	goto	l158
  4515  01F2                     u2730:
  4516  01F2                     l2658:
  4517  01F2  3027               	movlw	39
  4518  01F3  027A               	subwf	tx_sn@val+1,w
  4519  01F4  300F               	movlw	15
  4520  01F5  1903               	skipnz
  4521  01F6  0279               	subwf	tx_sn@val,w
  4522  01F7  1803               	skipnc
  4523  01F8  29FA               	goto	u2741
  4524  01F9  29FB               	goto	u2740
  4525  01FA                     u2741:
  4526  01FA  2A9C               	goto	l158
  4527  01FB                     u2740:
  4528  01FB                     l2660:
  4529                           
  4530                           ;uart.h: 55: {;uart.h: 56: remainder = val % 10;
  4531  01FB  300A               	movlw	10
  4532  01FC  00F0               	movwf	___lwmod@divisor
  4533  01FD  3000               	movlw	0
  4534  01FE  00F1               	movwf	___lwmod@divisor+1
  4535  01FF  087A               	movf	tx_sn@val+1,w
  4536  0200  00F3               	movwf	___lwmod@dividend+1
  4537  0201  0879               	movf	tx_sn@val,w
  4538  0202  00F2               	movwf	___lwmod@dividend
  4539  0203  160A  118A  2457  120A  118A  	fcall	___lwmod
  4540  0208  0871               	movf	?___lwmod+1,w
  4541  0209  1283               	bcf	3,5	;RP0=0, select bank0
  4542  020A  1303               	bcf	3,6	;RP1=0, select bank0
  4543  020B  00D4               	movwf	tx_sn@remainder+1
  4544  020C  0870               	movf	?___lwmod,w
  4545  020D  00D3               	movwf	tx_sn@remainder
  4546                           
  4547                           ;uart.h: 57: result1 = val /10;
  4548  020E  300A               	movlw	10
  4549  020F  00F0               	movwf	___lwdiv@divisor
  4550  0210  3000               	movlw	0
  4551  0211  00F1               	movwf	___lwdiv@divisor+1
  4552  0212  087A               	movf	tx_sn@val+1,w
  4553  0213  00F3               	movwf	___lwdiv@dividend+1
  4554  0214  0879               	movf	tx_sn@val,w
  4555  0215  00F2               	movwf	___lwdiv@dividend
  4556  0216  160A  118A  2602  120A  118A  	fcall	___lwdiv
  4557  021B  0871               	movf	?___lwdiv+1,w
  4558  021C  1283               	bcf	3,5	;RP0=0, select bank0
  4559  021D  1303               	bcf	3,6	;RP1=0, select bank0
  4560  021E  00D2               	movwf	tx_sn@result1+1
  4561  021F  0870               	movf	?___lwdiv,w
  4562  0220  00D1               	movwf	tx_sn@result1
  4563  0221                     l2662:
  4564                           
  4565                           ;uart.h: 58: digit1 = remainder;
  4566  0221  0854               	movf	tx_sn@remainder+1,w
  4567  0222  00CE               	movwf	tx_sn@digit1+1
  4568  0223  0853               	movf	tx_sn@remainder,w
  4569  0224  00CD               	movwf	tx_sn@digit1
  4570  0225                     l2664:
  4571                           
  4572                           ;uart.h: 59: remainder = result1%10;
  4573  0225  300A               	movlw	10
  4574  0226  00F0               	movwf	___awmod@divisor
  4575  0227  3000               	movlw	0
  4576  0228  00F1               	movwf	___awmod@divisor+1
  4577  0229  0852               	movf	tx_sn@result1+1,w
  4578  022A  00F3               	movwf	___awmod@dividend+1
  4579  022B  0851               	movf	tx_sn@result1,w
  4580  022C  00F2               	movwf	___awmod@dividend
  4581  022D  160A  118A  26DA  120A  118A  	fcall	___awmod
  4582  0232  0871               	movf	?___awmod+1,w
  4583  0233  1283               	bcf	3,5	;RP0=0, select bank0
  4584  0234  1303               	bcf	3,6	;RP1=0, select bank0
  4585  0235  00D4               	movwf	tx_sn@remainder+1
  4586  0236  0870               	movf	?___awmod,w
  4587  0237  00D3               	movwf	tx_sn@remainder
  4588                           
  4589                           ;uart.h: 60: digit2 = remainder;
  4590  0238  0854               	movf	tx_sn@remainder+1,w
  4591  0239  00D0               	movwf	tx_sn@digit2+1
  4592  023A  0853               	movf	tx_sn@remainder,w
  4593  023B  00CF               	movwf	tx_sn@digit2
  4594  023C                     l2666:
  4595                           
  4596                           ;uart.h: 61: result = result1/10;
  4597  023C  300A               	movlw	10
  4598  023D  00F0               	movwf	___awdiv@divisor
  4599  023E  3000               	movlw	0
  4600  023F  00F1               	movwf	___awdiv@divisor+1
  4601  0240  0852               	movf	tx_sn@result1+1,w
  4602  0241  00F3               	movwf	___awdiv@dividend+1
  4603  0242  0851               	movf	tx_sn@result1,w
  4604  0243  00F2               	movwf	___awdiv@dividend
  4605  0244  160A  118A  2799  120A  118A  	fcall	___awdiv
  4606  0249  0871               	movf	?___awdiv+1,w
  4607  024A  1283               	bcf	3,5	;RP0=0, select bank0
  4608  024B  1303               	bcf	3,6	;RP1=0, select bank0
  4609  024C  00CA               	movwf	tx_sn@result+1
  4610  024D  0870               	movf	?___awdiv,w
  4611  024E  00C9               	movwf	tx_sn@result
  4612  024F                     l2668:
  4613                           
  4614                           ;uart.h: 62: remainder = result%10;
  4615  024F  300A               	movlw	10
  4616  0250  00F0               	movwf	___awmod@divisor
  4617  0251  3000               	movlw	0
  4618  0252  00F1               	movwf	___awmod@divisor+1
  4619  0253  084A               	movf	tx_sn@result+1,w
  4620  0254  00F3               	movwf	___awmod@dividend+1
  4621  0255  0849               	movf	tx_sn@result,w
  4622  0256  00F2               	movwf	___awmod@dividend
  4623  0257  160A  118A  26DA  120A  118A  	fcall	___awmod
  4624  025C  0871               	movf	?___awmod+1,w
  4625  025D  1283               	bcf	3,5	;RP0=0, select bank0
  4626  025E  1303               	bcf	3,6	;RP1=0, select bank0
  4627  025F  00D4               	movwf	tx_sn@remainder+1
  4628  0260  0870               	movf	?___awmod,w
  4629  0261  00D3               	movwf	tx_sn@remainder
  4630                           
  4631                           ;uart.h: 63: digit3=remainder;
  4632  0262  0854               	movf	tx_sn@remainder+1,w
  4633  0263  00CC               	movwf	tx_sn@digit3+1
  4634  0264  0853               	movf	tx_sn@remainder,w
  4635  0265  00CB               	movwf	tx_sn@digit3
  4636  0266                     l2670:
  4637                           
  4638                           ;uart.h: 64: digit4 = result/10;
  4639  0266  300A               	movlw	10
  4640  0267  00F0               	movwf	___awdiv@divisor
  4641  0268  3000               	movlw	0
  4642  0269  00F1               	movwf	___awdiv@divisor+1
  4643  026A  084A               	movf	tx_sn@result+1,w
  4644  026B  00F3               	movwf	___awdiv@dividend+1
  4645  026C  0849               	movf	tx_sn@result,w
  4646  026D  00F2               	movwf	___awdiv@dividend
  4647  026E  160A  118A  2799  120A  118A  	fcall	___awdiv
  4648  0273  0871               	movf	?___awdiv+1,w
  4649  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4650  0275  1303               	bcf	3,6	;RP1=0, select bank0
  4651  0276  00C8               	movwf	tx_sn@digit4+1
  4652  0277  0870               	movf	?___awdiv,w
  4653  0278  00C7               	movwf	tx_sn@digit4
  4654  0279                     l2672:
  4655                           
  4656                           ;uart.h: 65: tx(digit4+0x30);
  4657  0279  0847               	movf	tx_sn@digit4,w
  4658  027A  3E30               	addlw	48
  4659  027B  160A  118A  22E1  120A  118A  	fcall	_tx
  4660  0280                     l2674:
  4661                           
  4662                           ;uart.h: 66: tx(digit3+0x30);
  4663  0280  1283               	bcf	3,5	;RP0=0, select bank0
  4664  0281  1303               	bcf	3,6	;RP1=0, select bank0
  4665  0282  084B               	movf	tx_sn@digit3,w
  4666  0283  3E30               	addlw	48
  4667  0284  160A  118A  22E1  120A  118A  	fcall	_tx
  4668  0289                     l2676:
  4669                           
  4670                           ;uart.h: 67: tx(digit2+0x30);
  4671  0289  1283               	bcf	3,5	;RP0=0, select bank0
  4672  028A  1303               	bcf	3,6	;RP1=0, select bank0
  4673  028B  084F               	movf	tx_sn@digit2,w
  4674  028C  3E30               	addlw	48
  4675  028D  160A  118A  22E1  120A  118A  	fcall	_tx
  4676  0292                     l2678:
  4677                           
  4678                           ;uart.h: 68: tx(digit1+0x30);
  4679  0292  1283               	bcf	3,5	;RP0=0, select bank0
  4680  0293  1303               	bcf	3,6	;RP1=0, select bank0
  4681  0294  084D               	movf	tx_sn@digit1,w
  4682  0295  3E30               	addlw	48
  4683  0296  160A  118A  22E1  120A  118A  	fcall	_tx
  4684  029B  2A9C               	goto	l162
  4685  029C                     l158:
  4686  029C                     l162:
  4687  029C  0008               	return
  4688  029D                     __end_of_tx_sn:
  4689                           
  4690                           	psect	text28
  4691  12E1                     __ptext28:	
  4692 ;; *************** function _tx *****************
  4693 ;; Defined at:
  4694 ;;		line 14 in file "uart.h"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  a               1    wreg     unsigned char 
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;  a               1    0[COMMON] unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      unsigned char 
  4701 ;; Registers used:
  4702 ;;		wreg
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4708 ;;      Params:         0       0       0       0       0
  4709 ;;      Locals:         1       0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0
  4711 ;;      Totals:         1       0       0       0       0
  4712 ;;Total ram usage:        1 bytes
  4713 ;; Hardware stack levels used: 1
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_tx_sn
  4718 ;;		_main
  4719 ;;		_print_serialnumber
  4720 ;;		_print_analogvoltages
  4721 ;;		_print_dht11data
  4722 ;;		_rtc_terminal_data
  4723 ;;		_bmp280_terminaldata
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _tx
  4729  12E1                     _tx:
  4730                           
  4731                           ;incstack = 0
  4732                           ; Regs used in _tx: [wreg]
  4733                           ;tx@a stored from wreg
  4734  12E1  00F0               	movwf	tx@a
  4735  12E2                     l1926:
  4736                           
  4737                           ;uart.h: 16: TXREG=a;
  4738  12E2  0870               	movf	tx@a,w
  4739  12E3  1283               	bcf	3,5	;RP0=0, select bank0
  4740  12E4  1303               	bcf	3,6	;RP1=0, select bank0
  4741  12E5  0099               	movwf	25	;volatile
  4742  12E6                     l143:	
  4743                           ;uart.h: 17: while(!TXIF);
  4744                           
  4745  12E6  1E0C               	btfss	12,4	;volatile
  4746  12E7  2AE9               	goto	u1231
  4747  12E8  2AEA               	goto	u1230
  4748  12E9                     u1231:
  4749  12E9  2AE6               	goto	l143
  4750  12EA                     u1230:
  4751  12EA                     l145:
  4752                           
  4753                           ;uart.h: 18: TXIF = 0;
  4754  12EA  120C               	bcf	12,4	;volatile
  4755  12EB                     l146:
  4756  12EB  0008               	return
  4757  12EC                     __end_of_tx:
  4758                           
  4759                           	psect	text29
  4760  1360                     __ptext29:	
  4761 ;; *************** function _bmp280_init *****************
  4762 ;; Defined at:
  4763 ;;		line 15 in file "bmp280.h"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4777 ;;      Params:         0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0
  4780 ;;      Totals:         0       0       0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used: 1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_main
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function _bmp280_init
  4792  1360                     _bmp280_init:
  4793  1360                     l2912:	
  4794                           ;incstack = 0
  4795                           ; Regs used in _bmp280_init: [wreg]
  4796                           
  4797                           
  4798                           ;bmp280.h: 17: TRISC3=TRISC4=1;
  4799  1360  1683               	bsf	3,5	;RP0=1, select bank1
  4800  1361  1303               	bcf	3,6	;RP1=0, select bank1
  4801  1362  1607               	bsf	7,4	;volatile
  4802  1363  1A07               	btfsc	7,4	;volatile
  4803  1364  2B66               	goto	u3201
  4804  1365  2B6A               	goto	u3200
  4805  1366                     u3201:
  4806  1366  1683               	bsf	3,5	;RP0=1, select bank1
  4807  1367  1303               	bcf	3,6	;RP1=0, select bank1
  4808  1368  1587               	bsf	7,3	;volatile
  4809  1369  2B6D               	goto	u3214
  4810  136A                     u3200:
  4811  136A  1683               	bsf	3,5	;RP0=1, select bank1
  4812  136B  1303               	bcf	3,6	;RP1=0, select bank1
  4813  136C  1187               	bcf	7,3	;volatile
  4814  136D                     u3214:
  4815  136D                     l2914:
  4816                           
  4817                           ;bmp280.h: 18: SSPCON=0x28;
  4818  136D  3028               	movlw	40
  4819  136E  1283               	bcf	3,5	;RP0=0, select bank0
  4820  136F  1303               	bcf	3,6	;RP1=0, select bank0
  4821  1370  0094               	movwf	20	;volatile
  4822                           
  4823                           ;bmp280.h: 19: SSPADD=((11059200/4)/100)-1;
  4824  1371  30FF               	movlw	255
  4825  1372  1683               	bsf	3,5	;RP0=1, select bank1
  4826  1373  1303               	bcf	3,6	;RP1=0, select bank1
  4827  1374  0093               	movwf	19	;volatile
  4828  1375                     l267:
  4829  1375  0008               	return
  4830  1376                     __end_of_bmp280_init:
  4831                           
  4832                           	psect	text30
  4833  0A3F                     __ptext30:	
  4834 ;; *************** function _bmp280_getdata *****************
  4835 ;; Defined at:
  4836 ;;		line 253 in file "main.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      void 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4850 ;;      Params:         0       0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0
  4852 ;;      Temps:          4       0       0       0       0
  4853 ;;      Totals:         4       0       0       0       0
  4854 ;;Total ram usage:        4 bytes
  4855 ;; Hardware stack levels used: 1
  4856 ;; Hardware stack levels required when called: 3
  4857 ;; This function calls:
  4858 ;;		_bmp280_read_byte
  4859 ;; This function is called by:
  4860 ;;		_main
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           
  4865                           ;psect for function _bmp280_getdata
  4866  0A3F                     _bmp280_getdata:
  4867  0A3F                     l2996:	
  4868                           ;incstack = 0
  4869                           ; Regs used in _bmp280_getdata: [wreg+status,2+status,0+pclath+cstack]
  4870                           
  4871                           
  4872                           ;main.c: 255: aa=(bmp280_read_byte(0xAA));
  4873  0A3F  30AA               	movlw	170
  4874  0A40  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4875  0A45  00F4               	movwf	??_bmp280_getdata
  4876  0A46  01F5               	clrf	??_bmp280_getdata+1
  4877  0A47  01F6               	clrf	??_bmp280_getdata+2
  4878  0A48  01F7               	clrf	??_bmp280_getdata+3
  4879  0A49  0877               	movf	??_bmp280_getdata+3,w
  4880  0A4A  1683               	bsf	3,5	;RP0=1, select bank1
  4881  0A4B  1303               	bcf	3,6	;RP1=0, select bank1
  4882  0A4C  00DB               	movwf	(_aa+3)^(0+128)
  4883  0A4D  0876               	movf	??_bmp280_getdata+2,w
  4884  0A4E  00DA               	movwf	(_aa+2)^(0+128)
  4885  0A4F  0875               	movf	??_bmp280_getdata+1,w
  4886  0A50  00D9               	movwf	(_aa+1)^(0+128)
  4887  0A51  0874               	movf	??_bmp280_getdata,w
  4888  0A52  00D8               	movwf	_aa^(0+128)
  4889                           
  4890                           ;main.c: 256: ab=(bmp280_read_byte(0xAB));
  4891  0A53  30AB               	movlw	171
  4892  0A54  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4893  0A59  00F4               	movwf	??_bmp280_getdata
  4894  0A5A  01F5               	clrf	??_bmp280_getdata+1
  4895  0A5B  01F6               	clrf	??_bmp280_getdata+2
  4896  0A5C  01F7               	clrf	??_bmp280_getdata+3
  4897  0A5D  0877               	movf	??_bmp280_getdata+3,w
  4898  0A5E  1683               	bsf	3,5	;RP0=1, select bank1
  4899  0A5F  1303               	bcf	3,6	;RP1=0, select bank1
  4900  0A60  00D7               	movwf	(_ab+3)^(0+128)
  4901  0A61  0876               	movf	??_bmp280_getdata+2,w
  4902  0A62  00D6               	movwf	(_ab+2)^(0+128)
  4903  0A63  0875               	movf	??_bmp280_getdata+1,w
  4904  0A64  00D5               	movwf	(_ab+1)^(0+128)
  4905  0A65  0874               	movf	??_bmp280_getdata,w
  4906  0A66  00D4               	movwf	_ab^(0+128)
  4907                           
  4908                           ;main.c: 257: ac=(bmp280_read_byte(0xAC));
  4909  0A67  30AC               	movlw	172
  4910  0A68  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4911  0A6D  00F4               	movwf	??_bmp280_getdata
  4912  0A6E  01F5               	clrf	??_bmp280_getdata+1
  4913  0A6F  01F6               	clrf	??_bmp280_getdata+2
  4914  0A70  01F7               	clrf	??_bmp280_getdata+3
  4915  0A71  0877               	movf	??_bmp280_getdata+3,w
  4916  0A72  1683               	bsf	3,5	;RP0=1, select bank1
  4917  0A73  1303               	bcf	3,6	;RP1=0, select bank1
  4918  0A74  00D3               	movwf	(_ac+3)^(0+128)
  4919  0A75  0876               	movf	??_bmp280_getdata+2,w
  4920  0A76  00D2               	movwf	(_ac+2)^(0+128)
  4921  0A77  0875               	movf	??_bmp280_getdata+1,w
  4922  0A78  00D1               	movwf	(_ac+1)^(0+128)
  4923  0A79  0874               	movf	??_bmp280_getdata,w
  4924  0A7A  00D0               	movwf	_ac^(0+128)
  4925                           
  4926                           ;main.c: 258: ad=(bmp280_read_byte(0xAD));
  4927  0A7B  30AD               	movlw	173
  4928  0A7C  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4929  0A81  00F4               	movwf	??_bmp280_getdata
  4930  0A82  01F5               	clrf	??_bmp280_getdata+1
  4931  0A83  01F6               	clrf	??_bmp280_getdata+2
  4932  0A84  01F7               	clrf	??_bmp280_getdata+3
  4933  0A85  0877               	movf	??_bmp280_getdata+3,w
  4934  0A86  1683               	bsf	3,5	;RP0=1, select bank1
  4935  0A87  1303               	bcf	3,6	;RP1=0, select bank1
  4936  0A88  00CF               	movwf	(_ad+3)^(0+128)
  4937  0A89  0876               	movf	??_bmp280_getdata+2,w
  4938  0A8A  00CE               	movwf	(_ad+2)^(0+128)
  4939  0A8B  0875               	movf	??_bmp280_getdata+1,w
  4940  0A8C  00CD               	movwf	(_ad+1)^(0+128)
  4941  0A8D  0874               	movf	??_bmp280_getdata,w
  4942  0A8E  00CC               	movwf	_ad^(0+128)
  4943                           
  4944                           ;main.c: 259: ae=(bmp280_read_byte(0xAE));
  4945  0A8F  30AE               	movlw	174
  4946  0A90  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4947  0A95  00F4               	movwf	??_bmp280_getdata
  4948  0A96  01F5               	clrf	??_bmp280_getdata+1
  4949  0A97  01F6               	clrf	??_bmp280_getdata+2
  4950  0A98  01F7               	clrf	??_bmp280_getdata+3
  4951  0A99  0877               	movf	??_bmp280_getdata+3,w
  4952  0A9A  1683               	bsf	3,5	;RP0=1, select bank1
  4953  0A9B  1303               	bcf	3,6	;RP1=0, select bank1
  4954  0A9C  00CB               	movwf	(_ae+3)^(0+128)
  4955  0A9D  0876               	movf	??_bmp280_getdata+2,w
  4956  0A9E  00CA               	movwf	(_ae+2)^(0+128)
  4957  0A9F  0875               	movf	??_bmp280_getdata+1,w
  4958  0AA0  00C9               	movwf	(_ae+1)^(0+128)
  4959  0AA1  0874               	movf	??_bmp280_getdata,w
  4960  0AA2  00C8               	movwf	_ae^(0+128)
  4961                           
  4962                           ;main.c: 260: af=(bmp280_read_byte(0xAF));
  4963  0AA3  30AF               	movlw	175
  4964  0AA4  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4965  0AA9  00F4               	movwf	??_bmp280_getdata
  4966  0AAA  01F5               	clrf	??_bmp280_getdata+1
  4967  0AAB  01F6               	clrf	??_bmp280_getdata+2
  4968  0AAC  01F7               	clrf	??_bmp280_getdata+3
  4969  0AAD  0877               	movf	??_bmp280_getdata+3,w
  4970  0AAE  1683               	bsf	3,5	;RP0=1, select bank1
  4971  0AAF  1303               	bcf	3,6	;RP1=0, select bank1
  4972  0AB0  00C7               	movwf	(_af+3)^(0+128)
  4973  0AB1  0876               	movf	??_bmp280_getdata+2,w
  4974  0AB2  00C6               	movwf	(_af+2)^(0+128)
  4975  0AB3  0875               	movf	??_bmp280_getdata+1,w
  4976  0AB4  00C5               	movwf	(_af+1)^(0+128)
  4977  0AB5  0874               	movf	??_bmp280_getdata,w
  4978  0AB6  00C4               	movwf	_af^(0+128)
  4979                           
  4980                           ;main.c: 262: b0=(bmp280_read_byte(0xB0));
  4981  0AB7  30B0               	movlw	176
  4982  0AB8  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  4983  0ABD  00F4               	movwf	??_bmp280_getdata
  4984  0ABE  01F5               	clrf	??_bmp280_getdata+1
  4985  0ABF  01F6               	clrf	??_bmp280_getdata+2
  4986  0AC0  01F7               	clrf	??_bmp280_getdata+3
  4987  0AC1  0877               	movf	??_bmp280_getdata+3,w
  4988  0AC2  1683               	bsf	3,5	;RP0=1, select bank1
  4989  0AC3  1303               	bcf	3,6	;RP1=0, select bank1
  4990  0AC4  00C3               	movwf	(_b0+3)^(0+128)
  4991  0AC5  0876               	movf	??_bmp280_getdata+2,w
  4992  0AC6  00C2               	movwf	(_b0+2)^(0+128)
  4993  0AC7  0875               	movf	??_bmp280_getdata+1,w
  4994  0AC8  00C1               	movwf	(_b0+1)^(0+128)
  4995  0AC9  0874               	movf	??_bmp280_getdata,w
  4996  0ACA  00C0               	movwf	_b0^(0+128)
  4997                           
  4998                           ;main.c: 263: b1=(bmp280_read_byte(0xB1));
  4999  0ACB  30B1               	movlw	177
  5000  0ACC  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  5001  0AD1  00F4               	movwf	??_bmp280_getdata
  5002  0AD2  01F5               	clrf	??_bmp280_getdata+1
  5003  0AD3  01F6               	clrf	??_bmp280_getdata+2
  5004  0AD4  01F7               	clrf	??_bmp280_getdata+3
  5005  0AD5  0877               	movf	??_bmp280_getdata+3,w
  5006  0AD6  1683               	bsf	3,5	;RP0=1, select bank1
  5007  0AD7  1303               	bcf	3,6	;RP1=0, select bank1
  5008  0AD8  00BF               	movwf	(_b1+3)^(0+128)
  5009  0AD9  0876               	movf	??_bmp280_getdata+2,w
  5010  0ADA  00BE               	movwf	(_b1+2)^(0+128)
  5011  0ADB  0875               	movf	??_bmp280_getdata+1,w
  5012  0ADC  00BD               	movwf	(_b1+1)^(0+128)
  5013  0ADD  0874               	movf	??_bmp280_getdata,w
  5014  0ADE  00BC               	movwf	_b1^(0+128)
  5015                           
  5016                           ;main.c: 264: b2=(bmp280_read_byte(0xB2));
  5017  0ADF  30B2               	movlw	178
  5018  0AE0  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  5019  0AE5  00F4               	movwf	??_bmp280_getdata
  5020  0AE6  01F5               	clrf	??_bmp280_getdata+1
  5021  0AE7  01F6               	clrf	??_bmp280_getdata+2
  5022  0AE8  01F7               	clrf	??_bmp280_getdata+3
  5023  0AE9  0877               	movf	??_bmp280_getdata+3,w
  5024  0AEA  1683               	bsf	3,5	;RP0=1, select bank1
  5025  0AEB  1303               	bcf	3,6	;RP1=0, select bank1
  5026  0AEC  00BB               	movwf	(_b2+3)^(0+128)
  5027  0AED  0876               	movf	??_bmp280_getdata+2,w
  5028  0AEE  00BA               	movwf	(_b2+2)^(0+128)
  5029  0AEF  0875               	movf	??_bmp280_getdata+1,w
  5030  0AF0  00B9               	movwf	(_b2+1)^(0+128)
  5031  0AF1  0874               	movf	??_bmp280_getdata,w
  5032  0AF2  00B8               	movwf	_b2^(0+128)
  5033                           
  5034                           ;main.c: 265: b5=(bmp280_read_byte(0xB5));
  5035  0AF3  30B5               	movlw	181
  5036  0AF4  160A  118A  2491  120A  158A  	fcall	_bmp280_read_byte
  5037  0AF9  00F4               	movwf	??_bmp280_getdata
  5038  0AFA  01F5               	clrf	??_bmp280_getdata+1
  5039  0AFB  01F6               	clrf	??_bmp280_getdata+2
  5040  0AFC  01F7               	clrf	??_bmp280_getdata+3
  5041  0AFD  0877               	movf	??_bmp280_getdata+3,w
  5042  0AFE  1683               	bsf	3,5	;RP0=1, select bank1
  5043  0AFF  1303               	bcf	3,6	;RP1=0, select bank1
  5044  0B00  00B3               	movwf	(_b5+3)^(0+128)
  5045  0B01  0876               	movf	??_bmp280_getdata+2,w
  5046  0B02  00B2               	movwf	(_b5+2)^(0+128)
  5047  0B03  0875               	movf	??_bmp280_getdata+1,w
  5048  0B04  00B1               	movwf	(_b5+1)^(0+128)
  5049  0B05  0874               	movf	??_bmp280_getdata,w
  5050  0B06  00B0               	movwf	_b5^(0+128)
  5051  0B07                     l414:
  5052  0B07  0008               	return
  5053  0B08                     __end_of_bmp280_getdata:
  5054                           
  5055                           	psect	text31
  5056  1491                     __ptext31:	
  5057 ;; *************** function _bmp280_read_byte *****************
  5058 ;; Defined at:
  5059 ;;		line 73 in file "bmp280.h"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  addr            1    wreg     unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  addr            1    2[COMMON] unsigned char 
  5064 ;;  rec             1    3[COMMON] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      unsigned char 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5074 ;;      Params:         0       0       0       0       0
  5075 ;;      Locals:         2       0       0       0       0
  5076 ;;      Temps:          1       0       0       0       0
  5077 ;;      Totals:         3       0       0       0       0
  5078 ;;Total ram usage:        3 bytes
  5079 ;; Hardware stack levels used: 1
  5080 ;; Hardware stack levels required when called: 2
  5081 ;; This function calls:
  5082 ;;		_bmp280_nak
  5083 ;;		_bmp280_read
  5084 ;;		_bmp280_restart
  5085 ;;		_bmp280_send
  5086 ;;		_bmp280_stop
  5087 ;;		_bmp280_waitmssp
  5088 ;; This function is called by:
  5089 ;;		_bmp280_getdata
  5090 ;;		_uncompensated_pressure
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _bmp280_read_byte
  5096  1491                     _bmp280_read_byte:
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _bmp280_read_byte: [wreg+status,2+status,0+pclath+cstack]
  5100                           ;bmp280_read_byte@addr stored from wreg
  5101  1491  00F2               	movwf	bmp280_read_byte@addr
  5102  1492                     l304:	
  5103                           ;bmp280.h: 75: unsigned char rec;;bmp280.h: 76: L: bmp280_restart();
  5104                           
  5105  1492                     l2762:
  5106  1492  160A  118A  22A9  160A  118A  	fcall	_bmp280_restart
  5107  1497                     l2764:
  5108                           
  5109                           ;bmp280.h: 77: SSPBUF=0xEE;
  5110  1497  30EE               	movlw	238
  5111  1498  1283               	bcf	3,5	;RP0=0, select bank0
  5112  1499  1303               	bcf	3,6	;RP1=0, select bank0
  5113  149A  0093               	movwf	19	;volatile
  5114  149B                     l2766:
  5115                           
  5116                           ;bmp280.h: 78: bmp280_waitmssp();
  5117  149B  160A  118A  2291  160A  118A  	fcall	_bmp280_waitmssp
  5118  14A0                     l305:	
  5119                           ;bmp280.h: 79: while(ACKSTAT){goto L;}
  5120                           
  5121  14A0  1683               	bsf	3,5	;RP0=1, select bank1
  5122  14A1  1303               	bcf	3,6	;RP1=0, select bank1
  5123  14A2  1B11               	btfsc	17,6	;volatile
  5124  14A3  2CA5               	goto	u2851
  5125  14A4  2CA6               	goto	u2850
  5126  14A5                     u2851:
  5127  14A5  2C92               	goto	l304
  5128  14A6                     u2850:
  5129  14A6                     l2768:
  5130                           
  5131                           ;bmp280.h: 80: bmp280_send(addr);
  5132  14A6  0872               	movf	bmp280_read_byte@addr,w
  5133  14A7  160A  118A  232C  160A  118A  	fcall	_bmp280_send
  5134  14AC                     l2770:
  5135                           
  5136                           ;bmp280.h: 81: bmp280_restart();
  5137  14AC  160A  118A  22A9  160A  118A  	fcall	_bmp280_restart
  5138  14B1                     l2772:
  5139                           
  5140                           ;bmp280.h: 82: bmp280_send(0xEF);
  5141  14B1  30EF               	movlw	239
  5142  14B2  160A  118A  232C  160A  118A  	fcall	_bmp280_send
  5143  14B7                     l2774:
  5144                           
  5145                           ;bmp280.h: 83: rec=bmp280_read();
  5146  14B7  160A  118A  22EC  160A  118A  	fcall	_bmp280_read
  5147  14BC  00F1               	movwf	??_bmp280_read_byte
  5148  14BD  0871               	movf	??_bmp280_read_byte,w
  5149  14BE  00F3               	movwf	bmp280_read_byte@rec
  5150  14BF                     l2776:
  5151                           
  5152                           ;bmp280.h: 84: bmp280_nak();
  5153  14BF  160A  118A  22CD  160A  118A  	fcall	_bmp280_nak
  5154  14C4                     l2778:
  5155                           
  5156                           ;bmp280.h: 85: bmp280_stop();
  5157  14C4  160A  118A  22B2  160A  118A  	fcall	_bmp280_stop
  5158                           
  5159                           ;bmp280.h: 86: return rec;
  5160  14C9  0873               	movf	bmp280_read_byte@rec,w
  5161  14CA                     l308:
  5162  14CA  0008               	return
  5163  14CB                     __end_of_bmp280_read_byte:
  5164                           
  5165                           	psect	text32
  5166  12B2                     __ptext32:	
  5167 ;; *************** function _bmp280_stop *****************
  5168 ;; Defined at:
  5169 ;;		line 26 in file "bmp280.h"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;		None
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  1    wreg      void 
  5176 ;; Registers used:
  5177 ;;		status,2, status,0, pclath, cstack
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5183 ;;      Params:         0       0       0       0       0
  5184 ;;      Locals:         0       0       0       0       0
  5185 ;;      Temps:          0       0       0       0       0
  5186 ;;      Totals:         0       0       0       0       0
  5187 ;;Total ram usage:        0 bytes
  5188 ;; Hardware stack levels used: 1
  5189 ;; Hardware stack levels required when called: 1
  5190 ;; This function calls:
  5191 ;;		_bmp280_waitmssp
  5192 ;; This function is called by:
  5193 ;;		_bmp280_send_byte
  5194 ;;		_bmp280_read_byte
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function _bmp280_stop
  5200  12B2                     _bmp280_stop:
  5201  12B2                     l1956:	
  5202                           ;incstack = 0
  5203                           ; Regs used in _bmp280_stop: [status,2+status,0+pclath+cstack]
  5204                           
  5205                           
  5206                           ;bmp280.h: 28: PEN=1;
  5207  12B2  1683               	bsf	3,5	;RP0=1, select bank1
  5208  12B3  1303               	bcf	3,6	;RP1=0, select bank1
  5209  12B4  1511               	bsf	17,2	;volatile
  5210  12B5                     l1958:
  5211                           
  5212                           ;bmp280.h: 29: bmp280_waitmssp();
  5213  12B5  160A  118A  2291  160A  118A  	fcall	_bmp280_waitmssp
  5214  12BA                     l273:
  5215  12BA  0008               	return
  5216  12BB                     __end_of_bmp280_stop:
  5217                           
  5218                           	psect	text33
  5219  132C                     __ptext33:	
  5220 ;; *************** function _bmp280_send *****************
  5221 ;; Defined at:
  5222 ;;		line 53 in file "bmp280.h"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  dat             1    wreg     unsigned char 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  dat             1    0[COMMON] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      void 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0, pclath, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5236 ;;      Params:         0       0       0       0       0
  5237 ;;      Locals:         1       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0
  5239 ;;      Totals:         1       0       0       0       0
  5240 ;;Total ram usage:        1 bytes
  5241 ;; Hardware stack levels used: 1
  5242 ;; Hardware stack levels required when called: 1
  5243 ;; This function calls:
  5244 ;;		_bmp280_waitmssp
  5245 ;; This function is called by:
  5246 ;;		_bmp280_send_byte
  5247 ;;		_bmp280_read_byte
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           
  5252                           ;psect for function _bmp280_send
  5253  132C                     _bmp280_send:
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in _bmp280_send: [wreg+status,2+status,0+pclath+cstack]
  5257                           ;bmp280_send@dat stored from wreg
  5258  132C  00F0               	movwf	bmp280_send@dat
  5259  132D                     l291:	
  5260                           ;bmp280.h: 55: L1: SSPBUF=dat;
  5261                           
  5262  132D                     l1968:
  5263  132D  0870               	movf	bmp280_send@dat,w
  5264  132E  1283               	bcf	3,5	;RP0=0, select bank0
  5265  132F  1303               	bcf	3,6	;RP1=0, select bank0
  5266  1330  0093               	movwf	19	;volatile
  5267  1331                     l1970:
  5268                           
  5269                           ;bmp280.h: 56: bmp280_waitmssp();
  5270  1331  160A  118A  2291  160A  118A  	fcall	_bmp280_waitmssp
  5271  1336                     l292:	
  5272                           ;bmp280.h: 57: while(ACKSTAT){bmp280_restart;goto L1;}
  5273                           
  5274  1336  1683               	bsf	3,5	;RP0=1, select bank1
  5275  1337  1303               	bcf	3,6	;RP1=0, select bank1
  5276  1338  1B11               	btfsc	17,6	;volatile
  5277  1339  2B3B               	goto	u1251
  5278  133A  2B3C               	goto	u1250
  5279  133B                     u1251:
  5280  133B  2B2D               	goto	l291
  5281  133C                     u1250:
  5282  133C                     l295:
  5283  133C  0008               	return
  5284  133D                     __end_of_bmp280_send:
  5285                           
  5286                           	psect	text34
  5287  12A9                     __ptext34:	
  5288 ;; *************** function _bmp280_restart *****************
  5289 ;; Defined at:
  5290 ;;		line 31 in file "bmp280.h"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;		None
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;		None
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  1    wreg      void 
  5297 ;; Registers used:
  5298 ;;		status,2, status,0, pclath, cstack
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5304 ;;      Params:         0       0       0       0       0
  5305 ;;      Locals:         0       0       0       0       0
  5306 ;;      Temps:          0       0       0       0       0
  5307 ;;      Totals:         0       0       0       0       0
  5308 ;;Total ram usage:        0 bytes
  5309 ;; Hardware stack levels used: 1
  5310 ;; Hardware stack levels required when called: 1
  5311 ;; This function calls:
  5312 ;;		_bmp280_waitmssp
  5313 ;; This function is called by:
  5314 ;;		_bmp280_read_byte
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function _bmp280_restart
  5320  12A9                     _bmp280_restart:
  5321  12A9                     l1960:	
  5322                           ;incstack = 0
  5323                           ; Regs used in _bmp280_restart: [status,2+status,0+pclath+cstack]
  5324                           
  5325                           
  5326                           ;bmp280.h: 33: RSEN=1;
  5327  12A9  1683               	bsf	3,5	;RP0=1, select bank1
  5328  12AA  1303               	bcf	3,6	;RP1=0, select bank1
  5329  12AB  1491               	bsf	17,1	;volatile
  5330  12AC                     l1962:
  5331                           
  5332                           ;bmp280.h: 34: bmp280_waitmssp();
  5333  12AC  160A  118A  2291  160A  118A  	fcall	_bmp280_waitmssp
  5334  12B1                     l276:
  5335  12B1  0008               	return
  5336  12B2                     __end_of_bmp280_restart:
  5337                           
  5338                           	psect	text35
  5339  12EC                     __ptext35:	
  5340 ;; *************** function _bmp280_read *****************
  5341 ;; Defined at:
  5342 ;;		line 67 in file "bmp280.h"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      unsigned char 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0, pclath, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5356 ;;      Params:         0       0       0       0       0
  5357 ;;      Locals:         0       0       0       0       0
  5358 ;;      Temps:          0       0       0       0       0
  5359 ;;      Totals:         0       0       0       0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used: 1
  5362 ;; Hardware stack levels required when called: 1
  5363 ;; This function calls:
  5364 ;;		_bmp280_waitmssp
  5365 ;; This function is called by:
  5366 ;;		_bmp280_read_byte
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function _bmp280_read
  5372  12EC                     _bmp280_read:
  5373  12EC                     l1972:	
  5374                           ;incstack = 0
  5375                           ; Regs used in _bmp280_read: [wreg+status,2+status,0+pclath+cstack]
  5376                           
  5377                           
  5378                           ;bmp280.h: 69: RCEN=1;
  5379  12EC  1683               	bsf	3,5	;RP0=1, select bank1
  5380  12ED  1303               	bcf	3,6	;RP1=0, select bank1
  5381  12EE  1591               	bsf	17,3	;volatile
  5382  12EF                     l1974:
  5383                           
  5384                           ;bmp280.h: 70: bmp280_waitmssp();
  5385  12EF  160A  118A  2291  160A  118A  	fcall	_bmp280_waitmssp
  5386  12F4                     l1976:
  5387                           
  5388                           ;bmp280.h: 71: return SSPBUF;
  5389  12F4  1283               	bcf	3,5	;RP0=0, select bank0
  5390  12F5  1303               	bcf	3,6	;RP1=0, select bank0
  5391  12F6  0813               	movf	19,w	;volatile
  5392  12F7                     l301:
  5393  12F7  0008               	return
  5394  12F8                     __end_of_bmp280_read:
  5395                           
  5396                           	psect	text36
  5397  12CD                     __ptext36:	
  5398 ;; *************** function _bmp280_nak *****************
  5399 ;; Defined at:
  5400 ;;		line 42 in file "bmp280.h"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;		None
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		status,2, status,0, pclath, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5414 ;;      Params:         0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0
  5417 ;;      Totals:         0       0       0       0       0
  5418 ;;Total ram usage:        0 bytes
  5419 ;; Hardware stack levels used: 1
  5420 ;; Hardware stack levels required when called: 1
  5421 ;; This function calls:
  5422 ;;		_bmp280_waitmssp
  5423 ;; This function is called by:
  5424 ;;		_bmp280_read_byte
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _bmp280_nak
  5430  12CD                     _bmp280_nak:
  5431  12CD                     l1964:	
  5432                           ;incstack = 0
  5433                           ; Regs used in _bmp280_nak: [status,2+status,0+pclath+cstack]
  5434                           
  5435                           
  5436                           ;bmp280.h: 44: ACKDT=1;
  5437  12CD  1683               	bsf	3,5	;RP0=1, select bank1
  5438  12CE  1303               	bcf	3,6	;RP1=0, select bank1
  5439  12CF  1691               	bsf	17,5	;volatile
  5440                           
  5441                           ;bmp280.h: 45: ACKEN=1;
  5442  12D0  1611               	bsf	17,4	;volatile
  5443  12D1                     l1966:
  5444                           
  5445                           ;bmp280.h: 46: bmp280_waitmssp();
  5446  12D1  160A  118A  2291  160A  118A  	fcall	_bmp280_waitmssp
  5447  12D6                     l282:
  5448  12D6  0008               	return
  5449  12D7                     __end_of_bmp280_nak:
  5450                           
  5451                           	psect	text37
  5452  1291                     __ptext37:	
  5453 ;; *************** function _bmp280_waitmssp *****************
  5454 ;; Defined at:
  5455 ;;		line 48 in file "bmp280.h"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;		None
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  1    wreg      void 
  5462 ;; Registers used:
  5463 ;;		None
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5469 ;;      Params:         0       0       0       0       0
  5470 ;;      Locals:         0       0       0       0       0
  5471 ;;      Temps:          0       0       0       0       0
  5472 ;;      Totals:         0       0       0       0       0
  5473 ;;Total ram usage:        0 bytes
  5474 ;; Hardware stack levels used: 1
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_bmp280_start
  5479 ;;		_bmp280_stop
  5480 ;;		_bmp280_restart
  5481 ;;		_bmp280_nak
  5482 ;;		_bmp280_send
  5483 ;;		_bmp280_read
  5484 ;;		_bmp280_read_byte
  5485 ;;		_bmp280_ack
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           
  5490                           ;psect for function _bmp280_waitmssp
  5491  1291                     _bmp280_waitmssp:
  5492  1291                     l1890:	
  5493                           ;incstack = 0
  5494                           ; Regs used in _bmp280_waitmssp: []
  5495                           
  5496  1291                     l285:	
  5497                           ;bmp280.h: 50: while(!SSPIF);
  5498                           
  5499  1291  1283               	bcf	3,5	;RP0=0, select bank0
  5500  1292  1303               	bcf	3,6	;RP1=0, select bank0
  5501  1293  1D8C               	btfss	12,3	;volatile
  5502  1294  2A96               	goto	u1181
  5503  1295  2A97               	goto	u1180
  5504  1296                     u1181:
  5505  1296  2A91               	goto	l285
  5506  1297                     u1180:
  5507  1297                     l287:
  5508                           
  5509                           ;bmp280.h: 51: SSPIF=0;
  5510  1297  118C               	bcf	12,3	;volatile
  5511  1298                     l288:
  5512  1298  0008               	return
  5513  1299                     __end_of_bmp280_waitmssp:
  5514                           
  5515                           	psect	text38
  5516  1505                     __ptext38:	
  5517 ;; *************** function _bmp280_displaydata *****************
  5518 ;; Defined at:
  5519 ;;		line 311 in file "main.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;		None
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5533 ;;      Params:         0       0       0       0       0
  5534 ;;      Locals:         0       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0
  5536 ;;      Totals:         0       0       0       0       0
  5537 ;;Total ram usage:        0 bytes
  5538 ;; Hardware stack levels used: 1
  5539 ;; Hardware stack levels required when called: 2
  5540 ;; This function calls:
  5541 ;;		_LCD_Command
  5542 ;;		_show
  5543 ;;		_show_multidigits
  5544 ;; This function is called by:
  5545 ;;		_main
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function _bmp280_displaydata
  5551  1505                     _bmp280_displaydata:
  5552  1505                     l3026:	
  5553                           ;incstack = 0
  5554                           ; Regs used in _bmp280_displaydata: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5555                           
  5556                           
  5557                           ;main.c: 313: LCD_Command(0xD4);
  5558  1505  30D4               	movlw	212
  5559  1506  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  5560  150B                     l3028:
  5561                           
  5562                           ;main.c: 314: show("hPa:");
  5563  150B  3059               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  5564  150C  160A  118A  23E1  160A  118A  	fcall	_show
  5565  1511                     l3030:
  5566                           
  5567                           ;main.c: 315: LCD_Command(0xD9);
  5568  1511  30D9               	movlw	217
  5569  1512  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  5570  1517                     l3032:
  5571                           
  5572                           ;main.c: 316: show_multidigits(hpa);
  5573  1517  1283               	bcf	3,5	;RP0=0, select bank0
  5574  1518  1303               	bcf	3,6	;RP1=0, select bank0
  5575  1519  082F               	movf	_hpa+1,w
  5576  151A  00FA               	movwf	show_multidigits@val+1
  5577  151B  082E               	movf	_hpa,w
  5578  151C  00F9               	movwf	show_multidigits@val
  5579  151D  120A  158A  266E  160A  118A  	fcall	_show_multidigits
  5580  1522                     l3034:
  5581                           
  5582                           ;main.c: 318: LCD_Command(0xDE);
  5583  1522  30DE               	movlw	222
  5584  1523  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  5585                           
  5586                           ;main.c: 319: show("Alt:");
  5587  1528  305E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  5588  1529  160A  118A  23E1  160A  118A  	fcall	_show
  5589  152E                     l3036:
  5590                           
  5591                           ;main.c: 320: LCD_Command(0xE3);
  5592  152E  30E3               	movlw	227
  5593  152F  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  5594  1534                     l3038:
  5595                           
  5596                           ;main.c: 321: show_multidigits(altitude);
  5597  1534  1283               	bcf	3,5	;RP0=0, select bank0
  5598  1535  1303               	bcf	3,6	;RP1=0, select bank0
  5599  1536  082D               	movf	_altitude+1,w
  5600  1537  00FA               	movwf	show_multidigits@val+1
  5601  1538  082C               	movf	_altitude,w
  5602  1539  00F9               	movwf	show_multidigits@val
  5603  153A  120A  158A  266E  160A  118A  	fcall	_show_multidigits
  5604  153F                     l428:
  5605  153F  0008               	return
  5606  1540                     __end_of_bmp280_displaydata:
  5607                           
  5608                           	psect	text39
  5609  0E6E                     __ptext39:	
  5610 ;; *************** function _show_multidigits *****************
  5611 ;; Defined at:
  5612 ;;		line 93 in file "lcd4bit.h"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  val             2    9[COMMON] unsigned int 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;  remainder       2   12[BANK0 ] int 
  5617 ;;  result1         2   10[BANK0 ] int 
  5618 ;;  digit2          2    8[BANK0 ] int 
  5619 ;;  digit1          2    6[BANK0 ] int 
  5620 ;;  digit3          2    4[BANK0 ] int 
  5621 ;;  result          2    2[BANK0 ] int 
  5622 ;;  digit4          2    0[BANK0 ] int 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, pclath, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5632 ;;      Params:         2       0       0       0       0
  5633 ;;      Locals:         0      14       0       0       0
  5634 ;;      Temps:          0       0       0       0       0
  5635 ;;      Totals:         2      14       0       0       0
  5636 ;;Total ram usage:       16 bytes
  5637 ;; Hardware stack levels used: 1
  5638 ;; Hardware stack levels required when called: 1
  5639 ;; This function calls:
  5640 ;;		_LCD_Char
  5641 ;;		___awdiv
  5642 ;;		___awmod
  5643 ;;		___lwdiv
  5644 ;;		___lwmod
  5645 ;; This function is called by:
  5646 ;;		_print_dht11data
  5647 ;;		_bmp280_displaydata
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function _show_multidigits
  5653  0E6E                     _show_multidigits:
  5654  0E6E                     l2560:	
  5655                           ;incstack = 0
  5656                           ; Regs used in _show_multidigits: [wreg+status,2+status,0+pclath+cstack]
  5657                           
  5658                           
  5659                           ;lcd4bit.h: 95: int remainder, digit1, digit2, digit3, digit4, result, result1;;lcd4bit.
      +                          h: 96: if (val<=9)
  5660  0E6E  3000               	movlw	0
  5661  0E6F  027A               	subwf	show_multidigits@val+1,w
  5662  0E70  300A               	movlw	10
  5663  0E71  1903               	skipnz
  5664  0E72  0279               	subwf	show_multidigits@val,w
  5665  0E73  1803               	skipnc
  5666  0E74  2E76               	goto	u2611
  5667  0E75  2E77               	goto	u2610
  5668  0E76                     u2611:
  5669  0E76  2E7F               	goto	l2564
  5670  0E77                     u2610:
  5671  0E77                     l2562:
  5672                           
  5673                           ;lcd4bit.h: 97: {;lcd4bit.h: 98: LCD_Char(val+0x30);
  5674  0E77  0879               	movf	show_multidigits@val,w
  5675  0E78  3E30               	addlw	48
  5676  0E79  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  5677                           
  5678                           ;lcd4bit.h: 99: }
  5679  0E7E  2FFF               	goto	l137
  5680  0E7F                     l2564:
  5681                           
  5682                           ;lcd4bit.h: 100: else if (val>=10 && val <100)
  5683  0E7F  3000               	movlw	0
  5684  0E80  027A               	subwf	show_multidigits@val+1,w
  5685  0E81  300A               	movlw	10
  5686  0E82  1903               	skipnz
  5687  0E83  0279               	subwf	show_multidigits@val,w
  5688  0E84  1C03               	skipc
  5689  0E85  2E87               	goto	u2621
  5690  0E86  2E88               	goto	u2620
  5691  0E87                     u2621:
  5692  0E87  2ECC               	goto	l2578
  5693  0E88                     u2620:
  5694  0E88                     l2566:
  5695  0E88  3000               	movlw	0
  5696  0E89  027A               	subwf	show_multidigits@val+1,w
  5697  0E8A  3064               	movlw	100
  5698  0E8B  1903               	skipnz
  5699  0E8C  0279               	subwf	show_multidigits@val,w
  5700  0E8D  1803               	skipnc
  5701  0E8E  2E90               	goto	u2631
  5702  0E8F  2E91               	goto	u2630
  5703  0E90                     u2631:
  5704  0E90  2ECC               	goto	l2578
  5705  0E91                     u2630:
  5706  0E91                     l2568:
  5707                           
  5708                           ;lcd4bit.h: 101: {;lcd4bit.h: 102: remainder = val % 10;
  5709  0E91  300A               	movlw	10
  5710  0E92  00F0               	movwf	___lwmod@divisor
  5711  0E93  3000               	movlw	0
  5712  0E94  00F1               	movwf	___lwmod@divisor+1
  5713  0E95  087A               	movf	show_multidigits@val+1,w
  5714  0E96  00F3               	movwf	___lwmod@dividend+1
  5715  0E97  0879               	movf	show_multidigits@val,w
  5716  0E98  00F2               	movwf	___lwmod@dividend
  5717  0E99  160A  118A  2457  120A  158A  	fcall	___lwmod
  5718  0E9E  0871               	movf	?___lwmod+1,w
  5719  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  5720  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  5721  0EA1  00D4               	movwf	show_multidigits@remainder+1
  5722  0EA2  0870               	movf	?___lwmod,w
  5723  0EA3  00D3               	movwf	show_multidigits@remainder
  5724  0EA4                     l2570:
  5725                           
  5726                           ;lcd4bit.h: 103: digit1 = remainder;
  5727  0EA4  0854               	movf	show_multidigits@remainder+1,w
  5728  0EA5  00CE               	movwf	show_multidigits@digit1+1
  5729  0EA6  0853               	movf	show_multidigits@remainder,w
  5730  0EA7  00CD               	movwf	show_multidigits@digit1
  5731  0EA8                     l2572:
  5732                           
  5733                           ;lcd4bit.h: 104: digit2 = val/10;
  5734  0EA8  300A               	movlw	10
  5735  0EA9  00F0               	movwf	___lwdiv@divisor
  5736  0EAA  3000               	movlw	0
  5737  0EAB  00F1               	movwf	___lwdiv@divisor+1
  5738  0EAC  087A               	movf	show_multidigits@val+1,w
  5739  0EAD  00F3               	movwf	___lwdiv@dividend+1
  5740  0EAE  0879               	movf	show_multidigits@val,w
  5741  0EAF  00F2               	movwf	___lwdiv@dividend
  5742  0EB0  160A  118A  2602  120A  158A  	fcall	___lwdiv
  5743  0EB5  0871               	movf	?___lwdiv+1,w
  5744  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  5745  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  5746  0EB8  00D0               	movwf	show_multidigits@digit2+1
  5747  0EB9  0870               	movf	?___lwdiv,w
  5748  0EBA  00CF               	movwf	show_multidigits@digit2
  5749  0EBB                     l2574:
  5750                           
  5751                           ;lcd4bit.h: 105: LCD_Char(digit2+0x30);
  5752  0EBB  084F               	movf	show_multidigits@digit2,w
  5753  0EBC  3E30               	addlw	48
  5754  0EBD  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  5755  0EC2                     l2576:
  5756                           
  5757                           ;lcd4bit.h: 106: LCD_Char(digit1+0x30);
  5758  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  5759  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  5760  0EC4  084D               	movf	show_multidigits@digit1,w
  5761  0EC5  3E30               	addlw	48
  5762  0EC6  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  5763                           
  5764                           ;lcd4bit.h: 107: }
  5765  0ECB  2FFF               	goto	l137
  5766  0ECC                     l2578:
  5767                           
  5768                           ;lcd4bit.h: 108: else if (val>=100 && val <1000)
  5769  0ECC  3000               	movlw	0
  5770  0ECD  027A               	subwf	show_multidigits@val+1,w
  5771  0ECE  3064               	movlw	100
  5772  0ECF  1903               	skipnz
  5773  0ED0  0279               	subwf	show_multidigits@val,w
  5774  0ED1  1C03               	skipc
  5775  0ED2  2ED4               	goto	u2641
  5776  0ED3  2ED5               	goto	u2640
  5777  0ED4                     u2641:
  5778  0ED4  2F4C               	goto	l2596
  5779  0ED5                     u2640:
  5780  0ED5                     l2580:
  5781  0ED5  3003               	movlw	3
  5782  0ED6  027A               	subwf	show_multidigits@val+1,w
  5783  0ED7  30E8               	movlw	232
  5784  0ED8  1903               	skipnz
  5785  0ED9  0279               	subwf	show_multidigits@val,w
  5786  0EDA  1803               	skipnc
  5787  0EDB  2EDD               	goto	u2651
  5788  0EDC  2EDE               	goto	u2650
  5789  0EDD                     u2651:
  5790  0EDD  2F4C               	goto	l2596
  5791  0EDE                     u2650:
  5792  0EDE                     l2582:
  5793                           
  5794                           ;lcd4bit.h: 109: {;lcd4bit.h: 110: remainder = val % 10;
  5795  0EDE  300A               	movlw	10
  5796  0EDF  00F0               	movwf	___lwmod@divisor
  5797  0EE0  3000               	movlw	0
  5798  0EE1  00F1               	movwf	___lwmod@divisor+1
  5799  0EE2  087A               	movf	show_multidigits@val+1,w
  5800  0EE3  00F3               	movwf	___lwmod@dividend+1
  5801  0EE4  0879               	movf	show_multidigits@val,w
  5802  0EE5  00F2               	movwf	___lwmod@dividend
  5803  0EE6  160A  118A  2457  120A  158A  	fcall	___lwmod
  5804  0EEB  0871               	movf	?___lwmod+1,w
  5805  0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  5806  0EED  1303               	bcf	3,6	;RP1=0, select bank0
  5807  0EEE  00D4               	movwf	show_multidigits@remainder+1
  5808  0EEF  0870               	movf	?___lwmod,w
  5809  0EF0  00D3               	movwf	show_multidigits@remainder
  5810                           
  5811                           ;lcd4bit.h: 111: result1 = val /10;
  5812  0EF1  300A               	movlw	10
  5813  0EF2  00F0               	movwf	___lwdiv@divisor
  5814  0EF3  3000               	movlw	0
  5815  0EF4  00F1               	movwf	___lwdiv@divisor+1
  5816  0EF5  087A               	movf	show_multidigits@val+1,w
  5817  0EF6  00F3               	movwf	___lwdiv@dividend+1
  5818  0EF7  0879               	movf	show_multidigits@val,w
  5819  0EF8  00F2               	movwf	___lwdiv@dividend
  5820  0EF9  160A  118A  2602  120A  158A  	fcall	___lwdiv
  5821  0EFE  0871               	movf	?___lwdiv+1,w
  5822  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  5823  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  5824  0F01  00D2               	movwf	show_multidigits@result1+1
  5825  0F02  0870               	movf	?___lwdiv,w
  5826  0F03  00D1               	movwf	show_multidigits@result1
  5827  0F04                     l2584:
  5828                           
  5829                           ;lcd4bit.h: 112: digit1 = remainder;
  5830  0F04  0854               	movf	show_multidigits@remainder+1,w
  5831  0F05  00CE               	movwf	show_multidigits@digit1+1
  5832  0F06  0853               	movf	show_multidigits@remainder,w
  5833  0F07  00CD               	movwf	show_multidigits@digit1
  5834  0F08                     l2586:
  5835                           
  5836                           ;lcd4bit.h: 113: remainder = result1%10;
  5837  0F08  300A               	movlw	10
  5838  0F09  00F0               	movwf	___awmod@divisor
  5839  0F0A  3000               	movlw	0
  5840  0F0B  00F1               	movwf	___awmod@divisor+1
  5841  0F0C  0852               	movf	show_multidigits@result1+1,w
  5842  0F0D  00F3               	movwf	___awmod@dividend+1
  5843  0F0E  0851               	movf	show_multidigits@result1,w
  5844  0F0F  00F2               	movwf	___awmod@dividend
  5845  0F10  160A  118A  26DA  120A  158A  	fcall	___awmod
  5846  0F15  0871               	movf	?___awmod+1,w
  5847  0F16  1283               	bcf	3,5	;RP0=0, select bank0
  5848  0F17  1303               	bcf	3,6	;RP1=0, select bank0
  5849  0F18  00D4               	movwf	show_multidigits@remainder+1
  5850  0F19  0870               	movf	?___awmod,w
  5851  0F1A  00D3               	movwf	show_multidigits@remainder
  5852                           
  5853                           ;lcd4bit.h: 114: digit2 = remainder;
  5854  0F1B  0854               	movf	show_multidigits@remainder+1,w
  5855  0F1C  00D0               	movwf	show_multidigits@digit2+1
  5856  0F1D  0853               	movf	show_multidigits@remainder,w
  5857  0F1E  00CF               	movwf	show_multidigits@digit2
  5858  0F1F                     l2588:
  5859                           
  5860                           ;lcd4bit.h: 115: digit3 = result1/10;
  5861  0F1F  300A               	movlw	10
  5862  0F20  00F0               	movwf	___awdiv@divisor
  5863  0F21  3000               	movlw	0
  5864  0F22  00F1               	movwf	___awdiv@divisor+1
  5865  0F23  0852               	movf	show_multidigits@result1+1,w
  5866  0F24  00F3               	movwf	___awdiv@dividend+1
  5867  0F25  0851               	movf	show_multidigits@result1,w
  5868  0F26  00F2               	movwf	___awdiv@dividend
  5869  0F27  160A  118A  2799  120A  158A  	fcall	___awdiv
  5870  0F2C  0871               	movf	?___awdiv+1,w
  5871  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  5872  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  5873  0F2F  00CC               	movwf	show_multidigits@digit3+1
  5874  0F30  0870               	movf	?___awdiv,w
  5875  0F31  00CB               	movwf	show_multidigits@digit3
  5876  0F32                     l2590:
  5877                           
  5878                           ;lcd4bit.h: 116: LCD_Char(digit3+0x30);
  5879  0F32  084B               	movf	show_multidigits@digit3,w
  5880  0F33  3E30               	addlw	48
  5881  0F34  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  5882  0F39                     l2592:
  5883                           
  5884                           ;lcd4bit.h: 117: LCD_Char(digit2+0x30);
  5885  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  5887  0F3B  084F               	movf	show_multidigits@digit2,w
  5888  0F3C  3E30               	addlw	48
  5889  0F3D  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  5890  0F42                     l2594:
  5891                           
  5892                           ;lcd4bit.h: 118: LCD_Char(digit1+0x30);
  5893  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  5894  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  5895  0F44  084D               	movf	show_multidigits@digit1,w
  5896  0F45  3E30               	addlw	48
  5897  0F46  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  5898                           
  5899                           ;lcd4bit.h: 119: }
  5900  0F4B  2FFF               	goto	l137
  5901  0F4C                     l2596:
  5902                           
  5903                           ;lcd4bit.h: 120: else if (val>=1000 && val <9999)
  5904  0F4C  3003               	movlw	3
  5905  0F4D  027A               	subwf	show_multidigits@val+1,w
  5906  0F4E  30E8               	movlw	232
  5907  0F4F  1903               	skipnz
  5908  0F50  0279               	subwf	show_multidigits@val,w
  5909  0F51  1C03               	skipc
  5910  0F52  2F54               	goto	u2661
  5911  0F53  2F55               	goto	u2660
  5912  0F54                     u2661:
  5913  0F54  2FFF               	goto	l133
  5914  0F55                     u2660:
  5915  0F55                     l2598:
  5916  0F55  3027               	movlw	39
  5917  0F56  027A               	subwf	show_multidigits@val+1,w
  5918  0F57  300F               	movlw	15
  5919  0F58  1903               	skipnz
  5920  0F59  0279               	subwf	show_multidigits@val,w
  5921  0F5A  1803               	skipnc
  5922  0F5B  2F5D               	goto	u2671
  5923  0F5C  2F5E               	goto	u2670
  5924  0F5D                     u2671:
  5925  0F5D  2FFF               	goto	l133
  5926  0F5E                     u2670:
  5927  0F5E                     l2600:
  5928                           
  5929                           ;lcd4bit.h: 121: {;lcd4bit.h: 122: remainder = val % 10;
  5930  0F5E  300A               	movlw	10
  5931  0F5F  00F0               	movwf	___lwmod@divisor
  5932  0F60  3000               	movlw	0
  5933  0F61  00F1               	movwf	___lwmod@divisor+1
  5934  0F62  087A               	movf	show_multidigits@val+1,w
  5935  0F63  00F3               	movwf	___lwmod@dividend+1
  5936  0F64  0879               	movf	show_multidigits@val,w
  5937  0F65  00F2               	movwf	___lwmod@dividend
  5938  0F66  160A  118A  2457  120A  158A  	fcall	___lwmod
  5939  0F6B  0871               	movf	?___lwmod+1,w
  5940  0F6C  1283               	bcf	3,5	;RP0=0, select bank0
  5941  0F6D  1303               	bcf	3,6	;RP1=0, select bank0
  5942  0F6E  00D4               	movwf	show_multidigits@remainder+1
  5943  0F6F  0870               	movf	?___lwmod,w
  5944  0F70  00D3               	movwf	show_multidigits@remainder
  5945                           
  5946                           ;lcd4bit.h: 123: result1 = val /10;
  5947  0F71  300A               	movlw	10
  5948  0F72  00F0               	movwf	___lwdiv@divisor
  5949  0F73  3000               	movlw	0
  5950  0F74  00F1               	movwf	___lwdiv@divisor+1
  5951  0F75  087A               	movf	show_multidigits@val+1,w
  5952  0F76  00F3               	movwf	___lwdiv@dividend+1
  5953  0F77  0879               	movf	show_multidigits@val,w
  5954  0F78  00F2               	movwf	___lwdiv@dividend
  5955  0F79  160A  118A  2602  120A  158A  	fcall	___lwdiv
  5956  0F7E  0871               	movf	?___lwdiv+1,w
  5957  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  5958  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  5959  0F81  00D2               	movwf	show_multidigits@result1+1
  5960  0F82  0870               	movf	?___lwdiv,w
  5961  0F83  00D1               	movwf	show_multidigits@result1
  5962  0F84                     l2602:
  5963                           
  5964                           ;lcd4bit.h: 124: digit1 = remainder;
  5965  0F84  0854               	movf	show_multidigits@remainder+1,w
  5966  0F85  00CE               	movwf	show_multidigits@digit1+1
  5967  0F86  0853               	movf	show_multidigits@remainder,w
  5968  0F87  00CD               	movwf	show_multidigits@digit1
  5969  0F88                     l2604:
  5970                           
  5971                           ;lcd4bit.h: 125: remainder = result1%10;
  5972  0F88  300A               	movlw	10
  5973  0F89  00F0               	movwf	___awmod@divisor
  5974  0F8A  3000               	movlw	0
  5975  0F8B  00F1               	movwf	___awmod@divisor+1
  5976  0F8C  0852               	movf	show_multidigits@result1+1,w
  5977  0F8D  00F3               	movwf	___awmod@dividend+1
  5978  0F8E  0851               	movf	show_multidigits@result1,w
  5979  0F8F  00F2               	movwf	___awmod@dividend
  5980  0F90  160A  118A  26DA  120A  158A  	fcall	___awmod
  5981  0F95  0871               	movf	?___awmod+1,w
  5982  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  5983  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  5984  0F98  00D4               	movwf	show_multidigits@remainder+1
  5985  0F99  0870               	movf	?___awmod,w
  5986  0F9A  00D3               	movwf	show_multidigits@remainder
  5987                           
  5988                           ;lcd4bit.h: 126: digit2 = remainder;
  5989  0F9B  0854               	movf	show_multidigits@remainder+1,w
  5990  0F9C  00D0               	movwf	show_multidigits@digit2+1
  5991  0F9D  0853               	movf	show_multidigits@remainder,w
  5992  0F9E  00CF               	movwf	show_multidigits@digit2
  5993  0F9F                     l2606:
  5994                           
  5995                           ;lcd4bit.h: 127: result = result1/10;
  5996  0F9F  300A               	movlw	10
  5997  0FA0  00F0               	movwf	___awdiv@divisor
  5998  0FA1  3000               	movlw	0
  5999  0FA2  00F1               	movwf	___awdiv@divisor+1
  6000  0FA3  0852               	movf	show_multidigits@result1+1,w
  6001  0FA4  00F3               	movwf	___awdiv@dividend+1
  6002  0FA5  0851               	movf	show_multidigits@result1,w
  6003  0FA6  00F2               	movwf	___awdiv@dividend
  6004  0FA7  160A  118A  2799  120A  158A  	fcall	___awdiv
  6005  0FAC  0871               	movf	?___awdiv+1,w
  6006  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  6007  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  6008  0FAF  00CA               	movwf	show_multidigits@result+1
  6009  0FB0  0870               	movf	?___awdiv,w
  6010  0FB1  00C9               	movwf	show_multidigits@result
  6011  0FB2                     l2608:
  6012                           
  6013                           ;lcd4bit.h: 128: remainder = result%10;
  6014  0FB2  300A               	movlw	10
  6015  0FB3  00F0               	movwf	___awmod@divisor
  6016  0FB4  3000               	movlw	0
  6017  0FB5  00F1               	movwf	___awmod@divisor+1
  6018  0FB6  084A               	movf	show_multidigits@result+1,w
  6019  0FB7  00F3               	movwf	___awmod@dividend+1
  6020  0FB8  0849               	movf	show_multidigits@result,w
  6021  0FB9  00F2               	movwf	___awmod@dividend
  6022  0FBA  160A  118A  26DA  120A  158A  	fcall	___awmod
  6023  0FBF  0871               	movf	?___awmod+1,w
  6024  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  6025  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  6026  0FC2  00D4               	movwf	show_multidigits@remainder+1
  6027  0FC3  0870               	movf	?___awmod,w
  6028  0FC4  00D3               	movwf	show_multidigits@remainder
  6029                           
  6030                           ;lcd4bit.h: 129: digit3=remainder;
  6031  0FC5  0854               	movf	show_multidigits@remainder+1,w
  6032  0FC6  00CC               	movwf	show_multidigits@digit3+1
  6033  0FC7  0853               	movf	show_multidigits@remainder,w
  6034  0FC8  00CB               	movwf	show_multidigits@digit3
  6035  0FC9                     l2610:
  6036                           
  6037                           ;lcd4bit.h: 130: digit4 = result/10;
  6038  0FC9  300A               	movlw	10
  6039  0FCA  00F0               	movwf	___awdiv@divisor
  6040  0FCB  3000               	movlw	0
  6041  0FCC  00F1               	movwf	___awdiv@divisor+1
  6042  0FCD  084A               	movf	show_multidigits@result+1,w
  6043  0FCE  00F3               	movwf	___awdiv@dividend+1
  6044  0FCF  0849               	movf	show_multidigits@result,w
  6045  0FD0  00F2               	movwf	___awdiv@dividend
  6046  0FD1  160A  118A  2799  120A  158A  	fcall	___awdiv
  6047  0FD6  0871               	movf	?___awdiv+1,w
  6048  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  6050  0FD9  00C8               	movwf	show_multidigits@digit4+1
  6051  0FDA  0870               	movf	?___awdiv,w
  6052  0FDB  00C7               	movwf	show_multidigits@digit4
  6053  0FDC                     l2612:
  6054                           
  6055                           ;lcd4bit.h: 131: LCD_Char(digit4+0x30);
  6056  0FDC  0847               	movf	show_multidigits@digit4,w
  6057  0FDD  3E30               	addlw	48
  6058  0FDE  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  6059  0FE3                     l2614:
  6060                           
  6061                           ;lcd4bit.h: 132: LCD_Char(digit3+0x30);
  6062  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  6063  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  6064  0FE5  084B               	movf	show_multidigits@digit3,w
  6065  0FE6  3E30               	addlw	48
  6066  0FE7  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  6067  0FEC                     l2616:
  6068                           
  6069                           ;lcd4bit.h: 133: LCD_Char(digit2+0x30);
  6070  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  6071  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  6072  0FEE  084F               	movf	show_multidigits@digit2,w
  6073  0FEF  3E30               	addlw	48
  6074  0FF0  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  6075  0FF5                     l2618:
  6076                           
  6077                           ;lcd4bit.h: 134: LCD_Char(digit1+0x30);
  6078  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  6079  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  6080  0FF7  084D               	movf	show_multidigits@digit1,w
  6081  0FF8  3E30               	addlw	48
  6082  0FF9  160A  118A  2580  120A  158A  	fcall	_LCD_Char
  6083  0FFE  2FFF               	goto	l137
  6084  0FFF                     l133:
  6085  0FFF                     l137:
  6086  0FFF  0008               	return
  6087  1000                     __end_of_show_multidigits:
  6088                           
  6089                           	psect	text40
  6090  1457                     __ptext40:	
  6091 ;; *************** function ___lwmod *****************
  6092 ;; Defined at:
  6093 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  divisor         2    0[COMMON] unsigned int 
  6096 ;;  dividend        2    2[COMMON] unsigned int 
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;  counter         1    5[COMMON] unsigned char 
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  2    0[COMMON] unsigned int 
  6101 ;; Registers used:
  6102 ;;		wreg, status,2, status,0
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6108 ;;      Params:         4       0       0       0       0
  6109 ;;      Locals:         1       0       0       0       0
  6110 ;;      Temps:          1       0       0       0       0
  6111 ;;      Totals:         6       0       0       0       0
  6112 ;;Total ram usage:        6 bytes
  6113 ;; Hardware stack levels used: 1
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_LCD_num
  6118 ;;		_show_multidigits
  6119 ;;		_tx_sn
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           
  6124                           ;psect for function ___lwmod
  6125  1457                     ___lwmod:
  6126  1457                     l2154:	
  6127                           ;incstack = 0
  6128                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6129                           
  6130  1457  0870               	movf	___lwmod@divisor,w
  6131  1458  0471               	iorwf	___lwmod@divisor+1,w
  6132  1459  1903               	btfsc	3,2
  6133  145A  2C5C               	goto	u1701
  6134  145B  2C5D               	goto	u1700
  6135  145C                     u1701:
  6136  145C  2C8C               	goto	l2172
  6137  145D                     u1700:
  6138  145D                     l2156:
  6139  145D  01F5               	clrf	___lwmod@counter
  6140  145E  0AF5               	incf	___lwmod@counter,f
  6141  145F  2C6B               	goto	l2162
  6142  1460                     l2158:
  6143  1460  3001               	movlw	1
  6144  1461                     u1715:
  6145  1461  1003               	clrc
  6146  1462  0DF0               	rlf	___lwmod@divisor,f
  6147  1463  0DF1               	rlf	___lwmod@divisor+1,f
  6148  1464  3EFF               	addlw	-1
  6149  1465  1D03               	skipz
  6150  1466  2C61               	goto	u1715
  6151  1467                     l2160:
  6152  1467  3001               	movlw	1
  6153  1468  00F4               	movwf	??___lwmod
  6154  1469  0874               	movf	??___lwmod,w
  6155  146A  07F5               	addwf	___lwmod@counter,f
  6156  146B                     l2162:
  6157  146B  1FF1               	btfss	___lwmod@divisor+1,7
  6158  146C  2C6E               	goto	u1721
  6159  146D  2C6F               	goto	u1720
  6160  146E                     u1721:
  6161  146E  2C60               	goto	l2158
  6162  146F                     u1720:
  6163  146F                     l2164:
  6164  146F  0871               	movf	___lwmod@divisor+1,w
  6165  1470  0273               	subwf	___lwmod@dividend+1,w
  6166  1471  1D03               	skipz
  6167  1472  2C75               	goto	u1735
  6168  1473  0870               	movf	___lwmod@divisor,w
  6169  1474  0272               	subwf	___lwmod@dividend,w
  6170  1475                     u1735:
  6171  1475  1C03               	skipc
  6172  1476  2C78               	goto	u1731
  6173  1477  2C79               	goto	u1730
  6174  1478                     u1731:
  6175  1478  2C7F               	goto	l2168
  6176  1479                     u1730:
  6177  1479                     l2166:
  6178  1479  0870               	movf	___lwmod@divisor,w
  6179  147A  02F2               	subwf	___lwmod@dividend,f
  6180  147B  0871               	movf	___lwmod@divisor+1,w
  6181  147C  1C03               	skipc
  6182  147D  03F3               	decf	___lwmod@dividend+1,f
  6183  147E  02F3               	subwf	___lwmod@dividend+1,f
  6184  147F                     l2168:
  6185  147F  3001               	movlw	1
  6186  1480                     u1745:
  6187  1480  1003               	clrc
  6188  1481  0CF1               	rrf	___lwmod@divisor+1,f
  6189  1482  0CF0               	rrf	___lwmod@divisor,f
  6190  1483  3EFF               	addlw	-1
  6191  1484  1D03               	skipz
  6192  1485  2C80               	goto	u1745
  6193  1486                     l2170:
  6194  1486  3001               	movlw	1
  6195  1487  02F5               	subwf	___lwmod@counter,f
  6196  1488  1D03               	btfss	3,2
  6197  1489  2C8B               	goto	u1751
  6198  148A  2C8C               	goto	u1750
  6199  148B                     u1751:
  6200  148B  2C6F               	goto	l2164
  6201  148C                     u1750:
  6202  148C                     l2172:
  6203  148C  0873               	movf	___lwmod@dividend+1,w
  6204  148D  00F1               	movwf	?___lwmod+1
  6205  148E  0872               	movf	___lwmod@dividend,w
  6206  148F  00F0               	movwf	?___lwmod
  6207  1490                     l799:
  6208  1490  0008               	return
  6209  1491                     __end_of___lwmod:
  6210                           
  6211                           	psect	text41
  6212  1602                     __ptext41:	
  6213 ;; *************** function ___lwdiv *****************
  6214 ;; Defined at:
  6215 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  divisor         2    0[COMMON] unsigned int 
  6218 ;;  dividend        2    2[COMMON] unsigned int 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  quotient        2    5[COMMON] unsigned int 
  6221 ;;  counter         1    7[COMMON] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  2    0[COMMON] unsigned int 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6231 ;;      Params:         4       0       0       0       0
  6232 ;;      Locals:         3       0       0       0       0
  6233 ;;      Temps:          1       0       0       0       0
  6234 ;;      Totals:         8       0       0       0       0
  6235 ;;Total ram usage:        8 bytes
  6236 ;; Hardware stack levels used: 1
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_LCD_num
  6241 ;;		_show_multidigits
  6242 ;;		_tx_sn
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           
  6247                           ;psect for function ___lwdiv
  6248  1602                     ___lwdiv:
  6249  1602                     l2128:	
  6250                           ;incstack = 0
  6251                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6252                           
  6253  1602  01F5               	clrf	___lwdiv@quotient
  6254  1603  01F6               	clrf	___lwdiv@quotient+1
  6255  1604                     l2130:
  6256  1604  0870               	movf	___lwdiv@divisor,w
  6257  1605  0471               	iorwf	___lwdiv@divisor+1,w
  6258  1606  1903               	btfsc	3,2
  6259  1607  2E09               	goto	u1631
  6260  1608  2E0A               	goto	u1630
  6261  1609                     u1631:
  6262  1609  2E41               	goto	l2150
  6263  160A                     u1630:
  6264  160A                     l2132:
  6265  160A  01F7               	clrf	___lwdiv@counter
  6266  160B  0AF7               	incf	___lwdiv@counter,f
  6267  160C  2E18               	goto	l2138
  6268  160D                     l2134:
  6269  160D  3001               	movlw	1
  6270  160E                     u1645:
  6271  160E  1003               	clrc
  6272  160F  0DF0               	rlf	___lwdiv@divisor,f
  6273  1610  0DF1               	rlf	___lwdiv@divisor+1,f
  6274  1611  3EFF               	addlw	-1
  6275  1612  1D03               	skipz
  6276  1613  2E0E               	goto	u1645
  6277  1614                     l2136:
  6278  1614  3001               	movlw	1
  6279  1615  00F4               	movwf	??___lwdiv
  6280  1616  0874               	movf	??___lwdiv,w
  6281  1617  07F7               	addwf	___lwdiv@counter,f
  6282  1618                     l2138:
  6283  1618  1FF1               	btfss	___lwdiv@divisor+1,7
  6284  1619  2E1B               	goto	u1651
  6285  161A  2E1C               	goto	u1650
  6286  161B                     u1651:
  6287  161B  2E0D               	goto	l2134
  6288  161C                     u1650:
  6289  161C                     l2140:
  6290  161C  3001               	movlw	1
  6291  161D                     u1665:
  6292  161D  1003               	clrc
  6293  161E  0DF5               	rlf	___lwdiv@quotient,f
  6294  161F  0DF6               	rlf	___lwdiv@quotient+1,f
  6295  1620  3EFF               	addlw	-1
  6296  1621  1D03               	skipz
  6297  1622  2E1D               	goto	u1665
  6298  1623  0871               	movf	___lwdiv@divisor+1,w
  6299  1624  0273               	subwf	___lwdiv@dividend+1,w
  6300  1625  1D03               	skipz
  6301  1626  2E29               	goto	u1675
  6302  1627  0870               	movf	___lwdiv@divisor,w
  6303  1628  0272               	subwf	___lwdiv@dividend,w
  6304  1629                     u1675:
  6305  1629  1C03               	skipc
  6306  162A  2E2C               	goto	u1671
  6307  162B  2E2D               	goto	u1670
  6308  162C                     u1671:
  6309  162C  2E34               	goto	l2146
  6310  162D                     u1670:
  6311  162D                     l2142:
  6312  162D  0870               	movf	___lwdiv@divisor,w
  6313  162E  02F2               	subwf	___lwdiv@dividend,f
  6314  162F  0871               	movf	___lwdiv@divisor+1,w
  6315  1630  1C03               	skipc
  6316  1631  03F3               	decf	___lwdiv@dividend+1,f
  6317  1632  02F3               	subwf	___lwdiv@dividend+1,f
  6318  1633                     l2144:
  6319  1633  1475               	bsf	___lwdiv@quotient,0
  6320  1634                     l2146:
  6321  1634  3001               	movlw	1
  6322  1635                     u1685:
  6323  1635  1003               	clrc
  6324  1636  0CF1               	rrf	___lwdiv@divisor+1,f
  6325  1637  0CF0               	rrf	___lwdiv@divisor,f
  6326  1638  3EFF               	addlw	-1
  6327  1639  1D03               	skipz
  6328  163A  2E35               	goto	u1685
  6329  163B                     l2148:
  6330  163B  3001               	movlw	1
  6331  163C  02F7               	subwf	___lwdiv@counter,f
  6332  163D  1D03               	btfss	3,2
  6333  163E  2E40               	goto	u1691
  6334  163F  2E41               	goto	u1690
  6335  1640                     u1691:
  6336  1640  2E1C               	goto	l2140
  6337  1641                     u1690:
  6338  1641                     l2150:
  6339  1641  0876               	movf	___lwdiv@quotient+1,w
  6340  1642  00F1               	movwf	?___lwdiv+1
  6341  1643  0875               	movf	___lwdiv@quotient,w
  6342  1644  00F0               	movwf	?___lwdiv
  6343  1645                     l789:
  6344  1645  0008               	return
  6345  1646                     __end_of___lwdiv:
  6346                           
  6347                           	psect	text42
  6348  16DA                     __ptext42:	
  6349 ;; *************** function ___awmod *****************
  6350 ;; Defined at:
  6351 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  divisor         2    0[COMMON] int 
  6354 ;;  dividend        2    2[COMMON] int 
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  sign            1    6[COMMON] unsigned char 
  6357 ;;  counter         1    5[COMMON] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  2    0[COMMON] int 
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6367 ;;      Params:         4       0       0       0       0
  6368 ;;      Locals:         2       0       0       0       0
  6369 ;;      Temps:          1       0       0       0       0
  6370 ;;      Totals:         7       0       0       0       0
  6371 ;;Total ram usage:        7 bytes
  6372 ;; Hardware stack levels used: 1
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_show_multidigits
  6377 ;;		_tx_sn
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function ___awmod
  6383  16DA                     ___awmod:
  6384  16DA                     l2078:	
  6385                           ;incstack = 0
  6386                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6387                           
  6388  16DA  01F6               	clrf	___awmod@sign
  6389  16DB                     l2080:
  6390  16DB  1FF3               	btfss	___awmod@dividend+1,7
  6391  16DC  2EDE               	goto	u1511
  6392  16DD  2EDF               	goto	u1510
  6393  16DE                     u1511:
  6394  16DE  2EE6               	goto	l2086
  6395  16DF                     u1510:
  6396  16DF                     l2082:
  6397  16DF  09F2               	comf	___awmod@dividend,f
  6398  16E0  09F3               	comf	___awmod@dividend+1,f
  6399  16E1  0AF2               	incf	___awmod@dividend,f
  6400  16E2  1903               	skipnz
  6401  16E3  0AF3               	incf	___awmod@dividend+1,f
  6402  16E4                     l2084:
  6403  16E4  01F6               	clrf	___awmod@sign
  6404  16E5  0AF6               	incf	___awmod@sign,f
  6405  16E6                     l2086:
  6406  16E6  1FF1               	btfss	___awmod@divisor+1,7
  6407  16E7  2EE9               	goto	u1521
  6408  16E8  2EEA               	goto	u1520
  6409  16E9                     u1521:
  6410  16E9  2EEF               	goto	l2090
  6411  16EA                     u1520:
  6412  16EA                     l2088:
  6413  16EA  09F0               	comf	___awmod@divisor,f
  6414  16EB  09F1               	comf	___awmod@divisor+1,f
  6415  16EC  0AF0               	incf	___awmod@divisor,f
  6416  16ED  1903               	skipnz
  6417  16EE  0AF1               	incf	___awmod@divisor+1,f
  6418  16EF                     l2090:
  6419  16EF  0870               	movf	___awmod@divisor,w
  6420  16F0  0471               	iorwf	___awmod@divisor+1,w
  6421  16F1  1903               	btfsc	3,2
  6422  16F2  2EF4               	goto	u1531
  6423  16F3  2EF5               	goto	u1530
  6424  16F4                     u1531:
  6425  16F4  2F24               	goto	l2108
  6426  16F5                     u1530:
  6427  16F5                     l2092:
  6428  16F5  01F5               	clrf	___awmod@counter
  6429  16F6  0AF5               	incf	___awmod@counter,f
  6430  16F7  2F03               	goto	l2098
  6431  16F8                     l2094:
  6432  16F8  3001               	movlw	1
  6433  16F9                     u1545:
  6434  16F9  1003               	clrc
  6435  16FA  0DF0               	rlf	___awmod@divisor,f
  6436  16FB  0DF1               	rlf	___awmod@divisor+1,f
  6437  16FC  3EFF               	addlw	-1
  6438  16FD  1D03               	skipz
  6439  16FE  2EF9               	goto	u1545
  6440  16FF                     l2096:
  6441  16FF  3001               	movlw	1
  6442  1700  00F4               	movwf	??___awmod
  6443  1701  0874               	movf	??___awmod,w
  6444  1702  07F5               	addwf	___awmod@counter,f
  6445  1703                     l2098:
  6446  1703  1FF1               	btfss	___awmod@divisor+1,7
  6447  1704  2F06               	goto	u1551
  6448  1705  2F07               	goto	u1550
  6449  1706                     u1551:
  6450  1706  2EF8               	goto	l2094
  6451  1707                     u1550:
  6452  1707                     l2100:
  6453  1707  0871               	movf	___awmod@divisor+1,w
  6454  1708  0273               	subwf	___awmod@dividend+1,w
  6455  1709  1D03               	skipz
  6456  170A  2F0D               	goto	u1565
  6457  170B  0870               	movf	___awmod@divisor,w
  6458  170C  0272               	subwf	___awmod@dividend,w
  6459  170D                     u1565:
  6460  170D  1C03               	skipc
  6461  170E  2F10               	goto	u1561
  6462  170F  2F11               	goto	u1560
  6463  1710                     u1561:
  6464  1710  2F17               	goto	l2104
  6465  1711                     u1560:
  6466  1711                     l2102:
  6467  1711  0870               	movf	___awmod@divisor,w
  6468  1712  02F2               	subwf	___awmod@dividend,f
  6469  1713  0871               	movf	___awmod@divisor+1,w
  6470  1714  1C03               	skipc
  6471  1715  03F3               	decf	___awmod@dividend+1,f
  6472  1716  02F3               	subwf	___awmod@dividend+1,f
  6473  1717                     l2104:
  6474  1717  3001               	movlw	1
  6475  1718                     u1575:
  6476  1718  1003               	clrc
  6477  1719  0CF1               	rrf	___awmod@divisor+1,f
  6478  171A  0CF0               	rrf	___awmod@divisor,f
  6479  171B  3EFF               	addlw	-1
  6480  171C  1D03               	skipz
  6481  171D  2F18               	goto	u1575
  6482  171E                     l2106:
  6483  171E  3001               	movlw	1
  6484  171F  02F5               	subwf	___awmod@counter,f
  6485  1720  1D03               	btfss	3,2
  6486  1721  2F23               	goto	u1581
  6487  1722  2F24               	goto	u1580
  6488  1723                     u1581:
  6489  1723  2F07               	goto	l2100
  6490  1724                     u1580:
  6491  1724                     l2108:
  6492  1724  0876               	movf	___awmod@sign,w
  6493  1725  1903               	btfsc	3,2
  6494  1726  2F28               	goto	u1591
  6495  1727  2F29               	goto	u1590
  6496  1728                     u1591:
  6497  1728  2F2E               	goto	l2112
  6498  1729                     u1590:
  6499  1729                     l2110:
  6500  1729  09F2               	comf	___awmod@dividend,f
  6501  172A  09F3               	comf	___awmod@dividend+1,f
  6502  172B  0AF2               	incf	___awmod@dividend,f
  6503  172C  1903               	skipnz
  6504  172D  0AF3               	incf	___awmod@dividend+1,f
  6505  172E                     l2112:
  6506  172E  0873               	movf	___awmod@dividend+1,w
  6507  172F  00F1               	movwf	?___awmod+1
  6508  1730  0872               	movf	___awmod@dividend,w
  6509  1731  00F0               	movwf	?___awmod
  6510  1732                     l683:
  6511  1732  0008               	return
  6512  1733                     __end_of___awmod:
  6513                           
  6514                           	psect	text43
  6515  1799                     __ptext43:	
  6516 ;; *************** function ___awdiv *****************
  6517 ;; Defined at:
  6518 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  divisor         2    0[COMMON] int 
  6521 ;;  dividend        2    2[COMMON] int 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  quotient        2    7[COMMON] int 
  6524 ;;  sign            1    6[COMMON] unsigned char 
  6525 ;;  counter         1    5[COMMON] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  2    0[COMMON] int 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6535 ;;      Params:         4       0       0       0       0
  6536 ;;      Locals:         4       0       0       0       0
  6537 ;;      Temps:          1       0       0       0       0
  6538 ;;      Totals:         9       0       0       0       0
  6539 ;;Total ram usage:        9 bytes
  6540 ;; Hardware stack levels used: 1
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_show_multidigits
  6545 ;;		_tx_sn
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function ___awdiv
  6551  1799                     ___awdiv:
  6552  1799                     l2034:	
  6553                           ;incstack = 0
  6554                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6555                           
  6556  1799  01F6               	clrf	___awdiv@sign
  6557  179A                     l2036:
  6558  179A  1FF1               	btfss	___awdiv@divisor+1,7
  6559  179B  2F9D               	goto	u1411
  6560  179C  2F9E               	goto	u1410
  6561  179D                     u1411:
  6562  179D  2FA5               	goto	l2042
  6563  179E                     u1410:
  6564  179E                     l2038:
  6565  179E  09F0               	comf	___awdiv@divisor,f
  6566  179F  09F1               	comf	___awdiv@divisor+1,f
  6567  17A0  0AF0               	incf	___awdiv@divisor,f
  6568  17A1  1903               	skipnz
  6569  17A2  0AF1               	incf	___awdiv@divisor+1,f
  6570  17A3                     l2040:
  6571  17A3  01F6               	clrf	___awdiv@sign
  6572  17A4  0AF6               	incf	___awdiv@sign,f
  6573  17A5                     l2042:
  6574  17A5  1FF3               	btfss	___awdiv@dividend+1,7
  6575  17A6  2FA8               	goto	u1421
  6576  17A7  2FA9               	goto	u1420
  6577  17A8                     u1421:
  6578  17A8  2FB2               	goto	l2048
  6579  17A9                     u1420:
  6580  17A9                     l2044:
  6581  17A9  09F2               	comf	___awdiv@dividend,f
  6582  17AA  09F3               	comf	___awdiv@dividend+1,f
  6583  17AB  0AF2               	incf	___awdiv@dividend,f
  6584  17AC  1903               	skipnz
  6585  17AD  0AF3               	incf	___awdiv@dividend+1,f
  6586  17AE                     l2046:
  6587  17AE  3001               	movlw	1
  6588  17AF  00F4               	movwf	??___awdiv
  6589  17B0  0874               	movf	??___awdiv,w
  6590  17B1  06F6               	xorwf	___awdiv@sign,f
  6591  17B2                     l2048:
  6592  17B2  01F7               	clrf	___awdiv@quotient
  6593  17B3  01F8               	clrf	___awdiv@quotient+1
  6594  17B4                     l2050:
  6595  17B4  0870               	movf	___awdiv@divisor,w
  6596  17B5  0471               	iorwf	___awdiv@divisor+1,w
  6597  17B6  1903               	btfsc	3,2
  6598  17B7  2FB9               	goto	u1431
  6599  17B8  2FBA               	goto	u1430
  6600  17B9                     u1431:
  6601  17B9  2FF1               	goto	l2070
  6602  17BA                     u1430:
  6603  17BA                     l2052:
  6604  17BA  01F5               	clrf	___awdiv@counter
  6605  17BB  0AF5               	incf	___awdiv@counter,f
  6606  17BC  2FC8               	goto	l2058
  6607  17BD                     l2054:
  6608  17BD  3001               	movlw	1
  6609  17BE                     u1445:
  6610  17BE  1003               	clrc
  6611  17BF  0DF0               	rlf	___awdiv@divisor,f
  6612  17C0  0DF1               	rlf	___awdiv@divisor+1,f
  6613  17C1  3EFF               	addlw	-1
  6614  17C2  1D03               	skipz
  6615  17C3  2FBE               	goto	u1445
  6616  17C4                     l2056:
  6617  17C4  3001               	movlw	1
  6618  17C5  00F4               	movwf	??___awdiv
  6619  17C6  0874               	movf	??___awdiv,w
  6620  17C7  07F5               	addwf	___awdiv@counter,f
  6621  17C8                     l2058:
  6622  17C8  1FF1               	btfss	___awdiv@divisor+1,7
  6623  17C9  2FCB               	goto	u1451
  6624  17CA  2FCC               	goto	u1450
  6625  17CB                     u1451:
  6626  17CB  2FBD               	goto	l2054
  6627  17CC                     u1450:
  6628  17CC                     l2060:
  6629  17CC  3001               	movlw	1
  6630  17CD                     u1465:
  6631  17CD  1003               	clrc
  6632  17CE  0DF7               	rlf	___awdiv@quotient,f
  6633  17CF  0DF8               	rlf	___awdiv@quotient+1,f
  6634  17D0  3EFF               	addlw	-1
  6635  17D1  1D03               	skipz
  6636  17D2  2FCD               	goto	u1465
  6637  17D3  0871               	movf	___awdiv@divisor+1,w
  6638  17D4  0273               	subwf	___awdiv@dividend+1,w
  6639  17D5  1D03               	skipz
  6640  17D6  2FD9               	goto	u1475
  6641  17D7  0870               	movf	___awdiv@divisor,w
  6642  17D8  0272               	subwf	___awdiv@dividend,w
  6643  17D9                     u1475:
  6644  17D9  1C03               	skipc
  6645  17DA  2FDC               	goto	u1471
  6646  17DB  2FDD               	goto	u1470
  6647  17DC                     u1471:
  6648  17DC  2FE4               	goto	l2066
  6649  17DD                     u1470:
  6650  17DD                     l2062:
  6651  17DD  0870               	movf	___awdiv@divisor,w
  6652  17DE  02F2               	subwf	___awdiv@dividend,f
  6653  17DF  0871               	movf	___awdiv@divisor+1,w
  6654  17E0  1C03               	skipc
  6655  17E1  03F3               	decf	___awdiv@dividend+1,f
  6656  17E2  02F3               	subwf	___awdiv@dividend+1,f
  6657  17E3                     l2064:
  6658  17E3  1477               	bsf	___awdiv@quotient,0
  6659  17E4                     l2066:
  6660  17E4  3001               	movlw	1
  6661  17E5                     u1485:
  6662  17E5  1003               	clrc
  6663  17E6  0CF1               	rrf	___awdiv@divisor+1,f
  6664  17E7  0CF0               	rrf	___awdiv@divisor,f
  6665  17E8  3EFF               	addlw	-1
  6666  17E9  1D03               	skipz
  6667  17EA  2FE5               	goto	u1485
  6668  17EB                     l2068:
  6669  17EB  3001               	movlw	1
  6670  17EC  02F5               	subwf	___awdiv@counter,f
  6671  17ED  1D03               	btfss	3,2
  6672  17EE  2FF0               	goto	u1491
  6673  17EF  2FF1               	goto	u1490
  6674  17F0                     u1491:
  6675  17F0  2FCC               	goto	l2060
  6676  17F1                     u1490:
  6677  17F1                     l2070:
  6678  17F1  0876               	movf	___awdiv@sign,w
  6679  17F2  1903               	btfsc	3,2
  6680  17F3  2FF5               	goto	u1501
  6681  17F4  2FF6               	goto	u1500
  6682  17F5                     u1501:
  6683  17F5  2FFB               	goto	l2074
  6684  17F6                     u1500:
  6685  17F6                     l2072:
  6686  17F6  09F7               	comf	___awdiv@quotient,f
  6687  17F7  09F8               	comf	___awdiv@quotient+1,f
  6688  17F8  0AF7               	incf	___awdiv@quotient,f
  6689  17F9  1903               	skipnz
  6690  17FA  0AF8               	incf	___awdiv@quotient+1,f
  6691  17FB                     l2074:
  6692  17FB  0878               	movf	___awdiv@quotient+1,w
  6693  17FC  00F1               	movwf	?___awdiv+1
  6694  17FD  0877               	movf	___awdiv@quotient,w
  6695  17FE  00F0               	movwf	?___awdiv
  6696  17FF                     l670:
  6697  17FF  0008               	return
  6698  1800                     __end_of___awdiv:
  6699                           
  6700                           	psect	text44
  6701  13E1                     __ptext44:	
  6702 ;; *************** function _show *****************
  6703 ;; Defined at:
  6704 ;;		line 79 in file "lcd4bit.h"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  s               1    wreg     PTR unsigned char 
  6707 ;;		 -> STR_4(5), STR_3(5), STR_2(6), STR_1(6), 
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;  s               1    4[COMMON] PTR unsigned char 
  6710 ;;		 -> STR_4(5), STR_3(5), STR_2(6), STR_1(6), 
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      void 
  6713 ;; Registers used:
  6714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6720 ;;      Params:         0       0       0       0       0
  6721 ;;      Locals:         1       0       0       0       0
  6722 ;;      Temps:          1       0       0       0       0
  6723 ;;      Totals:         2       0       0       0       0
  6724 ;;Total ram usage:        2 bytes
  6725 ;; Hardware stack levels used: 1
  6726 ;; Hardware stack levels required when called: 1
  6727 ;; This function calls:
  6728 ;;		_LCD_Char
  6729 ;; This function is called by:
  6730 ;;		_print_dht11data
  6731 ;;		_bmp280_displaydata
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _show
  6737  13E1                     _show:
  6738                           
  6739                           ;incstack = 0
  6740                           ; Regs used in _show: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6741                           ;show@s stored from wreg
  6742  13E1  00F4               	movwf	show@s
  6743  13E2                     l2552:
  6744                           
  6745                           ;lcd4bit.h: 81: while(*s) {
  6746  13E2  2BF3               	goto	l2558
  6747  13E3                     l2554:
  6748                           
  6749                           ;lcd4bit.h: 82: LCD_Char(*s++);
  6750  13E3  0874               	movf	show@s,w
  6751  13E4  0084               	movwf	4
  6752  13E5  160A  118A  2000  160A  118A  	fcall	stringdir
  6753  13EA  160A  118A  2580  160A  118A  	fcall	_LCD_Char
  6754  13EF                     l2556:
  6755  13EF  3001               	movlw	1
  6756  13F0  00F3               	movwf	??_show
  6757  13F1  0873               	movf	??_show,w
  6758  13F2  07F4               	addwf	show@s,f
  6759  13F3                     l2558:
  6760  13F3  0874               	movf	show@s,w
  6761  13F4  0084               	movwf	4
  6762  13F5  160A  118A  2000  160A  118A  	fcall	stringdir
  6763  13FA  3A00               	xorlw	0
  6764  13FB  1D03               	skipz
  6765  13FC  2BFE               	goto	u2601
  6766  13FD  2BFF               	goto	u2600
  6767  13FE                     u2601:
  6768  13FE  2BE3               	goto	l2554
  6769  13FF                     u2600:
  6770  13FF                     l124:
  6771  13FF  0008               	return
  6772  1400                     __end_of_show:
  6773                           
  6774                           	psect	text45
  6775  1580                     __ptext45:	
  6776 ;; *************** function _LCD_Char *****************
  6777 ;; Defined at:
  6778 ;;		line 27 in file "lcd4bit.h"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  data            1    wreg     unsigned char 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  data            1    2[COMMON] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6792 ;;      Params:         0       0       0       0       0
  6793 ;;      Locals:         1       0       0       0       0
  6794 ;;      Temps:          2       0       0       0       0
  6795 ;;      Totals:         3       0       0       0       0
  6796 ;;Total ram usage:        3 bytes
  6797 ;; Hardware stack levels used: 1
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_LCD_num
  6802 ;;		_show
  6803 ;;		_show_multidigits
  6804 ;;		_print_analogvoltages
  6805 ;;		_rtc_lcd_data
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function _LCD_Char
  6811  1580                     _LCD_Char:
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _LCD_Char: [wreg+status,2+status,0]
  6815                           ;LCD_Char@data stored from wreg
  6816  1580  00F2               	movwf	LCD_Char@data
  6817  1581                     l1906:
  6818                           
  6819                           ;lcd4bit.h: 29: RC0 = 1;
  6820  1581  1283               	bcf	3,5	;RP0=0, select bank0
  6821  1582  1303               	bcf	3,6	;RP1=0, select bank0
  6822  1583  1407               	bsf	7,0	;volatile
  6823  1584                     l1908:
  6824                           
  6825                           ;lcd4bit.h: 30: PORTB = data;
  6826  1584  0872               	movf	LCD_Char@data,w
  6827  1585  0086               	movwf	6	;volatile
  6828  1586                     l1910:
  6829                           
  6830                           ;lcd4bit.h: 31: RC1 = 1;
  6831  1586  1487               	bsf	7,1	;volatile
  6832                           
  6833                           ;lcd4bit.h: 32: _delay((unsigned long)((10)*(20000000/4000.0)));
  6834  1587  3041               	movlw	65
  6835  1588  00F1               	movwf	??_LCD_Char+1
  6836  1589  30EE               	movlw	238
  6837  158A  00F0               	movwf	??_LCD_Char
  6838  158B                     u4397:
  6839  158B  0BF0               	decfsz	??_LCD_Char,f
  6840  158C  2D8B               	goto	u4397
  6841  158D  0BF1               	decfsz	??_LCD_Char+1,f
  6842  158E  2D8B               	goto	u4397
  6843  158F  0000               	nop
  6844  1590                     l1912:
  6845                           
  6846                           ;lcd4bit.h: 33: RC1 = 0;
  6847  1590  1283               	bcf	3,5	;RP0=0, select bank0
  6848  1591  1303               	bcf	3,6	;RP1=0, select bank0
  6849  1592  1087               	bcf	7,1	;volatile
  6850                           
  6851                           ;lcd4bit.h: 34: _delay((unsigned long)((10)*(20000000/4000.0)));
  6852  1593  3041               	movlw	65
  6853  1594  00F1               	movwf	??_LCD_Char+1
  6854  1595  30EE               	movlw	238
  6855  1596  00F0               	movwf	??_LCD_Char
  6856  1597                     u4407:
  6857  1597  0BF0               	decfsz	??_LCD_Char,f
  6858  1598  2D97               	goto	u4407
  6859  1599  0BF1               	decfsz	??_LCD_Char+1,f
  6860  159A  2D97               	goto	u4407
  6861  159B  0000               	nop
  6862  159C                     l1914:
  6863                           
  6864                           ;lcd4bit.h: 35: PORTB = (data<<4);
  6865  159C  0872               	movf	LCD_Char@data,w
  6866  159D  00F0               	movwf	??_LCD_Char
  6867  159E  3003               	movlw	3
  6868  159F                     u1225:
  6869  159F  1003               	clrc
  6870  15A0  0DF0               	rlf	??_LCD_Char,f
  6871  15A1  3EFF               	addlw	-1
  6872  15A2  1D03               	skipz
  6873  15A3  2D9F               	goto	u1225
  6874  15A4  1003               	clrc
  6875  15A5  0D70               	rlf	??_LCD_Char,w
  6876  15A6  1283               	bcf	3,5	;RP0=0, select bank0
  6877  15A7  1303               	bcf	3,6	;RP1=0, select bank0
  6878  15A8  0086               	movwf	6	;volatile
  6879  15A9                     l1916:
  6880                           
  6881                           ;lcd4bit.h: 36: RC1 = 1;
  6882  15A9  1487               	bsf	7,1	;volatile
  6883  15AA                     l1918:
  6884                           
  6885                           ;lcd4bit.h: 37: _delay((unsigned long)((10)*(20000000/4000.0)));
  6886  15AA  3041               	movlw	65
  6887  15AB  00F1               	movwf	??_LCD_Char+1
  6888  15AC  30EE               	movlw	238
  6889  15AD  00F0               	movwf	??_LCD_Char
  6890  15AE                     u4417:
  6891  15AE  0BF0               	decfsz	??_LCD_Char,f
  6892  15AF  2DAE               	goto	u4417
  6893  15B0  0BF1               	decfsz	??_LCD_Char+1,f
  6894  15B1  2DAE               	goto	u4417
  6895  15B2  0000               	nop
  6896  15B3                     l1920:
  6897                           
  6898                           ;lcd4bit.h: 38: RC1 = 0;
  6899  15B3  1283               	bcf	3,5	;RP0=0, select bank0
  6900  15B4  1303               	bcf	3,6	;RP1=0, select bank0
  6901  15B5  1087               	bcf	7,1	;volatile
  6902  15B6                     l1922:
  6903                           
  6904                           ;lcd4bit.h: 39: _delay((unsigned long)((10)*(20000000/4000.0)));
  6905  15B6  3041               	movlw	65
  6906  15B7  00F1               	movwf	??_LCD_Char+1
  6907  15B8  30EE               	movlw	238
  6908  15B9  00F0               	movwf	??_LCD_Char
  6909  15BA                     u4427:
  6910  15BA  0BF0               	decfsz	??_LCD_Char,f
  6911  15BB  2DBA               	goto	u4427
  6912  15BC  0BF1               	decfsz	??_LCD_Char+1,f
  6913  15BD  2DBA               	goto	u4427
  6914  15BE  0000               	nop
  6915  15BF                     l112:
  6916  15BF  0008               	return
  6917  15C0                     __end_of_LCD_Char:
  6918                           
  6919                           	psect	text46
  6920  029D                     __ptext46:	
  6921 ;; *************** function _actual_pressure *****************
  6922 ;; Defined at:
  6923 ;;		line 277 in file "main.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2, status,0, pclath, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6937 ;;      Params:         0       0       0       0       0
  6938 ;;      Locals:         0       4       0       0       0
  6939 ;;      Temps:          0      14       0       0       0
  6940 ;;      Totals:         0      18       0       0       0
  6941 ;;Total ram usage:       18 bytes
  6942 ;; Hardware stack levels used: 1
  6943 ;; Hardware stack levels required when called: 1
  6944 ;; This function calls:
  6945 ;;		___aldiv
  6946 ;;		___lldiv
  6947 ;;		___lmul
  6948 ;; This function is called by:
  6949 ;;		_main
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           
  6954                           ;psect for function _actual_pressure
  6955  029D                     _actual_pressure:
  6956  029D                     l3010:	
  6957                           ;incstack = 0
  6958                           ; Regs used in _actual_pressure: [wreg+status,2+status,0+pclath+cstack]
  6959                           
  6960                           
  6961                           ;main.c: 279: b6 = b5 - 4000;
  6962  029D  3060               	movlw	96
  6963  029E  1283               	bcf	3,5	;RP0=0, select bank0
  6964  029F  1303               	bcf	3,6	;RP1=0, select bank0
  6965  02A0  00D5               	movwf	??_actual_pressure
  6966  02A1  30F0               	movlw	240
  6967  02A2  00D6               	movwf	??_actual_pressure+1
  6968  02A3  30FF               	movlw	255
  6969  02A4  00D7               	movwf	??_actual_pressure+2
  6970  02A5  30FF               	movlw	255
  6971  02A6  00D8               	movwf	??_actual_pressure+3
  6972  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  6973  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  6974  02A9  0830               	movf	_b5^(0+128),w
  6975  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  6976  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  6977  02AC  07D5               	addwf	??_actual_pressure,f
  6978  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  6979  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  6980  02AF  0831               	movf	(_b5+1)^(0+128),w
  6981  02B0  1803               	skipnc
  6982  02B1  0F31               	incfsz	(_b5+1)^(0+128),w
  6983  02B2  2AB4               	goto	u3340
  6984  02B3  2AB7               	goto	u3341
  6985  02B4                     u3340:
  6986  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  6987  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  6988  02B6  07D6               	addwf	??_actual_pressure+1,f
  6989  02B7                     u3341:
  6990  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  6991  02B8  1303               	bcf	3,6	;RP1=0, select bank1
  6992  02B9  0832               	movf	(_b5+2)^(0+128),w
  6993  02BA  1803               	skipnc
  6994  02BB  0F32               	incfsz	(_b5+2)^(0+128),w
  6995  02BC  2ABE               	goto	u3342
  6996  02BD  2AC1               	goto	u3343
  6997  02BE                     u3342:
  6998  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  6999  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  7000  02C0  07D7               	addwf	??_actual_pressure+2,f
  7001  02C1                     u3343:
  7002  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  7003  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  7004  02C3  0833               	movf	(_b5+3)^(0+128),w
  7005  02C4  1803               	skipnc
  7006  02C5  0A33               	incf	(_b5+3)^(0+128),w
  7007  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  7008  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  7009  02C8  07D8               	addwf	??_actual_pressure+3,f
  7010  02C9  0858               	movf	??_actual_pressure+3,w
  7011  02CA  00AB               	movwf	_b6+3
  7012  02CB  0857               	movf	??_actual_pressure+2,w
  7013  02CC  00AA               	movwf	_b6+2
  7014  02CD  0856               	movf	??_actual_pressure+1,w
  7015  02CE  00A9               	movwf	_b6+1
  7016  02CF  0855               	movf	??_actual_pressure,w
  7017  02D0  00A8               	movwf	_b6
  7018  02D1                     l3012:
  7019                           
  7020                           ;main.c: 280: x1 = (b2*(b6*b6/4096))/2048;
  7021  02D1  3000               	movlw	0
  7022  02D2  00CA               	movwf	___aldiv@divisor+3
  7023  02D3  3000               	movlw	0
  7024  02D4  00C9               	movwf	___aldiv@divisor+2
  7025  02D5  3010               	movlw	16
  7026  02D6  00C8               	movwf	___aldiv@divisor+1
  7027  02D7  3000               	movlw	0
  7028  02D8  00C7               	movwf	___aldiv@divisor
  7029  02D9  082B               	movf	_b6+3,w
  7030  02DA  00F3               	movwf	___lmul@multiplier+3
  7031  02DB  082A               	movf	_b6+2,w
  7032  02DC  00F2               	movwf	___lmul@multiplier+2
  7033  02DD  0829               	movf	_b6+1,w
  7034  02DE  00F1               	movwf	___lmul@multiplier+1
  7035  02DF  0828               	movf	_b6,w
  7036  02E0  00F0               	movwf	___lmul@multiplier
  7037  02E1  082B               	movf	_b6+3,w
  7038  02E2  00F7               	movwf	___lmul@multiplicand+3
  7039  02E3  082A               	movf	_b6+2,w
  7040  02E4  00F6               	movwf	___lmul@multiplicand+2
  7041  02E5  0829               	movf	_b6+1,w
  7042  02E6  00F5               	movwf	___lmul@multiplicand+1
  7043  02E7  0828               	movf	_b6,w
  7044  02E8  00F4               	movwf	___lmul@multiplicand
  7045  02E9  160A  118A  2646  120A  118A  	fcall	___lmul
  7046  02EE  0873               	movf	?___lmul+3,w
  7047  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  7048  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  7049  02F1  00CE               	movwf	___aldiv@dividend+3
  7050  02F2  0872               	movf	?___lmul+2,w
  7051  02F3  00CD               	movwf	___aldiv@dividend+2
  7052  02F4  0871               	movf	?___lmul+1,w
  7053  02F5  00CC               	movwf	___aldiv@dividend+1
  7054  02F6  0870               	movf	?___lmul,w
  7055  02F7  00CB               	movwf	___aldiv@dividend
  7056  02F8  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7057  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  7058  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  7059  02FF  084A               	movf	?___aldiv+3,w
  7060  0300  00E6               	movwf	_actual_pressure$1207+3
  7061  0301  0849               	movf	?___aldiv+2,w
  7062  0302  00E5               	movwf	_actual_pressure$1207+2
  7063  0303  0848               	movf	?___aldiv+1,w
  7064  0304  00E4               	movwf	_actual_pressure$1207+1
  7065  0305  0847               	movf	?___aldiv,w
  7066  0306  00E3               	movwf	_actual_pressure$1207
  7067  0307                     l3014:
  7068                           
  7069                           ;main.c: 280: x1 = (b2*(b6*b6/4096))/2048;
  7070  0307  3000               	movlw	0
  7071  0308  00CA               	movwf	___aldiv@divisor+3
  7072  0309  3000               	movlw	0
  7073  030A  00C9               	movwf	___aldiv@divisor+2
  7074  030B  3008               	movlw	8
  7075  030C  00C8               	movwf	___aldiv@divisor+1
  7076  030D  3000               	movlw	0
  7077  030E  00C7               	movwf	___aldiv@divisor
  7078  030F  0866               	movf	_actual_pressure$1207+3,w
  7079  0310  00F3               	movwf	___lmul@multiplier+3
  7080  0311  0865               	movf	_actual_pressure$1207+2,w
  7081  0312  00F2               	movwf	___lmul@multiplier+2
  7082  0313  0864               	movf	_actual_pressure$1207+1,w
  7083  0314  00F1               	movwf	___lmul@multiplier+1
  7084  0315  0863               	movf	_actual_pressure$1207,w
  7085  0316  00F0               	movwf	___lmul@multiplier
  7086  0317  1683               	bsf	3,5	;RP0=1, select bank1
  7087  0318  1303               	bcf	3,6	;RP1=0, select bank1
  7088  0319  083B               	movf	(_b2+3)^(0+128),w
  7089  031A  00F7               	movwf	___lmul@multiplicand+3
  7090  031B  083A               	movf	(_b2+2)^(0+128),w
  7091  031C  00F6               	movwf	___lmul@multiplicand+2
  7092  031D  0839               	movf	(_b2+1)^(0+128),w
  7093  031E  00F5               	movwf	___lmul@multiplicand+1
  7094  031F  0838               	movf	_b2^(0+128),w
  7095  0320  00F4               	movwf	___lmul@multiplicand
  7096  0321  160A  118A  2646  120A  118A  	fcall	___lmul
  7097  0326  0873               	movf	?___lmul+3,w
  7098  0327  1283               	bcf	3,5	;RP0=0, select bank0
  7099  0328  1303               	bcf	3,6	;RP1=0, select bank0
  7100  0329  00CE               	movwf	___aldiv@dividend+3
  7101  032A  0872               	movf	?___lmul+2,w
  7102  032B  00CD               	movwf	___aldiv@dividend+2
  7103  032C  0871               	movf	?___lmul+1,w
  7104  032D  00CC               	movwf	___aldiv@dividend+1
  7105  032E  0870               	movf	?___lmul,w
  7106  032F  00CB               	movwf	___aldiv@dividend
  7107  0330  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7108  0335  1283               	bcf	3,5	;RP0=0, select bank0
  7109  0336  1303               	bcf	3,6	;RP1=0, select bank0
  7110  0337  084A               	movf	?___aldiv+3,w
  7111  0338  00A7               	movwf	_x1+3
  7112  0339  0849               	movf	?___aldiv+2,w
  7113  033A  00A6               	movwf	_x1+2
  7114  033B  0848               	movf	?___aldiv+1,w
  7115  033C  00A5               	movwf	_x1+1
  7116  033D  0847               	movf	?___aldiv,w
  7117  033E  00A4               	movwf	_x1
  7118  033F                     l3016:
  7119                           
  7120                           ;main.c: 281: x2 = ac2*b6/2048;
  7121  033F  3000               	movlw	0
  7122  0340  00CA               	movwf	___aldiv@divisor+3
  7123  0341  3000               	movlw	0
  7124  0342  00C9               	movwf	___aldiv@divisor+2
  7125  0343  3008               	movlw	8
  7126  0344  00C8               	movwf	___aldiv@divisor+1
  7127  0345  3000               	movlw	0
  7128  0346  00C7               	movwf	___aldiv@divisor
  7129  0347  1683               	bsf	3,5	;RP0=1, select bank1
  7130  0348  1303               	bcf	3,6	;RP1=0, select bank1
  7131  0349  0865               	movf	_ac2^(0+128),w
  7132  034A  00F0               	movwf	___lmul@multiplier
  7133  034B  0866               	movf	(_ac2+1)^(0+128),w
  7134  034C  00F1               	movwf	___lmul@multiplier+1
  7135  034D  3000               	movlw	0
  7136  034E  1BF1               	btfsc	___lmul@multiplier+1,7
  7137  034F  30FF               	movlw	255
  7138  0350  00F2               	movwf	___lmul@multiplier+2
  7139  0351  00F3               	movwf	___lmul@multiplier+3
  7140  0352  1283               	bcf	3,5	;RP0=0, select bank0
  7141  0353  1303               	bcf	3,6	;RP1=0, select bank0
  7142  0354  082B               	movf	_b6+3,w
  7143  0355  00F7               	movwf	___lmul@multiplicand+3
  7144  0356  082A               	movf	_b6+2,w
  7145  0357  00F6               	movwf	___lmul@multiplicand+2
  7146  0358  0829               	movf	_b6+1,w
  7147  0359  00F5               	movwf	___lmul@multiplicand+1
  7148  035A  0828               	movf	_b6,w
  7149  035B  00F4               	movwf	___lmul@multiplicand
  7150  035C  160A  118A  2646  120A  118A  	fcall	___lmul
  7151  0361  0873               	movf	?___lmul+3,w
  7152  0362  1283               	bcf	3,5	;RP0=0, select bank0
  7153  0363  1303               	bcf	3,6	;RP1=0, select bank0
  7154  0364  00CE               	movwf	___aldiv@dividend+3
  7155  0365  0872               	movf	?___lmul+2,w
  7156  0366  00CD               	movwf	___aldiv@dividend+2
  7157  0367  0871               	movf	?___lmul+1,w
  7158  0368  00CC               	movwf	___aldiv@dividend+1
  7159  0369  0870               	movf	?___lmul,w
  7160  036A  00CB               	movwf	___aldiv@dividend
  7161  036B  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7162  0370  1283               	bcf	3,5	;RP0=0, select bank0
  7163  0371  1303               	bcf	3,6	;RP1=0, select bank0
  7164  0372  084A               	movf	?___aldiv+3,w
  7165  0373  00A3               	movwf	_x2+3
  7166  0374  0849               	movf	?___aldiv+2,w
  7167  0375  00A2               	movwf	_x2+2
  7168  0376  0848               	movf	?___aldiv+1,w
  7169  0377  00A1               	movwf	_x2+1
  7170  0378  0847               	movf	?___aldiv,w
  7171  0379  00A0               	movwf	_x2
  7172  037A                     l3018:
  7173                           
  7174                           ;main.c: 282: x3 = x1+x2;
  7175  037A  0824               	movf	_x1,w
  7176  037B  0720               	addwf	_x2,w
  7177  037C  00D5               	movwf	??_actual_pressure
  7178  037D  3000               	movlw	0
  7179  037E  1803               	skipnc
  7180  037F  3001               	movlw	1
  7181  0380  0725               	addwf	_x1+1,w
  7182  0381  01D7               	clrf	??_actual_pressure+2
  7183  0382  1803               	skipnc
  7184  0383  0AD7               	incf	??_actual_pressure+2,f
  7185  0384  0721               	addwf	_x2+1,w
  7186  0385  00D6               	movwf	??_actual_pressure+1
  7187  0386  1803               	skipnc
  7188  0387  0AD7               	incf	??_actual_pressure+2,f
  7189  0388  0826               	movf	_x1+2,w
  7190  0389  0757               	addwf	??_actual_pressure+2,w
  7191  038A  01D8               	clrf	??_actual_pressure+3
  7192  038B  1803               	skipnc
  7193  038C  0AD8               	incf	??_actual_pressure+3,f
  7194  038D  0722               	addwf	_x2+2,w
  7195  038E  00D7               	movwf	??_actual_pressure+2
  7196  038F  1803               	skipnc
  7197  0390  0AD8               	incf	??_actual_pressure+3,f
  7198  0391  0827               	movf	_x1+3,w
  7199  0392  0758               	addwf	??_actual_pressure+3,w
  7200  0393  0723               	addwf	_x2+3,w
  7201  0394  00D8               	movwf	??_actual_pressure+3
  7202  0395  0858               	movf	??_actual_pressure+3,w
  7203  0396  1683               	bsf	3,5	;RP0=1, select bank1
  7204  0397  1303               	bcf	3,6	;RP1=0, select bank1
  7205  0398  00AB               	movwf	(_x3+3)^(0+128)
  7206  0399  1283               	bcf	3,5	;RP0=0, select bank0
  7207  039A  1303               	bcf	3,6	;RP1=0, select bank0
  7208  039B  0857               	movf	??_actual_pressure+2,w
  7209  039C  1683               	bsf	3,5	;RP0=1, select bank1
  7210  039D  1303               	bcf	3,6	;RP1=0, select bank1
  7211  039E  00AA               	movwf	(_x3+2)^(0+128)
  7212  039F  1283               	bcf	3,5	;RP0=0, select bank0
  7213  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  7214  03A1  0856               	movf	??_actual_pressure+1,w
  7215  03A2  1683               	bsf	3,5	;RP0=1, select bank1
  7216  03A3  1303               	bcf	3,6	;RP1=0, select bank1
  7217  03A4  00A9               	movwf	(_x3+1)^(0+128)
  7218  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  7219  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  7220  03A7  0855               	movf	??_actual_pressure,w
  7221  03A8  1683               	bsf	3,5	;RP0=1, select bank1
  7222  03A9  1303               	bcf	3,6	;RP1=0, select bank1
  7223  03AA  00A8               	movwf	_x3^(0+128)
  7224                           
  7225                           ;main.c: 283: b3 = (((ac1*4+x3)<< oss)+ 2)/ 4;
  7226  03AB  3000               	movlw	0
  7227  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  7228  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  7229  03AE  00CA               	movwf	___aldiv@divisor+3
  7230  03AF  3000               	movlw	0
  7231  03B0  00C9               	movwf	___aldiv@divisor+2
  7232  03B1  3000               	movlw	0
  7233  03B2  00C8               	movwf	___aldiv@divisor+1
  7234  03B3  3004               	movlw	4
  7235  03B4  00C7               	movwf	___aldiv@divisor
  7236  03B5  3002               	movlw	2
  7237  03B6  00D5               	movwf	??_actual_pressure
  7238  03B7  3000               	movlw	0
  7239  03B8  00D6               	movwf	??_actual_pressure+1
  7240  03B9  3000               	movlw	0
  7241  03BA  00D7               	movwf	??_actual_pressure+2
  7242  03BB  3000               	movlw	0
  7243  03BC  00D8               	movwf	??_actual_pressure+3
  7244  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  7245  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  7246  03BF  0828               	movf	_x3^(0+128),w
  7247  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  7248  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  7249  03C2  00D9               	movwf	??_actual_pressure+4
  7250  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  7251  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  7252  03C5  0829               	movf	(_x3+1)^(0+128),w
  7253  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  7254  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  7255  03C8  00DA               	movwf	??_actual_pressure+5
  7256  03C9  1683               	bsf	3,5	;RP0=1, select bank1
  7257  03CA  1303               	bcf	3,6	;RP1=0, select bank1
  7258  03CB  082A               	movf	(_x3+2)^(0+128),w
  7259  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  7260  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  7261  03CE  00DB               	movwf	??_actual_pressure+6
  7262  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  7263  03D0  1303               	bcf	3,6	;RP1=0, select bank1
  7264  03D1  082B               	movf	(_x3+3)^(0+128),w
  7265  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  7266  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  7267  03D4  00DC               	movwf	??_actual_pressure+7
  7268  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  7269  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  7270  03D7  0868               	movf	(_ac1+1)^(0+128),w
  7271  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  7272  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  7273  03DA  00DE               	movwf	??_actual_pressure+9
  7274  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  7275  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  7276  03DD  0867               	movf	_ac1^(0+128),w
  7277  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  7278  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  7279  03E0  00DD               	movwf	??_actual_pressure+8
  7280  03E1  1003               	clrc
  7281  03E2  0DDD               	rlf	??_actual_pressure+8,f
  7282  03E3  0DDE               	rlf	??_actual_pressure+9,f
  7283  03E4  1003               	clrc
  7284  03E5  0DDD               	rlf	??_actual_pressure+8,f
  7285  03E6  0DDE               	rlf	??_actual_pressure+9,f
  7286  03E7  085D               	movf	??_actual_pressure+8,w
  7287  03E8  00DF               	movwf	??_actual_pressure+10
  7288  03E9  085E               	movf	??_actual_pressure+9,w
  7289  03EA  00E0               	movwf	??_actual_pressure+11
  7290  03EB  3000               	movlw	0
  7291  03EC  1BE0               	btfsc	??_actual_pressure+11,7
  7292  03ED  30FF               	movlw	255
  7293  03EE  00E1               	movwf	??_actual_pressure+12
  7294  03EF  00E2               	movwf	??_actual_pressure+13
  7295  03F0  085F               	movf	??_actual_pressure+10,w
  7296  03F1  07D9               	addwf	??_actual_pressure+4,f
  7297  03F2  0860               	movf	??_actual_pressure+11,w
  7298  03F3  1803               	skipnc
  7299  03F4  0F60               	incfsz	??_actual_pressure+11,w
  7300  03F5  2BF7               	goto	u3350
  7301  03F6  2BF8               	goto	u3351
  7302  03F7                     u3350:
  7303  03F7  07DA               	addwf	??_actual_pressure+5,f
  7304  03F8                     u3351:
  7305  03F8  0861               	movf	??_actual_pressure+12,w
  7306  03F9  1803               	skipnc
  7307  03FA  0F61               	incfsz	??_actual_pressure+12,w
  7308  03FB  2BFD               	goto	u3352
  7309  03FC  2BFE               	goto	u3353
  7310  03FD                     u3352:
  7311  03FD  07DB               	addwf	??_actual_pressure+6,f
  7312  03FE                     u3353:
  7313  03FE  0862               	movf	??_actual_pressure+13,w
  7314  03FF  1803               	skipnc
  7315  0400  0A62               	incf	??_actual_pressure+13,w
  7316  0401  07DC               	addwf	??_actual_pressure+7,f
  7317  0402  0A6D               	incf	_oss,w
  7318  0403  2C09               	goto	u3360
  7319  0404                     u3365:
  7320  0404  1003               	clrc
  7321  0405  0DD9               	rlf	??_actual_pressure+4,f
  7322  0406  0DDA               	rlf	??_actual_pressure+5,f
  7323  0407  0DDB               	rlf	??_actual_pressure+6,f
  7324  0408  0DDC               	rlf	??_actual_pressure+7,f
  7325  0409                     u3360:
  7326  0409  3EFF               	addlw	-1
  7327  040A  1D03               	skipz
  7328  040B  2C04               	goto	u3365
  7329  040C  0859               	movf	??_actual_pressure+4,w
  7330  040D  07D5               	addwf	??_actual_pressure,f
  7331  040E  085A               	movf	??_actual_pressure+5,w
  7332  040F  1803               	skipnc
  7333  0410  0F5A               	incfsz	??_actual_pressure+5,w
  7334  0411  2C13               	goto	u3370
  7335  0412  2C14               	goto	u3371
  7336  0413                     u3370:
  7337  0413  07D6               	addwf	??_actual_pressure+1,f
  7338  0414                     u3371:
  7339  0414  085B               	movf	??_actual_pressure+6,w
  7340  0415  1803               	skipnc
  7341  0416  0F5B               	incfsz	??_actual_pressure+6,w
  7342  0417  2C19               	goto	u3372
  7343  0418  2C1A               	goto	u3373
  7344  0419                     u3372:
  7345  0419  07D7               	addwf	??_actual_pressure+2,f
  7346  041A                     u3373:
  7347  041A  085C               	movf	??_actual_pressure+7,w
  7348  041B  1803               	skipnc
  7349  041C  0A5C               	incf	??_actual_pressure+7,w
  7350  041D  07D8               	addwf	??_actual_pressure+3,f
  7351  041E  0858               	movf	??_actual_pressure+3,w
  7352  041F  00CE               	movwf	___aldiv@dividend+3
  7353  0420  0857               	movf	??_actual_pressure+2,w
  7354  0421  00CD               	movwf	___aldiv@dividend+2
  7355  0422  0856               	movf	??_actual_pressure+1,w
  7356  0423  00CC               	movwf	___aldiv@dividend+1
  7357  0424  0855               	movf	??_actual_pressure,w
  7358  0425  00CB               	movwf	___aldiv@dividend
  7359  0426  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7360  042B  1283               	bcf	3,5	;RP0=0, select bank0
  7361  042C  1303               	bcf	3,6	;RP1=0, select bank0
  7362  042D  084A               	movf	?___aldiv+3,w
  7363  042E  1683               	bsf	3,5	;RP0=1, select bank1
  7364  042F  1303               	bcf	3,6	;RP1=0, select bank1
  7365  0430  00B7               	movwf	(_b3+3)^(0+128)
  7366  0431  1283               	bcf	3,5	;RP0=0, select bank0
  7367  0432  1303               	bcf	3,6	;RP1=0, select bank0
  7368  0433  0849               	movf	?___aldiv+2,w
  7369  0434  1683               	bsf	3,5	;RP0=1, select bank1
  7370  0435  1303               	bcf	3,6	;RP1=0, select bank1
  7371  0436  00B6               	movwf	(_b3+2)^(0+128)
  7372  0437  1283               	bcf	3,5	;RP0=0, select bank0
  7373  0438  1303               	bcf	3,6	;RP1=0, select bank0
  7374  0439  0848               	movf	?___aldiv+1,w
  7375  043A  1683               	bsf	3,5	;RP0=1, select bank1
  7376  043B  1303               	bcf	3,6	;RP1=0, select bank1
  7377  043C  00B5               	movwf	(_b3+1)^(0+128)
  7378  043D  1283               	bcf	3,5	;RP0=0, select bank0
  7379  043E  1303               	bcf	3,6	;RP1=0, select bank0
  7380  043F  0847               	movf	?___aldiv,w
  7381  0440  1683               	bsf	3,5	;RP0=1, select bank1
  7382  0441  1303               	bcf	3,6	;RP1=0, select bank1
  7383  0442  00B4               	movwf	_b3^(0+128)
  7384                           
  7385                           ;main.c: 284: x1 = ac3* b6 / 8192;
  7386  0443  3000               	movlw	0
  7387  0444  1283               	bcf	3,5	;RP0=0, select bank0
  7388  0445  1303               	bcf	3,6	;RP1=0, select bank0
  7389  0446  00CA               	movwf	___aldiv@divisor+3
  7390  0447  3000               	movlw	0
  7391  0448  00C9               	movwf	___aldiv@divisor+2
  7392  0449  3020               	movlw	32
  7393  044A  00C8               	movwf	___aldiv@divisor+1
  7394  044B  3000               	movlw	0
  7395  044C  00C7               	movwf	___aldiv@divisor
  7396  044D  1683               	bsf	3,5	;RP0=1, select bank1
  7397  044E  1303               	bcf	3,6	;RP1=0, select bank1
  7398  044F  0863               	movf	_ac3^(0+128),w
  7399  0450  00F0               	movwf	___lmul@multiplier
  7400  0451  0864               	movf	(_ac3+1)^(0+128),w
  7401  0452  00F1               	movwf	___lmul@multiplier+1
  7402  0453  3000               	movlw	0
  7403  0454  1BF1               	btfsc	___lmul@multiplier+1,7
  7404  0455  30FF               	movlw	255
  7405  0456  00F2               	movwf	___lmul@multiplier+2
  7406  0457  00F3               	movwf	___lmul@multiplier+3
  7407  0458  1283               	bcf	3,5	;RP0=0, select bank0
  7408  0459  1303               	bcf	3,6	;RP1=0, select bank0
  7409  045A  082B               	movf	_b6+3,w
  7410  045B  00F7               	movwf	___lmul@multiplicand+3
  7411  045C  082A               	movf	_b6+2,w
  7412  045D  00F6               	movwf	___lmul@multiplicand+2
  7413  045E  0829               	movf	_b6+1,w
  7414  045F  00F5               	movwf	___lmul@multiplicand+1
  7415  0460  0828               	movf	_b6,w
  7416  0461  00F4               	movwf	___lmul@multiplicand
  7417  0462  160A  118A  2646  120A  118A  	fcall	___lmul
  7418  0467  0873               	movf	?___lmul+3,w
  7419  0468  1283               	bcf	3,5	;RP0=0, select bank0
  7420  0469  1303               	bcf	3,6	;RP1=0, select bank0
  7421  046A  00CE               	movwf	___aldiv@dividend+3
  7422  046B  0872               	movf	?___lmul+2,w
  7423  046C  00CD               	movwf	___aldiv@dividend+2
  7424  046D  0871               	movf	?___lmul+1,w
  7425  046E  00CC               	movwf	___aldiv@dividend+1
  7426  046F  0870               	movf	?___lmul,w
  7427  0470  00CB               	movwf	___aldiv@dividend
  7428  0471  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7429  0476  1283               	bcf	3,5	;RP0=0, select bank0
  7430  0477  1303               	bcf	3,6	;RP1=0, select bank0
  7431  0478  084A               	movf	?___aldiv+3,w
  7432  0479  00A7               	movwf	_x1+3
  7433  047A  0849               	movf	?___aldiv+2,w
  7434  047B  00A6               	movwf	_x1+2
  7435  047C  0848               	movf	?___aldiv+1,w
  7436  047D  00A5               	movwf	_x1+1
  7437  047E  0847               	movf	?___aldiv,w
  7438  047F  00A4               	movwf	_x1
  7439                           
  7440                           ;main.c: 285: x2 = (b1 * (b6 *b6 / 4096)) / 65536;
  7441  0480  3000               	movlw	0
  7442  0481  00CA               	movwf	___aldiv@divisor+3
  7443  0482  3000               	movlw	0
  7444  0483  00C9               	movwf	___aldiv@divisor+2
  7445  0484  3010               	movlw	16
  7446  0485  00C8               	movwf	___aldiv@divisor+1
  7447  0486  3000               	movlw	0
  7448  0487  00C7               	movwf	___aldiv@divisor
  7449  0488  082B               	movf	_b6+3,w
  7450  0489  00F3               	movwf	___lmul@multiplier+3
  7451  048A  082A               	movf	_b6+2,w
  7452  048B  00F2               	movwf	___lmul@multiplier+2
  7453  048C  0829               	movf	_b6+1,w
  7454  048D  00F1               	movwf	___lmul@multiplier+1
  7455  048E  0828               	movf	_b6,w
  7456  048F  00F0               	movwf	___lmul@multiplier
  7457  0490  082B               	movf	_b6+3,w
  7458  0491  00F7               	movwf	___lmul@multiplicand+3
  7459  0492  082A               	movf	_b6+2,w
  7460  0493  00F6               	movwf	___lmul@multiplicand+2
  7461  0494  0829               	movf	_b6+1,w
  7462  0495  00F5               	movwf	___lmul@multiplicand+1
  7463  0496  0828               	movf	_b6,w
  7464  0497  00F4               	movwf	___lmul@multiplicand
  7465  0498  160A  118A  2646  120A  118A  	fcall	___lmul
  7466  049D  0873               	movf	?___lmul+3,w
  7467  049E  1283               	bcf	3,5	;RP0=0, select bank0
  7468  049F  1303               	bcf	3,6	;RP1=0, select bank0
  7469  04A0  00CE               	movwf	___aldiv@dividend+3
  7470  04A1  0872               	movf	?___lmul+2,w
  7471  04A2  00CD               	movwf	___aldiv@dividend+2
  7472  04A3  0871               	movf	?___lmul+1,w
  7473  04A4  00CC               	movwf	___aldiv@dividend+1
  7474  04A5  0870               	movf	?___lmul,w
  7475  04A6  00CB               	movwf	___aldiv@dividend
  7476  04A7  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7477  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  7478  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  7479  04AE  084A               	movf	?___aldiv+3,w
  7480  04AF  00E6               	movwf	_actual_pressure$1207+3
  7481  04B0  0849               	movf	?___aldiv+2,w
  7482  04B1  00E5               	movwf	_actual_pressure$1207+2
  7483  04B2  0848               	movf	?___aldiv+1,w
  7484  04B3  00E4               	movwf	_actual_pressure$1207+1
  7485  04B4  0847               	movf	?___aldiv,w
  7486  04B5  00E3               	movwf	_actual_pressure$1207
  7487                           
  7488                           ;main.c: 285: x2 = (b1 * (b6 *b6 / 4096)) / 65536;
  7489  04B6  3000               	movlw	0
  7490  04B7  00CA               	movwf	___aldiv@divisor+3
  7491  04B8  3001               	movlw	1
  7492  04B9  00C9               	movwf	___aldiv@divisor+2
  7493  04BA  3000               	movlw	0
  7494  04BB  00C8               	movwf	___aldiv@divisor+1
  7495  04BC  3000               	movlw	0
  7496  04BD  00C7               	movwf	___aldiv@divisor
  7497  04BE  0866               	movf	_actual_pressure$1207+3,w
  7498  04BF  00F3               	movwf	___lmul@multiplier+3
  7499  04C0  0865               	movf	_actual_pressure$1207+2,w
  7500  04C1  00F2               	movwf	___lmul@multiplier+2
  7501  04C2  0864               	movf	_actual_pressure$1207+1,w
  7502  04C3  00F1               	movwf	___lmul@multiplier+1
  7503  04C4  0863               	movf	_actual_pressure$1207,w
  7504  04C5  00F0               	movwf	___lmul@multiplier
  7505  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  7506  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  7507  04C8  083F               	movf	(_b1+3)^(0+128),w
  7508  04C9  00F7               	movwf	___lmul@multiplicand+3
  7509  04CA  083E               	movf	(_b1+2)^(0+128),w
  7510  04CB  00F6               	movwf	___lmul@multiplicand+2
  7511  04CC  083D               	movf	(_b1+1)^(0+128),w
  7512  04CD  00F5               	movwf	___lmul@multiplicand+1
  7513  04CE  083C               	movf	_b1^(0+128),w
  7514  04CF  00F4               	movwf	___lmul@multiplicand
  7515  04D0  160A  118A  2646  120A  118A  	fcall	___lmul
  7516  04D5  0873               	movf	?___lmul+3,w
  7517  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  7518  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  7519  04D8  00CE               	movwf	___aldiv@dividend+3
  7520  04D9  0872               	movf	?___lmul+2,w
  7521  04DA  00CD               	movwf	___aldiv@dividend+2
  7522  04DB  0871               	movf	?___lmul+1,w
  7523  04DC  00CC               	movwf	___aldiv@dividend+1
  7524  04DD  0870               	movf	?___lmul,w
  7525  04DE  00CB               	movwf	___aldiv@dividend
  7526  04DF  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7527  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  7528  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  7529  04E6  084A               	movf	?___aldiv+3,w
  7530  04E7  00A3               	movwf	_x2+3
  7531  04E8  0849               	movf	?___aldiv+2,w
  7532  04E9  00A2               	movwf	_x2+2
  7533  04EA  0848               	movf	?___aldiv+1,w
  7534  04EB  00A1               	movwf	_x2+1
  7535  04EC  0847               	movf	?___aldiv,w
  7536  04ED  00A0               	movwf	_x2
  7537                           
  7538                           ;main.c: 286: x3 =((x1+x2)+2)/4;
  7539  04EE  3000               	movlw	0
  7540  04EF  00CA               	movwf	___aldiv@divisor+3
  7541  04F0  3000               	movlw	0
  7542  04F1  00C9               	movwf	___aldiv@divisor+2
  7543  04F2  3000               	movlw	0
  7544  04F3  00C8               	movwf	___aldiv@divisor+1
  7545  04F4  3004               	movlw	4
  7546  04F5  00C7               	movwf	___aldiv@divisor
  7547  04F6  3002               	movlw	2
  7548  04F7  00D5               	movwf	??_actual_pressure
  7549  04F8  3000               	movlw	0
  7550  04F9  00D6               	movwf	??_actual_pressure+1
  7551  04FA  3000               	movlw	0
  7552  04FB  00D7               	movwf	??_actual_pressure+2
  7553  04FC  3000               	movlw	0
  7554  04FD  00D8               	movwf	??_actual_pressure+3
  7555  04FE  0824               	movf	_x1,w
  7556  04FF  0720               	addwf	_x2,w
  7557  0500  00D9               	movwf	??_actual_pressure+4
  7558  0501  3000               	movlw	0
  7559  0502  1803               	skipnc
  7560  0503  3001               	movlw	1
  7561  0504  0725               	addwf	_x1+1,w
  7562  0505  01DB               	clrf	??_actual_pressure+6
  7563  0506  1803               	skipnc
  7564  0507  0ADB               	incf	??_actual_pressure+6,f
  7565  0508  0721               	addwf	_x2+1,w
  7566  0509  00DA               	movwf	??_actual_pressure+5
  7567  050A  1803               	skipnc
  7568  050B  0ADB               	incf	??_actual_pressure+6,f
  7569  050C  0826               	movf	_x1+2,w
  7570  050D  075B               	addwf	??_actual_pressure+6,w
  7571  050E  01DC               	clrf	??_actual_pressure+7
  7572  050F  1803               	skipnc
  7573  0510  0ADC               	incf	??_actual_pressure+7,f
  7574  0511  0722               	addwf	_x2+2,w
  7575  0512  00DB               	movwf	??_actual_pressure+6
  7576  0513  1803               	skipnc
  7577  0514  0ADC               	incf	??_actual_pressure+7,f
  7578  0515  0827               	movf	_x1+3,w
  7579  0516  075C               	addwf	??_actual_pressure+7,w
  7580  0517  0723               	addwf	_x2+3,w
  7581  0518  00DC               	movwf	??_actual_pressure+7
  7582  0519  0859               	movf	??_actual_pressure+4,w
  7583  051A  07D5               	addwf	??_actual_pressure,f
  7584  051B  085A               	movf	??_actual_pressure+5,w
  7585  051C  1803               	skipnc
  7586  051D  0F5A               	incfsz	??_actual_pressure+5,w
  7587  051E  2D20               	goto	u3380
  7588  051F  2D21               	goto	u3381
  7589  0520                     u3380:
  7590  0520  07D6               	addwf	??_actual_pressure+1,f
  7591  0521                     u3381:
  7592  0521  085B               	movf	??_actual_pressure+6,w
  7593  0522  1803               	skipnc
  7594  0523  0F5B               	incfsz	??_actual_pressure+6,w
  7595  0524  2D26               	goto	u3382
  7596  0525  2D27               	goto	u3383
  7597  0526                     u3382:
  7598  0526  07D7               	addwf	??_actual_pressure+2,f
  7599  0527                     u3383:
  7600  0527  085C               	movf	??_actual_pressure+7,w
  7601  0528  1803               	skipnc
  7602  0529  0A5C               	incf	??_actual_pressure+7,w
  7603  052A  07D8               	addwf	??_actual_pressure+3,f
  7604  052B  0858               	movf	??_actual_pressure+3,w
  7605  052C  00CE               	movwf	___aldiv@dividend+3
  7606  052D  0857               	movf	??_actual_pressure+2,w
  7607  052E  00CD               	movwf	___aldiv@dividend+2
  7608  052F  0856               	movf	??_actual_pressure+1,w
  7609  0530  00CC               	movwf	___aldiv@dividend+1
  7610  0531  0855               	movf	??_actual_pressure,w
  7611  0532  00CB               	movwf	___aldiv@dividend
  7612  0533  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7613  0538  1283               	bcf	3,5	;RP0=0, select bank0
  7614  0539  1303               	bcf	3,6	;RP1=0, select bank0
  7615  053A  084A               	movf	?___aldiv+3,w
  7616  053B  1683               	bsf	3,5	;RP0=1, select bank1
  7617  053C  1303               	bcf	3,6	;RP1=0, select bank1
  7618  053D  00AB               	movwf	(_x3+3)^(0+128)
  7619  053E  1283               	bcf	3,5	;RP0=0, select bank0
  7620  053F  1303               	bcf	3,6	;RP1=0, select bank0
  7621  0540  0849               	movf	?___aldiv+2,w
  7622  0541  1683               	bsf	3,5	;RP0=1, select bank1
  7623  0542  1303               	bcf	3,6	;RP1=0, select bank1
  7624  0543  00AA               	movwf	(_x3+2)^(0+128)
  7625  0544  1283               	bcf	3,5	;RP0=0, select bank0
  7626  0545  1303               	bcf	3,6	;RP1=0, select bank0
  7627  0546  0848               	movf	?___aldiv+1,w
  7628  0547  1683               	bsf	3,5	;RP0=1, select bank1
  7629  0548  1303               	bcf	3,6	;RP1=0, select bank1
  7630  0549  00A9               	movwf	(_x3+1)^(0+128)
  7631  054A  1283               	bcf	3,5	;RP0=0, select bank0
  7632  054B  1303               	bcf	3,6	;RP1=0, select bank0
  7633  054C  0847               	movf	?___aldiv,w
  7634  054D  1683               	bsf	3,5	;RP0=1, select bank1
  7635  054E  1303               	bcf	3,6	;RP1=0, select bank1
  7636  054F  00A8               	movwf	_x3^(0+128)
  7637                           
  7638                           ;main.c: 287: b4 = ac4 * (unsigned long) (x3 + 32768)/ 32768;
  7639  0550  3000               	movlw	0
  7640  0551  1283               	bcf	3,5	;RP0=0, select bank0
  7641  0552  1303               	bcf	3,6	;RP1=0, select bank0
  7642  0553  00D5               	movwf	??_actual_pressure
  7643  0554  3080               	movlw	128
  7644  0555  00D6               	movwf	??_actual_pressure+1
  7645  0556  3000               	movlw	0
  7646  0557  00D7               	movwf	??_actual_pressure+2
  7647  0558  3000               	movlw	0
  7648  0559  00D8               	movwf	??_actual_pressure+3
  7649  055A  1683               	bsf	3,5	;RP0=1, select bank1
  7650  055B  1303               	bcf	3,6	;RP1=0, select bank1
  7651  055C  0828               	movf	_x3^(0+128),w
  7652  055D  1283               	bcf	3,5	;RP0=0, select bank0
  7653  055E  1303               	bcf	3,6	;RP1=0, select bank0
  7654  055F  07D5               	addwf	??_actual_pressure,f
  7655  0560  1683               	bsf	3,5	;RP0=1, select bank1
  7656  0561  1303               	bcf	3,6	;RP1=0, select bank1
  7657  0562  0829               	movf	(_x3+1)^(0+128),w
  7658  0563  1803               	skipnc
  7659  0564  0F29               	incfsz	(_x3+1)^(0+128),w
  7660  0565  2D67               	goto	u3390
  7661  0566  2D6A               	goto	u3391
  7662  0567                     u3390:
  7663  0567  1283               	bcf	3,5	;RP0=0, select bank0
  7664  0568  1303               	bcf	3,6	;RP1=0, select bank0
  7665  0569  07D6               	addwf	??_actual_pressure+1,f
  7666  056A                     u3391:
  7667  056A  1683               	bsf	3,5	;RP0=1, select bank1
  7668  056B  1303               	bcf	3,6	;RP1=0, select bank1
  7669  056C  082A               	movf	(_x3+2)^(0+128),w
  7670  056D  1803               	skipnc
  7671  056E  0F2A               	incfsz	(_x3+2)^(0+128),w
  7672  056F  2D71               	goto	u3392
  7673  0570  2D74               	goto	u3393
  7674  0571                     u3392:
  7675  0571  1283               	bcf	3,5	;RP0=0, select bank0
  7676  0572  1303               	bcf	3,6	;RP1=0, select bank0
  7677  0573  07D7               	addwf	??_actual_pressure+2,f
  7678  0574                     u3393:
  7679  0574  1683               	bsf	3,5	;RP0=1, select bank1
  7680  0575  1303               	bcf	3,6	;RP1=0, select bank1
  7681  0576  082B               	movf	(_x3+3)^(0+128),w
  7682  0577  1803               	skipnc
  7683  0578  0A2B               	incf	(_x3+3)^(0+128),w
  7684  0579  1283               	bcf	3,5	;RP0=0, select bank0
  7685  057A  1303               	bcf	3,6	;RP1=0, select bank0
  7686  057B  07D8               	addwf	??_actual_pressure+3,f
  7687  057C  0858               	movf	??_actual_pressure+3,w
  7688  057D  00F3               	movwf	___lmul@multiplier+3
  7689  057E  0857               	movf	??_actual_pressure+2,w
  7690  057F  00F2               	movwf	___lmul@multiplier+2
  7691  0580  0856               	movf	??_actual_pressure+1,w
  7692  0581  00F1               	movwf	___lmul@multiplier+1
  7693  0582  0855               	movf	??_actual_pressure,w
  7694  0583  00F0               	movwf	___lmul@multiplier
  7695  0584  1683               	bsf	3,5	;RP0=1, select bank1
  7696  0585  1303               	bcf	3,6	;RP1=0, select bank1
  7697  0586  0861               	movf	_ac4^(0+128),w
  7698  0587  00F4               	movwf	___lmul@multiplicand
  7699  0588  0862               	movf	(_ac4+1)^(0+128),w
  7700  0589  00F5               	movwf	___lmul@multiplicand+1
  7701  058A  01F6               	clrf	___lmul@multiplicand+2
  7702  058B  01F7               	clrf	___lmul@multiplicand+3
  7703  058C  160A  118A  2646  120A  118A  	fcall	___lmul
  7704  0591  0870               	movf	?___lmul,w
  7705  0592  1283               	bcf	3,5	;RP0=0, select bank0
  7706  0593  1303               	bcf	3,6	;RP1=0, select bank0
  7707  0594  00D9               	movwf	??_actual_pressure+4
  7708  0595  0871               	movf	?___lmul+1,w
  7709  0596  00DA               	movwf	??_actual_pressure+5
  7710  0597  0872               	movf	?___lmul+2,w
  7711  0598  00DB               	movwf	??_actual_pressure+6
  7712  0599  0873               	movf	?___lmul+3,w
  7713  059A  00DC               	movwf	??_actual_pressure+7
  7714  059B  300F               	movlw	15
  7715  059C                     u3405:
  7716  059C  1003               	clrc
  7717  059D  0CDC               	rrf	??_actual_pressure+7,f
  7718  059E  0CDB               	rrf	??_actual_pressure+6,f
  7719  059F  0CDA               	rrf	??_actual_pressure+5,f
  7720  05A0  0CD9               	rrf	??_actual_pressure+4,f
  7721  05A1                     u3400:
  7722  05A1  3EFF               	addlw	-1
  7723  05A2  1D03               	skipz
  7724  05A3  2D9C               	goto	u3405
  7725  05A4  085C               	movf	??_actual_pressure+7,w
  7726  05A5  1683               	bsf	3,5	;RP0=1, select bank1
  7727  05A6  1303               	bcf	3,6	;RP1=0, select bank1
  7728  05A7  00A7               	movwf	(_b4+3)^(0+128)
  7729  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  7730  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  7731  05AA  085B               	movf	??_actual_pressure+6,w
  7732  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  7733  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  7734  05AD  00A6               	movwf	(_b4+2)^(0+128)
  7735  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  7736  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  7737  05B0  085A               	movf	??_actual_pressure+5,w
  7738  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  7739  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  7740  05B3  00A5               	movwf	(_b4+1)^(0+128)
  7741  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  7742  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  7743  05B6  0859               	movf	??_actual_pressure+4,w
  7744  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  7745  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  7746  05B9  00A4               	movwf	_b4^(0+128)
  7747                           
  7748                           ;main.c: 288: b7 = ((unsigned long)up - b3) * (50000 >> oss);
  7749  05BA  082C               	movf	_up^(0+128),w
  7750  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  7751  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  7752  05BD  00D5               	movwf	??_actual_pressure
  7753  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  7754  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  7755  05C0  082D               	movf	(_up+1)^(0+128),w
  7756  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  7757  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  7758  05C3  00D6               	movwf	??_actual_pressure+1
  7759  05C4  1683               	bsf	3,5	;RP0=1, select bank1
  7760  05C5  1303               	bcf	3,6	;RP1=0, select bank1
  7761  05C6  082E               	movf	(_up+2)^(0+128),w
  7762  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  7763  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  7764  05C9  00D7               	movwf	??_actual_pressure+2
  7765  05CA  1683               	bsf	3,5	;RP0=1, select bank1
  7766  05CB  1303               	bcf	3,6	;RP1=0, select bank1
  7767  05CC  082F               	movf	(_up+3)^(0+128),w
  7768  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  7769  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  7770  05CF  00D8               	movwf	??_actual_pressure+3
  7771  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  7772  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  7773  05D2  0834               	movf	_b3^(0+128),w
  7774  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  7775  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  7776  05D5  02D5               	subwf	??_actual_pressure,f
  7777  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  7778  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  7779  05D8  0835               	movf	(_b3+1)^(0+128),w
  7780  05D9  1C03               	skipc
  7781  05DA  0F35               	incfsz	(_b3+1)^(0+128),w
  7782  05DB  2DDD               	goto	u3411
  7783  05DC  2DE0               	goto	u3412
  7784  05DD                     u3411:
  7785  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  7786  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  7787  05DF  02D6               	subwf	??_actual_pressure+1,f
  7788  05E0                     u3412:
  7789  05E0  1683               	bsf	3,5	;RP0=1, select bank1
  7790  05E1  1303               	bcf	3,6	;RP1=0, select bank1
  7791  05E2  0836               	movf	(_b3+2)^(0+128),w
  7792  05E3  1C03               	skipc
  7793  05E4  0F36               	incfsz	(_b3+2)^(0+128),w
  7794  05E5  2DE7               	goto	u3413
  7795  05E6  2DEA               	goto	u3414
  7796  05E7                     u3413:
  7797  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  7798  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  7799  05E9  02D7               	subwf	??_actual_pressure+2,f
  7800  05EA                     u3414:
  7801  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  7802  05EB  1303               	bcf	3,6	;RP1=0, select bank1
  7803  05EC  0837               	movf	(_b3+3)^(0+128),w
  7804  05ED  1C03               	skipc
  7805  05EE  0F37               	incfsz	(_b3+3)^(0+128),w
  7806  05EF  2DF1               	goto	u3415
  7807  05F0  2DF4               	goto	u3416
  7808  05F1                     u3415:
  7809  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  7810  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  7811  05F3  02D8               	subwf	??_actual_pressure+3,f
  7812  05F4                     u3416:
  7813  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  7814  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  7815  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  7816  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  7817  05F8  0858               	movf	??_actual_pressure+3,w
  7818  05F9  00F3               	movwf	___lmul@multiplier+3
  7819  05FA  0857               	movf	??_actual_pressure+2,w
  7820  05FB  00F2               	movwf	___lmul@multiplier+2
  7821  05FC  0856               	movf	??_actual_pressure+1,w
  7822  05FD  00F1               	movwf	___lmul@multiplier+1
  7823  05FE  0855               	movf	??_actual_pressure,w
  7824  05FF  00F0               	movwf	___lmul@multiplier
  7825  0600  0A6D               	incf	_oss,w
  7826  0601  00D9               	movwf	??_actual_pressure+4
  7827  0602  3050               	movlw	80
  7828  0603  00DA               	movwf	??_actual_pressure+5
  7829  0604  30C3               	movlw	195
  7830  0605  00DB               	movwf	??_actual_pressure+6
  7831  0606  3000               	movlw	0
  7832  0607  00DC               	movwf	??_actual_pressure+7
  7833  0608  3000               	movlw	0
  7834  0609  00DD               	movwf	??_actual_pressure+8
  7835  060A  2E10               	goto	u3420
  7836  060B                     u3425:
  7837  060B  0D5D               	rlf	??_actual_pressure+8,w
  7838  060C  0CDD               	rrf	??_actual_pressure+8,f
  7839  060D  0CDC               	rrf	??_actual_pressure+7,f
  7840  060E  0CDB               	rrf	??_actual_pressure+6,f
  7841  060F  0CDA               	rrf	??_actual_pressure+5,f
  7842  0610                     u3420:
  7843  0610  0BD9               	decfsz	??_actual_pressure+4,f
  7844  0611  2E0B               	goto	u3425
  7845  0612  085D               	movf	??_actual_pressure+8,w
  7846  0613  00F7               	movwf	___lmul@multiplicand+3
  7847  0614  085C               	movf	??_actual_pressure+7,w
  7848  0615  00F6               	movwf	___lmul@multiplicand+2
  7849  0616  085B               	movf	??_actual_pressure+6,w
  7850  0617  00F5               	movwf	___lmul@multiplicand+1
  7851  0618  085A               	movf	??_actual_pressure+5,w
  7852  0619  00F4               	movwf	___lmul@multiplicand
  7853  061A  160A  118A  2646  120A  118A  	fcall	___lmul
  7854  061F  0873               	movf	?___lmul+3,w
  7855  0620  1683               	bsf	3,5	;RP0=1, select bank1
  7856  0621  1303               	bcf	3,6	;RP1=0, select bank1
  7857  0622  00A3               	movwf	(_b7+3)^(0+128)
  7858  0623  0872               	movf	?___lmul+2,w
  7859  0624  00A2               	movwf	(_b7+2)^(0+128)
  7860  0625  0871               	movf	?___lmul+1,w
  7861  0626  00A1               	movwf	(_b7+1)^(0+128)
  7862  0627  0870               	movf	?___lmul,w
  7863  0628  00A0               	movwf	_b7^(0+128)
  7864  0629                     l3020:
  7865                           
  7866                           ;main.c: 289: if (b7 < 0x80000000)
  7867  0629  3080               	movlw	128
  7868  062A  0223               	subwf	(_b7+3)^(0+128),w
  7869  062B  1D03               	skipz
  7870  062C  2E39               	goto	u3433
  7871  062D  3000               	movlw	0
  7872  062E  0222               	subwf	(_b7+2)^(0+128),w
  7873  062F  1D03               	skipz
  7874  0630  2E39               	goto	u3433
  7875  0631  3000               	movlw	0
  7876  0632  0221               	subwf	(_b7+1)^(0+128),w
  7877  0633  1D03               	skipz
  7878  0634  2E39               	goto	u3433
  7879  0635  3000               	movlw	0
  7880  0636  0220               	subwf	_b7^(0+128),w
  7881  0637  1D03               	skipz
  7882  0638  2E39               	goto	u3433
  7883  0639                     u3433:
  7884  0639  1803               	btfsc	3,0
  7885  063A  2E3C               	goto	u3431
  7886  063B  2E3D               	goto	u3430
  7887  063C                     u3431:
  7888  063C  2E60               	goto	l3024
  7889  063D                     u3430:
  7890  063D                     l3022:
  7891                           
  7892                           ;main.c: 290: {;main.c: 291: p = (b7* 2)/ b4;
  7893  063D  1683               	bsf	3,5	;RP0=1, select bank1
  7894  063E  1303               	bcf	3,6	;RP1=0, select bank1
  7895  063F  0827               	movf	(_b4+3)^(0+128),w
  7896  0640  00F3               	movwf	___lldiv@divisor+3
  7897  0641  0826               	movf	(_b4+2)^(0+128),w
  7898  0642  00F2               	movwf	___lldiv@divisor+2
  7899  0643  0825               	movf	(_b4+1)^(0+128),w
  7900  0644  00F1               	movwf	___lldiv@divisor+1
  7901  0645  0824               	movf	_b4^(0+128),w
  7902  0646  00F0               	movwf	___lldiv@divisor
  7903  0647  1003               	clrc
  7904  0648  0D20               	rlf	_b7^(0+128),w
  7905  0649  00F4               	movwf	___lldiv@dividend
  7906  064A  0D21               	rlf	(_b7+1)^(0+128),w
  7907  064B  00F5               	movwf	___lldiv@dividend+1
  7908  064C  0D22               	rlf	(_b7+2)^(0+128),w
  7909  064D  00F6               	movwf	___lldiv@dividend+2
  7910  064E  0D23               	rlf	(_b7+3)^(0+128),w
  7911  064F  00F7               	movwf	___lldiv@dividend+3
  7912  0650  160A  118A  2733  120A  118A  	fcall	___lldiv
  7913  0655  0873               	movf	?___lldiv+3,w
  7914  0656  1283               	bcf	3,5	;RP0=0, select bank0
  7915  0657  1303               	bcf	3,6	;RP1=0, select bank0
  7916  0658  00C6               	movwf	_p+3
  7917  0659  0872               	movf	?___lldiv+2,w
  7918  065A  00C5               	movwf	_p+2
  7919  065B  0871               	movf	?___lldiv+1,w
  7920  065C  00C4               	movwf	_p+1
  7921  065D  0870               	movf	?___lldiv,w
  7922  065E  00C3               	movwf	_p
  7923                           
  7924                           ;main.c: 292: }
  7925  065F  2E82               	goto	l421
  7926  0660                     l3024:
  7927                           
  7928                           ;main.c: 293: else;main.c: 294: {;main.c: 295: p = (b7 / b4)* 2;
  7929  0660  1683               	bsf	3,5	;RP0=1, select bank1
  7930  0661  1303               	bcf	3,6	;RP1=0, select bank1
  7931  0662  0827               	movf	(_b4+3)^(0+128),w
  7932  0663  00F3               	movwf	___lldiv@divisor+3
  7933  0664  0826               	movf	(_b4+2)^(0+128),w
  7934  0665  00F2               	movwf	___lldiv@divisor+2
  7935  0666  0825               	movf	(_b4+1)^(0+128),w
  7936  0667  00F1               	movwf	___lldiv@divisor+1
  7937  0668  0824               	movf	_b4^(0+128),w
  7938  0669  00F0               	movwf	___lldiv@divisor
  7939  066A  0823               	movf	(_b7+3)^(0+128),w
  7940  066B  00F7               	movwf	___lldiv@dividend+3
  7941  066C  0822               	movf	(_b7+2)^(0+128),w
  7942  066D  00F6               	movwf	___lldiv@dividend+2
  7943  066E  0821               	movf	(_b7+1)^(0+128),w
  7944  066F  00F5               	movwf	___lldiv@dividend+1
  7945  0670  0820               	movf	_b7^(0+128),w
  7946  0671  00F4               	movwf	___lldiv@dividend
  7947  0672  160A  118A  2733  120A  118A  	fcall	___lldiv
  7948  0677  1003               	clrc
  7949  0678  0D70               	rlf	?___lldiv,w
  7950  0679  1283               	bcf	3,5	;RP0=0, select bank0
  7951  067A  1303               	bcf	3,6	;RP1=0, select bank0
  7952  067B  00C3               	movwf	_p
  7953  067C  0D71               	rlf	?___lldiv+1,w
  7954  067D  00C4               	movwf	_p+1
  7955  067E  0D72               	rlf	?___lldiv+2,w
  7956  067F  00C5               	movwf	_p+2
  7957  0680  0D73               	rlf	?___lldiv+3,w
  7958  0681  00C6               	movwf	_p+3
  7959  0682                     l421:
  7960                           
  7961                           ;main.c: 296: };main.c: 297: x1 =(p/256)*(p/256);
  7962  0682  3000               	movlw	0
  7963  0683  00CA               	movwf	___aldiv@divisor+3
  7964  0684  3000               	movlw	0
  7965  0685  00C9               	movwf	___aldiv@divisor+2
  7966  0686  3001               	movlw	1
  7967  0687  00C8               	movwf	___aldiv@divisor+1
  7968  0688  3000               	movlw	0
  7969  0689  00C7               	movwf	___aldiv@divisor
  7970  068A  0846               	movf	_p+3,w
  7971  068B  00CE               	movwf	___aldiv@dividend+3
  7972  068C  0845               	movf	_p+2,w
  7973  068D  00CD               	movwf	___aldiv@dividend+2
  7974  068E  0844               	movf	_p+1,w
  7975  068F  00CC               	movwf	___aldiv@dividend+1
  7976  0690  0843               	movf	_p,w
  7977  0691  00CB               	movwf	___aldiv@dividend
  7978  0692  120A  158A  20E3  120A  118A  	fcall	___aldiv
  7979  0697  1283               	bcf	3,5	;RP0=0, select bank0
  7980  0698  1303               	bcf	3,6	;RP1=0, select bank0
  7981  0699  084A               	movf	?___aldiv+3,w
  7982  069A  00F3               	movwf	___lmul@multiplier+3
  7983  069B  0849               	movf	?___aldiv+2,w
  7984  069C  00F2               	movwf	___lmul@multiplier+2
  7985  069D  0848               	movf	?___aldiv+1,w
  7986  069E  00F1               	movwf	___lmul@multiplier+1
  7987  069F  0847               	movf	?___aldiv,w
  7988  06A0  00F0               	movwf	___lmul@multiplier
  7989  06A1  3000               	movlw	0
  7990  06A2  00CA               	movwf	___aldiv@divisor+3
  7991  06A3  3000               	movlw	0
  7992  06A4  00C9               	movwf	___aldiv@divisor+2
  7993  06A5  3001               	movlw	1
  7994  06A6  00C8               	movwf	___aldiv@divisor+1
  7995  06A7  3000               	movlw	0
  7996  06A8  00C7               	movwf	___aldiv@divisor
  7997  06A9  0846               	movf	_p+3,w
  7998  06AA  00CE               	movwf	___aldiv@dividend+3
  7999  06AB  0845               	movf	_p+2,w
  8000  06AC  00CD               	movwf	___aldiv@dividend+2
  8001  06AD  0844               	movf	_p+1,w
  8002  06AE  00CC               	movwf	___aldiv@dividend+1
  8003  06AF  0843               	movf	_p,w
  8004  06B0  00CB               	movwf	___aldiv@dividend
  8005  06B1  120A  158A  20E3  120A  118A  	fcall	___aldiv
  8006  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  8007  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  8008  06B8  084A               	movf	?___aldiv+3,w
  8009  06B9  00F7               	movwf	___lmul@multiplicand+3
  8010  06BA  0849               	movf	?___aldiv+2,w
  8011  06BB  00F6               	movwf	___lmul@multiplicand+2
  8012  06BC  0848               	movf	?___aldiv+1,w
  8013  06BD  00F5               	movwf	___lmul@multiplicand+1
  8014  06BE  0847               	movf	?___aldiv,w
  8015  06BF  00F4               	movwf	___lmul@multiplicand
  8016  06C0  160A  118A  2646  120A  118A  	fcall	___lmul
  8017  06C5  0873               	movf	?___lmul+3,w
  8018  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  8019  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  8020  06C8  00A7               	movwf	_x1+3
  8021  06C9  0872               	movf	?___lmul+2,w
  8022  06CA  00A6               	movwf	_x1+2
  8023  06CB  0871               	movf	?___lmul+1,w
  8024  06CC  00A5               	movwf	_x1+1
  8025  06CD  0870               	movf	?___lmul,w
  8026  06CE  00A4               	movwf	_x1
  8027                           
  8028                           ;main.c: 298: x1 = (x1 * 3038)/65536;
  8029  06CF  3000               	movlw	0
  8030  06D0  00CA               	movwf	___aldiv@divisor+3
  8031  06D1  3001               	movlw	1
  8032  06D2  00C9               	movwf	___aldiv@divisor+2
  8033  06D3  3000               	movlw	0
  8034  06D4  00C8               	movwf	___aldiv@divisor+1
  8035  06D5  3000               	movlw	0
  8036  06D6  00C7               	movwf	___aldiv@divisor
  8037  06D7  0827               	movf	_x1+3,w
  8038  06D8  00F3               	movwf	___lmul@multiplier+3
  8039  06D9  0826               	movf	_x1+2,w
  8040  06DA  00F2               	movwf	___lmul@multiplier+2
  8041  06DB  0825               	movf	_x1+1,w
  8042  06DC  00F1               	movwf	___lmul@multiplier+1
  8043  06DD  0824               	movf	_x1,w
  8044  06DE  00F0               	movwf	___lmul@multiplier
  8045  06DF  3000               	movlw	0
  8046  06E0  00F7               	movwf	___lmul@multiplicand+3
  8047  06E1  3000               	movlw	0
  8048  06E2  00F6               	movwf	___lmul@multiplicand+2
  8049  06E3  300B               	movlw	11
  8050  06E4  00F5               	movwf	___lmul@multiplicand+1
  8051  06E5  30DE               	movlw	222
  8052  06E6  00F4               	movwf	___lmul@multiplicand
  8053  06E7  160A  118A  2646  120A  118A  	fcall	___lmul
  8054  06EC  0873               	movf	?___lmul+3,w
  8055  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  8056  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  8057  06EF  00CE               	movwf	___aldiv@dividend+3
  8058  06F0  0872               	movf	?___lmul+2,w
  8059  06F1  00CD               	movwf	___aldiv@dividend+2
  8060  06F2  0871               	movf	?___lmul+1,w
  8061  06F3  00CC               	movwf	___aldiv@dividend+1
  8062  06F4  0870               	movf	?___lmul,w
  8063  06F5  00CB               	movwf	___aldiv@dividend
  8064  06F6  120A  158A  20E3  120A  118A  	fcall	___aldiv
  8065  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  8066  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  8067  06FD  084A               	movf	?___aldiv+3,w
  8068  06FE  00A7               	movwf	_x1+3
  8069  06FF  0849               	movf	?___aldiv+2,w
  8070  0700  00A6               	movwf	_x1+2
  8071  0701  0848               	movf	?___aldiv+1,w
  8072  0702  00A5               	movwf	_x1+1
  8073  0703  0847               	movf	?___aldiv,w
  8074  0704  00A4               	movwf	_x1
  8075                           
  8076                           ;main.c: 299: x2 = (-7357 * p) / 65536;
  8077  0705  3000               	movlw	0
  8078  0706  00CA               	movwf	___aldiv@divisor+3
  8079  0707  3001               	movlw	1
  8080  0708  00C9               	movwf	___aldiv@divisor+2
  8081  0709  3000               	movlw	0
  8082  070A  00C8               	movwf	___aldiv@divisor+1
  8083  070B  3000               	movlw	0
  8084  070C  00C7               	movwf	___aldiv@divisor
  8085  070D  0846               	movf	_p+3,w
  8086  070E  00F3               	movwf	___lmul@multiplier+3
  8087  070F  0845               	movf	_p+2,w
  8088  0710  00F2               	movwf	___lmul@multiplier+2
  8089  0711  0844               	movf	_p+1,w
  8090  0712  00F1               	movwf	___lmul@multiplier+1
  8091  0713  0843               	movf	_p,w
  8092  0714  00F0               	movwf	___lmul@multiplier
  8093  0715  30FF               	movlw	255
  8094  0716  00F7               	movwf	___lmul@multiplicand+3
  8095  0717  30FF               	movlw	255
  8096  0718  00F6               	movwf	___lmul@multiplicand+2
  8097  0719  30E3               	movlw	227
  8098  071A  00F5               	movwf	___lmul@multiplicand+1
  8099  071B  3043               	movlw	67
  8100  071C  00F4               	movwf	___lmul@multiplicand
  8101  071D  160A  118A  2646  120A  118A  	fcall	___lmul
  8102  0722  0873               	movf	?___lmul+3,w
  8103  0723  1283               	bcf	3,5	;RP0=0, select bank0
  8104  0724  1303               	bcf	3,6	;RP1=0, select bank0
  8105  0725  00CE               	movwf	___aldiv@dividend+3
  8106  0726  0872               	movf	?___lmul+2,w
  8107  0727  00CD               	movwf	___aldiv@dividend+2
  8108  0728  0871               	movf	?___lmul+1,w
  8109  0729  00CC               	movwf	___aldiv@dividend+1
  8110  072A  0870               	movf	?___lmul,w
  8111  072B  00CB               	movwf	___aldiv@dividend
  8112  072C  120A  158A  20E3  120A  118A  	fcall	___aldiv
  8113  0731  1283               	bcf	3,5	;RP0=0, select bank0
  8114  0732  1303               	bcf	3,6	;RP1=0, select bank0
  8115  0733  084A               	movf	?___aldiv+3,w
  8116  0734  00A3               	movwf	_x2+3
  8117  0735  0849               	movf	?___aldiv+2,w
  8118  0736  00A2               	movwf	_x2+2
  8119  0737  0848               	movf	?___aldiv+1,w
  8120  0738  00A1               	movwf	_x2+1
  8121  0739  0847               	movf	?___aldiv,w
  8122  073A  00A0               	movwf	_x2
  8123                           
  8124                           ;main.c: 300: p=p+(x1+x2+3791)/16;
  8125  073B  3000               	movlw	0
  8126  073C  00CA               	movwf	___aldiv@divisor+3
  8127  073D  3000               	movlw	0
  8128  073E  00C9               	movwf	___aldiv@divisor+2
  8129  073F  3000               	movlw	0
  8130  0740  00C8               	movwf	___aldiv@divisor+1
  8131  0741  3010               	movlw	16
  8132  0742  00C7               	movwf	___aldiv@divisor
  8133  0743  30CF               	movlw	207
  8134  0744  00D5               	movwf	??_actual_pressure
  8135  0745  300E               	movlw	14
  8136  0746  00D6               	movwf	??_actual_pressure+1
  8137  0747  3000               	movlw	0
  8138  0748  00D7               	movwf	??_actual_pressure+2
  8139  0749  3000               	movlw	0
  8140  074A  00D8               	movwf	??_actual_pressure+3
  8141  074B  0824               	movf	_x1,w
  8142  074C  0720               	addwf	_x2,w
  8143  074D  00D9               	movwf	??_actual_pressure+4
  8144  074E  3000               	movlw	0
  8145  074F  1803               	skipnc
  8146  0750  3001               	movlw	1
  8147  0751  0725               	addwf	_x1+1,w
  8148  0752  01DB               	clrf	??_actual_pressure+6
  8149  0753  1803               	skipnc
  8150  0754  0ADB               	incf	??_actual_pressure+6,f
  8151  0755  0721               	addwf	_x2+1,w
  8152  0756  00DA               	movwf	??_actual_pressure+5
  8153  0757  1803               	skipnc
  8154  0758  0ADB               	incf	??_actual_pressure+6,f
  8155  0759  0826               	movf	_x1+2,w
  8156  075A  075B               	addwf	??_actual_pressure+6,w
  8157  075B  01DC               	clrf	??_actual_pressure+7
  8158  075C  1803               	skipnc
  8159  075D  0ADC               	incf	??_actual_pressure+7,f
  8160  075E  0722               	addwf	_x2+2,w
  8161  075F  00DB               	movwf	??_actual_pressure+6
  8162  0760  1803               	skipnc
  8163  0761  0ADC               	incf	??_actual_pressure+7,f
  8164  0762  0827               	movf	_x1+3,w
  8165  0763  075C               	addwf	??_actual_pressure+7,w
  8166  0764  0723               	addwf	_x2+3,w
  8167  0765  00DC               	movwf	??_actual_pressure+7
  8168  0766  0859               	movf	??_actual_pressure+4,w
  8169  0767  07D5               	addwf	??_actual_pressure,f
  8170  0768  085A               	movf	??_actual_pressure+5,w
  8171  0769  1803               	skipnc
  8172  076A  0F5A               	incfsz	??_actual_pressure+5,w
  8173  076B  2F6D               	goto	u3440
  8174  076C  2F6E               	goto	u3441
  8175  076D                     u3440:
  8176  076D  07D6               	addwf	??_actual_pressure+1,f
  8177  076E                     u3441:
  8178  076E  085B               	movf	??_actual_pressure+6,w
  8179  076F  1803               	skipnc
  8180  0770  0F5B               	incfsz	??_actual_pressure+6,w
  8181  0771  2F73               	goto	u3442
  8182  0772  2F74               	goto	u3443
  8183  0773                     u3442:
  8184  0773  07D7               	addwf	??_actual_pressure+2,f
  8185  0774                     u3443:
  8186  0774  085C               	movf	??_actual_pressure+7,w
  8187  0775  1803               	skipnc
  8188  0776  0A5C               	incf	??_actual_pressure+7,w
  8189  0777  07D8               	addwf	??_actual_pressure+3,f
  8190  0778  0858               	movf	??_actual_pressure+3,w
  8191  0779  00CE               	movwf	___aldiv@dividend+3
  8192  077A  0857               	movf	??_actual_pressure+2,w
  8193  077B  00CD               	movwf	___aldiv@dividend+2
  8194  077C  0856               	movf	??_actual_pressure+1,w
  8195  077D  00CC               	movwf	___aldiv@dividend+1
  8196  077E  0855               	movf	??_actual_pressure,w
  8197  077F  00CB               	movwf	___aldiv@dividend
  8198  0780  120A  158A  20E3  120A  118A  	fcall	___aldiv
  8199  0785  1283               	bcf	3,5	;RP0=0, select bank0
  8200  0786  1303               	bcf	3,6	;RP1=0, select bank0
  8201  0787  0847               	movf	?___aldiv,w
  8202  0788  0743               	addwf	_p,w
  8203  0789  00DD               	movwf	??_actual_pressure+8
  8204  078A  3000               	movlw	0
  8205  078B  1803               	skipnc
  8206  078C  3001               	movlw	1
  8207  078D  0748               	addwf	?___aldiv+1,w
  8208  078E  01DF               	clrf	??_actual_pressure+10
  8209  078F  1803               	skipnc
  8210  0790  0ADF               	incf	??_actual_pressure+10,f
  8211  0791  0744               	addwf	_p+1,w
  8212  0792  00DE               	movwf	??_actual_pressure+9
  8213  0793  1803               	skipnc
  8214  0794  0ADF               	incf	??_actual_pressure+10,f
  8215  0795  0849               	movf	?___aldiv+2,w
  8216  0796  075F               	addwf	??_actual_pressure+10,w
  8217  0797  01E0               	clrf	??_actual_pressure+11
  8218  0798  1803               	skipnc
  8219  0799  0AE0               	incf	??_actual_pressure+11,f
  8220  079A  0745               	addwf	_p+2,w
  8221  079B  00DF               	movwf	??_actual_pressure+10
  8222  079C  1803               	skipnc
  8223  079D  0AE0               	incf	??_actual_pressure+11,f
  8224  079E  084A               	movf	?___aldiv+3,w
  8225  079F  0760               	addwf	??_actual_pressure+11,w
  8226  07A0  0746               	addwf	_p+3,w
  8227  07A1  00E0               	movwf	??_actual_pressure+11
  8228  07A2  0860               	movf	??_actual_pressure+11,w
  8229  07A3  00C6               	movwf	_p+3
  8230  07A4  085F               	movf	??_actual_pressure+10,w
  8231  07A5  00C5               	movwf	_p+2
  8232  07A6  085E               	movf	??_actual_pressure+9,w
  8233  07A7  00C4               	movwf	_p+1
  8234  07A8  085D               	movf	??_actual_pressure+8,w
  8235  07A9  00C3               	movwf	_p
  8236                           
  8237                           ;main.c: 302: hpa = p/100;
  8238  07AA  3000               	movlw	0
  8239  07AB  00CA               	movwf	___aldiv@divisor+3
  8240  07AC  3000               	movlw	0
  8241  07AD  00C9               	movwf	___aldiv@divisor+2
  8242  07AE  3000               	movlw	0
  8243  07AF  00C8               	movwf	___aldiv@divisor+1
  8244  07B0  3064               	movlw	100
  8245  07B1  00C7               	movwf	___aldiv@divisor
  8246  07B2  0846               	movf	_p+3,w
  8247  07B3  00CE               	movwf	___aldiv@dividend+3
  8248  07B4  0845               	movf	_p+2,w
  8249  07B5  00CD               	movwf	___aldiv@dividend+2
  8250  07B6  0844               	movf	_p+1,w
  8251  07B7  00CC               	movwf	___aldiv@dividend+1
  8252  07B8  0843               	movf	_p,w
  8253  07B9  00CB               	movwf	___aldiv@dividend
  8254  07BA  120A  158A  20E3  120A  118A  	fcall	___aldiv
  8255  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  8256  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  8257  07C1  0848               	movf	?___aldiv+1,w
  8258  07C2  00AF               	movwf	_hpa+1
  8259  07C3  0847               	movf	?___aldiv,w
  8260  07C4  00AE               	movwf	_hpa
  8261  07C5                     l422:
  8262  07C5  0008               	return
  8263  07C6                     __end_of_actual_pressure:
  8264                           
  8265                           	psect	text47
  8266  1646                     __ptext47:	
  8267 ;; *************** function ___lmul *****************
  8268 ;; Defined at:
  8269 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;  multiplier      4    0[COMMON] unsigned long 
  8272 ;;  multiplicand    4    4[COMMON] unsigned long 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  product         4    9[COMMON] unsigned long 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  4    0[COMMON] unsigned long 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8284 ;;      Params:         8       0       0       0       0
  8285 ;;      Locals:         4       0       0       0       0
  8286 ;;      Temps:          1       0       0       0       0
  8287 ;;      Totals:        13       0       0       0       0
  8288 ;;Total ram usage:       13 bytes
  8289 ;; Hardware stack levels used: 1
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_LCD_num
  8294 ;;		_actual_pressure
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           
  8299                           ;psect for function ___lmul
  8300  1646                     ___lmul:
  8301  1646                     l1980:	
  8302                           ;incstack = 0
  8303                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8304                           
  8305  1646  3000               	movlw	0
  8306  1647  00FC               	movwf	___lmul@product+3
  8307  1648  3000               	movlw	0
  8308  1649  00FB               	movwf	___lmul@product+2
  8309  164A  3000               	movlw	0
  8310  164B  00FA               	movwf	___lmul@product+1
  8311  164C  3000               	movlw	0
  8312  164D  00F9               	movwf	___lmul@product
  8313  164E                     l1982:
  8314  164E  1C70               	btfss	___lmul@multiplier,0
  8315  164F  2E51               	goto	u1261
  8316  1650  2E52               	goto	u1260
  8317  1651                     u1261:
  8318  1651  2E69               	goto	l1986
  8319  1652                     u1260:
  8320  1652                     l1984:
  8321  1652  0874               	movf	___lmul@multiplicand,w
  8322  1653  07F9               	addwf	___lmul@product,f
  8323  1654  0875               	movf	___lmul@multiplicand+1,w
  8324  1655  1103               	clrz
  8325  1656  1803               	skipnc
  8326  1657  3E01               	addlw	1
  8327  1658  1903               	skipnz
  8328  1659  2E5B               	goto	u1271
  8329  165A  07FA               	addwf	___lmul@product+1,f
  8330  165B                     u1271:
  8331  165B  0876               	movf	___lmul@multiplicand+2,w
  8332  165C  1103               	clrz
  8333  165D  1803               	skipnc
  8334  165E  3E01               	addlw	1
  8335  165F  1903               	skipnz
  8336  1660  2E62               	goto	u1272
  8337  1661  07FB               	addwf	___lmul@product+2,f
  8338  1662                     u1272:
  8339  1662  0877               	movf	___lmul@multiplicand+3,w
  8340  1663  1103               	clrz
  8341  1664  1803               	skipnc
  8342  1665  3E01               	addlw	1
  8343  1666  1903               	skipnz
  8344  1667  2E69               	goto	u1273
  8345  1668  07FC               	addwf	___lmul@product+3,f
  8346  1669                     u1273:
  8347  1669                     l1986:
  8348  1669  3001               	movlw	1
  8349  166A  00F8               	movwf	??___lmul
  8350  166B                     u1285:
  8351  166B  1003               	clrc
  8352  166C  0DF4               	rlf	___lmul@multiplicand,f
  8353  166D  0DF5               	rlf	___lmul@multiplicand+1,f
  8354  166E  0DF6               	rlf	___lmul@multiplicand+2,f
  8355  166F  0DF7               	rlf	___lmul@multiplicand+3,f
  8356  1670  0BF8               	decfsz	??___lmul,f
  8357  1671  2E6B               	goto	u1285
  8358  1672                     l1988:
  8359  1672  3001               	movlw	1
  8360  1673                     u1295:
  8361  1673  1003               	clrc
  8362  1674  0CF3               	rrf	___lmul@multiplier+3,f
  8363  1675  0CF2               	rrf	___lmul@multiplier+2,f
  8364  1676  0CF1               	rrf	___lmul@multiplier+1,f
  8365  1677  0CF0               	rrf	___lmul@multiplier,f
  8366  1678  3EFF               	addlw	-1
  8367  1679  1D03               	skipz
  8368  167A  2E73               	goto	u1295
  8369  167B  0873               	movf	___lmul@multiplier+3,w
  8370  167C  0472               	iorwf	___lmul@multiplier+2,w
  8371  167D  0471               	iorwf	___lmul@multiplier+1,w
  8372  167E  0470               	iorwf	___lmul@multiplier,w
  8373  167F  1D03               	skipz
  8374  1680  2E82               	goto	u1301
  8375  1681  2E83               	goto	u1300
  8376  1682                     u1301:
  8377  1682  2E4E               	goto	l1982
  8378  1683                     u1300:
  8379  1683                     l1990:
  8380  1683  087C               	movf	___lmul@product+3,w
  8381  1684  00F3               	movwf	?___lmul+3
  8382  1685  087B               	movf	___lmul@product+2,w
  8383  1686  00F2               	movwf	?___lmul+2
  8384  1687  087A               	movf	___lmul@product+1,w
  8385  1688  00F1               	movwf	?___lmul+1
  8386  1689  0879               	movf	___lmul@product,w
  8387  168A  00F0               	movwf	?___lmul
  8388  168B                     l531:
  8389  168B  0008               	return
  8390  168C                     __end_of___lmul:
  8391                           
  8392                           	psect	text48
  8393  1733                     __ptext48:	
  8394 ;; *************** function ___lldiv *****************
  8395 ;; Defined at:
  8396 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\__lldiv.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  divisor         4    0[COMMON] unsigned long 
  8399 ;;  dividend        4    4[COMMON] unsigned long 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  quotient        4    9[COMMON] unsigned long 
  8402 ;;  counter         1   13[COMMON] unsigned char 
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  4    0[COMMON] unsigned long 
  8405 ;; Registers used:
  8406 ;;		wreg, status,2, status,0
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8412 ;;      Params:         8       0       0       0       0
  8413 ;;      Locals:         5       0       0       0       0
  8414 ;;      Temps:          1       0       0       0       0
  8415 ;;      Totals:        14       0       0       0       0
  8416 ;;Total ram usage:       14 bytes
  8417 ;; Hardware stack levels used: 1
  8418 ;; This function calls:
  8419 ;;		Nothing
  8420 ;; This function is called by:
  8421 ;;		_actual_pressure
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           
  8426                           ;psect for function ___lldiv
  8427  1733                     ___lldiv:
  8428  1733                     l2782:	
  8429                           ;incstack = 0
  8430                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8431                           
  8432  1733  3000               	movlw	0
  8433  1734  00FC               	movwf	___lldiv@quotient+3
  8434  1735  3000               	movlw	0
  8435  1736  00FB               	movwf	___lldiv@quotient+2
  8436  1737  3000               	movlw	0
  8437  1738  00FA               	movwf	___lldiv@quotient+1
  8438  1739  3000               	movlw	0
  8439  173A  00F9               	movwf	___lldiv@quotient
  8440  173B  0873               	movf	___lldiv@divisor+3,w
  8441  173C  0472               	iorwf	___lldiv@divisor+2,w
  8442  173D  0471               	iorwf	___lldiv@divisor+1,w
  8443  173E  0470               	iorwf	___lldiv@divisor,w
  8444  173F  1903               	skipnz
  8445  1740  2F42               	goto	u2861
  8446  1741  2F43               	goto	u2860
  8447  1742                     u2861:
  8448  1742  2F90               	goto	l2802
  8449  1743                     u2860:
  8450  1743                     l2784:
  8451  1743  01FD               	clrf	___lldiv@counter
  8452  1744  0AFD               	incf	___lldiv@counter,f
  8453  1745  2F53               	goto	l2788
  8454  1746                     l2786:
  8455  1746  3001               	movlw	1
  8456  1747  00F8               	movwf	??___lldiv
  8457  1748                     u2875:
  8458  1748  1003               	clrc
  8459  1749  0DF0               	rlf	___lldiv@divisor,f
  8460  174A  0DF1               	rlf	___lldiv@divisor+1,f
  8461  174B  0DF2               	rlf	___lldiv@divisor+2,f
  8462  174C  0DF3               	rlf	___lldiv@divisor+3,f
  8463  174D  0BF8               	decfsz	??___lldiv,f
  8464  174E  2F48               	goto	u2875
  8465  174F  3001               	movlw	1
  8466  1750  00F8               	movwf	??___lldiv
  8467  1751  0878               	movf	??___lldiv,w
  8468  1752  07FD               	addwf	___lldiv@counter,f
  8469  1753                     l2788:
  8470  1753  1FF3               	btfss	___lldiv@divisor+3,7
  8471  1754  2F56               	goto	u2881
  8472  1755  2F57               	goto	u2880
  8473  1756                     u2881:
  8474  1756  2F46               	goto	l2786
  8475  1757                     u2880:
  8476  1757                     l2790:
  8477  1757  3001               	movlw	1
  8478  1758  00F8               	movwf	??___lldiv
  8479  1759                     u2895:
  8480  1759  1003               	clrc
  8481  175A  0DF9               	rlf	___lldiv@quotient,f
  8482  175B  0DFA               	rlf	___lldiv@quotient+1,f
  8483  175C  0DFB               	rlf	___lldiv@quotient+2,f
  8484  175D  0DFC               	rlf	___lldiv@quotient+3,f
  8485  175E  0BF8               	decfsz	??___lldiv,f
  8486  175F  2F59               	goto	u2895
  8487  1760                     l2792:
  8488  1760  0873               	movf	___lldiv@divisor+3,w
  8489  1761  0277               	subwf	___lldiv@dividend+3,w
  8490  1762  1D03               	skipz
  8491  1763  2F6E               	goto	u2905
  8492  1764  0872               	movf	___lldiv@divisor+2,w
  8493  1765  0276               	subwf	___lldiv@dividend+2,w
  8494  1766  1D03               	skipz
  8495  1767  2F6E               	goto	u2905
  8496  1768  0871               	movf	___lldiv@divisor+1,w
  8497  1769  0275               	subwf	___lldiv@dividend+1,w
  8498  176A  1D03               	skipz
  8499  176B  2F6E               	goto	u2905
  8500  176C  0870               	movf	___lldiv@divisor,w
  8501  176D  0274               	subwf	___lldiv@dividend,w
  8502  176E                     u2905:
  8503  176E  1C03               	skipc
  8504  176F  2F71               	goto	u2901
  8505  1770  2F72               	goto	u2900
  8506  1771                     u2901:
  8507  1771  2F81               	goto	l2798
  8508  1772                     u2900:
  8509  1772                     l2794:
  8510  1772  0870               	movf	___lldiv@divisor,w
  8511  1773  02F4               	subwf	___lldiv@dividend,f
  8512  1774  0871               	movf	___lldiv@divisor+1,w
  8513  1775  1C03               	skipc
  8514  1776  0F71               	incfsz	___lldiv@divisor+1,w
  8515  1777  02F5               	subwf	___lldiv@dividend+1,f
  8516  1778  0872               	movf	___lldiv@divisor+2,w
  8517  1779  1C03               	skipc
  8518  177A  0F72               	incfsz	___lldiv@divisor+2,w
  8519  177B  02F6               	subwf	___lldiv@dividend+2,f
  8520  177C  0873               	movf	___lldiv@divisor+3,w
  8521  177D  1C03               	skipc
  8522  177E  0F73               	incfsz	___lldiv@divisor+3,w
  8523  177F  02F7               	subwf	___lldiv@dividend+3,f
  8524  1780                     l2796:
  8525  1780  1479               	bsf	___lldiv@quotient,0
  8526  1781                     l2798:
  8527  1781  3001               	movlw	1
  8528  1782                     u2915:
  8529  1782  1003               	clrc
  8530  1783  0CF3               	rrf	___lldiv@divisor+3,f
  8531  1784  0CF2               	rrf	___lldiv@divisor+2,f
  8532  1785  0CF1               	rrf	___lldiv@divisor+1,f
  8533  1786  0CF0               	rrf	___lldiv@divisor,f
  8534  1787  3EFF               	addlw	-1
  8535  1788  1D03               	skipz
  8536  1789  2F82               	goto	u2915
  8537  178A                     l2800:
  8538  178A  3001               	movlw	1
  8539  178B  02FD               	subwf	___lldiv@counter,f
  8540  178C  1D03               	btfss	3,2
  8541  178D  2F8F               	goto	u2921
  8542  178E  2F90               	goto	u2920
  8543  178F                     u2921:
  8544  178F  2F57               	goto	l2790
  8545  1790                     u2920:
  8546  1790                     l2802:
  8547  1790  087C               	movf	___lldiv@quotient+3,w
  8548  1791  00F3               	movwf	?___lldiv+3
  8549  1792  087B               	movf	___lldiv@quotient+2,w
  8550  1793  00F2               	movwf	?___lldiv+2
  8551  1794  087A               	movf	___lldiv@quotient+1,w
  8552  1795  00F1               	movwf	?___lldiv+1
  8553  1796  0879               	movf	___lldiv@quotient,w
  8554  1797  00F0               	movwf	?___lldiv
  8555  1798                     l553:
  8556  1798  0008               	return
  8557  1799                     __end_of___lldiv:
  8558                           
  8559                           	psect	text49
  8560  08E3                     __ptext49:	
  8561 ;; *************** function ___aldiv *****************
  8562 ;; Defined at:
  8563 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  divisor         4    0[BANK0 ] long 
  8566 ;;  dividend        4    4[BANK0 ] long 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  quotient        4   10[BANK0 ] long 
  8569 ;;  sign            1    9[BANK0 ] unsigned char 
  8570 ;;  counter         1    8[BANK0 ] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  4    0[BANK0 ] long 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8580 ;;      Params:         0       8       0       0       0
  8581 ;;      Locals:         0       6       0       0       0
  8582 ;;      Temps:          1       0       0       0       0
  8583 ;;      Totals:         1      14       0       0       0
  8584 ;;Total ram usage:       15 bytes
  8585 ;; Hardware stack levels used: 1
  8586 ;; This function calls:
  8587 ;;		Nothing
  8588 ;; This function is called by:
  8589 ;;		_LCD_num
  8590 ;;		_actual_pressure
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function ___aldiv
  8596  08E3                     ___aldiv:
  8597  08E3                     l1994:	
  8598                           ;incstack = 0
  8599                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  8600                           
  8601  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  8602  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  8603  08E5  01D0               	clrf	___aldiv@sign
  8604  08E6                     l1996:
  8605  08E6  1FCA               	btfss	___aldiv@divisor+3,7
  8606  08E7  28E9               	goto	u1311
  8607  08E8  28EA               	goto	u1310
  8608  08E9                     u1311:
  8609  08E9  28F7               	goto	l582
  8610  08EA                     u1310:
  8611  08EA                     l1998:
  8612  08EA  09C7               	comf	___aldiv@divisor,f
  8613  08EB  09C8               	comf	___aldiv@divisor+1,f
  8614  08EC  09C9               	comf	___aldiv@divisor+2,f
  8615  08ED  09CA               	comf	___aldiv@divisor+3,f
  8616  08EE  0AC7               	incf	___aldiv@divisor,f
  8617  08EF  1903               	skipnz
  8618  08F0  0AC8               	incf	___aldiv@divisor+1,f
  8619  08F1  1903               	skipnz
  8620  08F2  0AC9               	incf	___aldiv@divisor+2,f
  8621  08F3  1903               	skipnz
  8622  08F4  0ACA               	incf	___aldiv@divisor+3,f
  8623  08F5  01D0               	clrf	___aldiv@sign
  8624  08F6  0AD0               	incf	___aldiv@sign,f
  8625  08F7                     l582:
  8626  08F7  1FCE               	btfss	___aldiv@dividend+3,7
  8627  08F8  28FA               	goto	u1321
  8628  08F9  28FB               	goto	u1320
  8629  08FA                     u1321:
  8630  08FA  290A               	goto	l2004
  8631  08FB                     u1320:
  8632  08FB                     l2000:
  8633  08FB  09CB               	comf	___aldiv@dividend,f
  8634  08FC  09CC               	comf	___aldiv@dividend+1,f
  8635  08FD  09CD               	comf	___aldiv@dividend+2,f
  8636  08FE  09CE               	comf	___aldiv@dividend+3,f
  8637  08FF  0ACB               	incf	___aldiv@dividend,f
  8638  0900  1903               	skipnz
  8639  0901  0ACC               	incf	___aldiv@dividend+1,f
  8640  0902  1903               	skipnz
  8641  0903  0ACD               	incf	___aldiv@dividend+2,f
  8642  0904  1903               	skipnz
  8643  0905  0ACE               	incf	___aldiv@dividend+3,f
  8644  0906                     l2002:
  8645  0906  3001               	movlw	1
  8646  0907  00FD               	movwf	??___aldiv
  8647  0908  087D               	movf	??___aldiv,w
  8648  0909  06D0               	xorwf	___aldiv@sign,f
  8649  090A                     l2004:
  8650  090A  3000               	movlw	0
  8651  090B  00D4               	movwf	___aldiv@quotient+3
  8652  090C  3000               	movlw	0
  8653  090D  00D3               	movwf	___aldiv@quotient+2
  8654  090E  3000               	movlw	0
  8655  090F  00D2               	movwf	___aldiv@quotient+1
  8656  0910  3000               	movlw	0
  8657  0911  00D1               	movwf	___aldiv@quotient
  8658  0912                     l2006:
  8659  0912  084A               	movf	___aldiv@divisor+3,w
  8660  0913  0449               	iorwf	___aldiv@divisor+2,w
  8661  0914  0448               	iorwf	___aldiv@divisor+1,w
  8662  0915  0447               	iorwf	___aldiv@divisor,w
  8663  0916  1903               	skipnz
  8664  0917  2919               	goto	u1331
  8665  0918  291A               	goto	u1330
  8666  0919                     u1331:
  8667  0919  2967               	goto	l2026
  8668  091A                     u1330:
  8669  091A                     l2008:
  8670  091A  01CF               	clrf	___aldiv@counter
  8671  091B  0ACF               	incf	___aldiv@counter,f
  8672  091C  292A               	goto	l2012
  8673  091D                     l2010:
  8674  091D  3001               	movlw	1
  8675  091E  00FD               	movwf	??___aldiv
  8676  091F                     u1345:
  8677  091F  1003               	clrc
  8678  0920  0DC7               	rlf	___aldiv@divisor,f
  8679  0921  0DC8               	rlf	___aldiv@divisor+1,f
  8680  0922  0DC9               	rlf	___aldiv@divisor+2,f
  8681  0923  0DCA               	rlf	___aldiv@divisor+3,f
  8682  0924  0BFD               	decfsz	??___aldiv,f
  8683  0925  291F               	goto	u1345
  8684  0926  3001               	movlw	1
  8685  0927  00FD               	movwf	??___aldiv
  8686  0928  087D               	movf	??___aldiv,w
  8687  0929  07CF               	addwf	___aldiv@counter,f
  8688  092A                     l2012:
  8689  092A  1FCA               	btfss	___aldiv@divisor+3,7
  8690  092B  292D               	goto	u1351
  8691  092C  292E               	goto	u1350
  8692  092D                     u1351:
  8693  092D  291D               	goto	l2010
  8694  092E                     u1350:
  8695  092E                     l2014:
  8696  092E  3001               	movlw	1
  8697  092F  00FD               	movwf	??___aldiv
  8698  0930                     u1365:
  8699  0930  1003               	clrc
  8700  0931  0DD1               	rlf	___aldiv@quotient,f
  8701  0932  0DD2               	rlf	___aldiv@quotient+1,f
  8702  0933  0DD3               	rlf	___aldiv@quotient+2,f
  8703  0934  0DD4               	rlf	___aldiv@quotient+3,f
  8704  0935  0BFD               	decfsz	??___aldiv,f
  8705  0936  2930               	goto	u1365
  8706  0937                     l2016:
  8707  0937  084A               	movf	___aldiv@divisor+3,w
  8708  0938  024E               	subwf	___aldiv@dividend+3,w
  8709  0939  1D03               	skipz
  8710  093A  2945               	goto	u1375
  8711  093B  0849               	movf	___aldiv@divisor+2,w
  8712  093C  024D               	subwf	___aldiv@dividend+2,w
  8713  093D  1D03               	skipz
  8714  093E  2945               	goto	u1375
  8715  093F  0848               	movf	___aldiv@divisor+1,w
  8716  0940  024C               	subwf	___aldiv@dividend+1,w
  8717  0941  1D03               	skipz
  8718  0942  2945               	goto	u1375
  8719  0943  0847               	movf	___aldiv@divisor,w
  8720  0944  024B               	subwf	___aldiv@dividend,w
  8721  0945                     u1375:
  8722  0945  1C03               	skipc
  8723  0946  2948               	goto	u1371
  8724  0947  2949               	goto	u1370
  8725  0948                     u1371:
  8726  0948  2958               	goto	l2022
  8727  0949                     u1370:
  8728  0949                     l2018:
  8729  0949  0847               	movf	___aldiv@divisor,w
  8730  094A  02CB               	subwf	___aldiv@dividend,f
  8731  094B  0848               	movf	___aldiv@divisor+1,w
  8732  094C  1C03               	skipc
  8733  094D  0F48               	incfsz	___aldiv@divisor+1,w
  8734  094E  02CC               	subwf	___aldiv@dividend+1,f
  8735  094F  0849               	movf	___aldiv@divisor+2,w
  8736  0950  1C03               	skipc
  8737  0951  0F49               	incfsz	___aldiv@divisor+2,w
  8738  0952  02CD               	subwf	___aldiv@dividend+2,f
  8739  0953  084A               	movf	___aldiv@divisor+3,w
  8740  0954  1C03               	skipc
  8741  0955  0F4A               	incfsz	___aldiv@divisor+3,w
  8742  0956  02CE               	subwf	___aldiv@dividend+3,f
  8743  0957                     l2020:
  8744  0957  1451               	bsf	___aldiv@quotient,0
  8745  0958                     l2022:
  8746  0958  3001               	movlw	1
  8747  0959                     u1385:
  8748  0959  1003               	clrc
  8749  095A  0CCA               	rrf	___aldiv@divisor+3,f
  8750  095B  0CC9               	rrf	___aldiv@divisor+2,f
  8751  095C  0CC8               	rrf	___aldiv@divisor+1,f
  8752  095D  0CC7               	rrf	___aldiv@divisor,f
  8753  095E  3EFF               	addlw	-1
  8754  095F  1D03               	skipz
  8755  0960  2959               	goto	u1385
  8756  0961                     l2024:
  8757  0961  3001               	movlw	1
  8758  0962  02CF               	subwf	___aldiv@counter,f
  8759  0963  1D03               	btfss	3,2
  8760  0964  2966               	goto	u1391
  8761  0965  2967               	goto	u1390
  8762  0966                     u1391:
  8763  0966  292E               	goto	l2014
  8764  0967                     u1390:
  8765  0967                     l2026:
  8766  0967  0850               	movf	___aldiv@sign,w
  8767  0968  1903               	btfsc	3,2
  8768  0969  296B               	goto	u1401
  8769  096A  296C               	goto	u1400
  8770  096B                     u1401:
  8771  096B  2977               	goto	l2030
  8772  096C                     u1400:
  8773  096C                     l2028:
  8774  096C  09D1               	comf	___aldiv@quotient,f
  8775  096D  09D2               	comf	___aldiv@quotient+1,f
  8776  096E  09D3               	comf	___aldiv@quotient+2,f
  8777  096F  09D4               	comf	___aldiv@quotient+3,f
  8778  0970  0AD1               	incf	___aldiv@quotient,f
  8779  0971  1903               	skipnz
  8780  0972  0AD2               	incf	___aldiv@quotient+1,f
  8781  0973  1903               	skipnz
  8782  0974  0AD3               	incf	___aldiv@quotient+2,f
  8783  0975  1903               	skipnz
  8784  0976  0AD4               	incf	___aldiv@quotient+3,f
  8785  0977                     l2030:
  8786  0977  0854               	movf	___aldiv@quotient+3,w
  8787  0978  00CA               	movwf	?___aldiv+3
  8788  0979  0853               	movf	___aldiv@quotient+2,w
  8789  097A  00C9               	movwf	?___aldiv+2
  8790  097B  0852               	movf	___aldiv@quotient+1,w
  8791  097C  00C8               	movwf	?___aldiv+1
  8792  097D  0851               	movf	___aldiv@quotient,w
  8793  097E  00C7               	movwf	?___aldiv
  8794  097F                     l592:
  8795  097F  0008               	return
  8796  0980                     __end_of___aldiv:
  8797                           
  8798                           	psect	text50
  8799  1421                     __ptext50:	
  8800 ;; *************** function _LCD_init *****************
  8801 ;; Defined at:
  8802 ;;		line 41 in file "lcd4bit.h"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;		None
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  1    wreg      void 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0, pclath, cstack
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8816 ;;      Params:         0       0       0       0       0
  8817 ;;      Locals:         0       0       0       0       0
  8818 ;;      Temps:          2       0       0       0       0
  8819 ;;      Totals:         2       0       0       0       0
  8820 ;;Total ram usage:        2 bytes
  8821 ;; Hardware stack levels used: 1
  8822 ;; Hardware stack levels required when called: 1
  8823 ;; This function calls:
  8824 ;;		_LCD_Command
  8825 ;; This function is called by:
  8826 ;;		_main
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           
  8831                           ;psect for function _LCD_init
  8832  1421                     _LCD_init:
  8833  1421                     l2900:	
  8834                           ;incstack = 0
  8835                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  8836                           
  8837                           
  8838                           ;lcd4bit.h: 43: TRISBbits.TRISB7 =0;
  8839  1421  1683               	bsf	3,5	;RP0=1, select bank1
  8840  1422  1303               	bcf	3,6	;RP1=0, select bank1
  8841  1423  1386               	bcf	6,7	;volatile
  8842                           
  8843                           ;lcd4bit.h: 44: TRISBbits.TRISB6 =0;
  8844  1424  1306               	bcf	6,6	;volatile
  8845                           
  8846                           ;lcd4bit.h: 45: TRISBbits.TRISB5 =0;
  8847  1425  1286               	bcf	6,5	;volatile
  8848                           
  8849                           ;lcd4bit.h: 46: TRISBbits.TRISB4 =0;
  8850  1426  1206               	bcf	6,4	;volatile
  8851                           
  8852                           ;lcd4bit.h: 47: TRISCbits.TRISC0 =0;
  8853  1427  1007               	bcf	7,0	;volatile
  8854                           
  8855                           ;lcd4bit.h: 48: TRISCbits.TRISC1 =0;
  8856  1428  1087               	bcf	7,1	;volatile
  8857  1429                     l2902:
  8858                           
  8859                           ;lcd4bit.h: 50: LCD_Command (0x02);
  8860  1429  3002               	movlw	2
  8861  142A  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  8862                           
  8863                           ;lcd4bit.h: 51: LCD_Command (0x28);
  8864  142F  3028               	movlw	40
  8865  1430  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  8866                           
  8867                           ;lcd4bit.h: 52: LCD_Command (0x80);
  8868  1435  3080               	movlw	128
  8869  1436  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  8870                           
  8871                           ;lcd4bit.h: 53: LCD_Command (0x0C);
  8872  143B  300C               	movlw	12
  8873  143C  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  8874                           
  8875                           ;lcd4bit.h: 54: LCD_Command (0x06);
  8876  1441  3006               	movlw	6
  8877  1442  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  8878                           
  8879                           ;lcd4bit.h: 55: LCD_Command (0x01);
  8880  1447  3001               	movlw	1
  8881  1448  160A  118A  2540  160A  118A  	fcall	_LCD_Command
  8882  144D                     l2904:
  8883                           
  8884                           ;lcd4bit.h: 56: _delay((unsigned long)((10)*(20000000/4000.0)));
  8885  144D  3041               	movlw	65
  8886  144E  00F4               	movwf	??_LCD_init+1
  8887  144F  30EE               	movlw	238
  8888  1450  00F3               	movwf	??_LCD_init
  8889  1451                     u4437:
  8890  1451  0BF3               	decfsz	??_LCD_init,f
  8891  1452  2C51               	goto	u4437
  8892  1453  0BF4               	decfsz	??_LCD_init+1,f
  8893  1454  2C51               	goto	u4437
  8894  1455  0000               	nop
  8895  1456                     l115:
  8896  1456  0008               	return
  8897  1457                     __end_of_LCD_init:
  8898                           
  8899                           	psect	text51
  8900  1540                     __ptext51:	
  8901 ;; *************** function _LCD_Command *****************
  8902 ;; Defined at:
  8903 ;;		line 13 in file "lcd4bit.h"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  cmnd            1    wreg     unsigned char 
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  cmnd            1    2[COMMON] unsigned char 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  1    wreg      void 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8917 ;;      Params:         0       0       0       0       0
  8918 ;;      Locals:         1       0       0       0       0
  8919 ;;      Temps:          2       0       0       0       0
  8920 ;;      Totals:         3       0       0       0       0
  8921 ;;Total ram usage:        3 bytes
  8922 ;; Hardware stack levels used: 1
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_LCD_init
  8927 ;;		_main
  8928 ;;		_print_dht11data
  8929 ;;		_rtc_lcd_data
  8930 ;;		_bmp280_displaydata
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           
  8935                           ;psect for function _LCD_Command
  8936  1540                     _LCD_Command:
  8937                           
  8938                           ;incstack = 0
  8939                           ; Regs used in _LCD_Command: [wreg+status,2+status,0]
  8940                           ;LCD_Command@cmnd stored from wreg
  8941  1540  00F2               	movwf	LCD_Command@cmnd
  8942  1541                     l2510:
  8943                           
  8944                           ;lcd4bit.h: 15: RC0 = 0;
  8945  1541  1283               	bcf	3,5	;RP0=0, select bank0
  8946  1542  1303               	bcf	3,6	;RP1=0, select bank0
  8947  1543  1007               	bcf	7,0	;volatile
  8948  1544                     l2512:
  8949                           
  8950                           ;lcd4bit.h: 16: PORTB = cmnd;
  8951  1544  0872               	movf	LCD_Command@cmnd,w
  8952  1545  0086               	movwf	6	;volatile
  8953  1546                     l2514:
  8954                           
  8955                           ;lcd4bit.h: 17: RC1 = 1;
  8956  1546  1487               	bsf	7,1	;volatile
  8957                           
  8958                           ;lcd4bit.h: 18: _delay((unsigned long)((10)*(20000000/4000.0)));
  8959  1547  3041               	movlw	65
  8960  1548  00F1               	movwf	??_LCD_Command+1
  8961  1549  30EE               	movlw	238
  8962  154A  00F0               	movwf	??_LCD_Command
  8963  154B                     u4447:
  8964  154B  0BF0               	decfsz	??_LCD_Command,f
  8965  154C  2D4B               	goto	u4447
  8966  154D  0BF1               	decfsz	??_LCD_Command+1,f
  8967  154E  2D4B               	goto	u4447
  8968  154F  0000               	nop
  8969  1550                     l2516:
  8970                           
  8971                           ;lcd4bit.h: 19: RC1 = 0;
  8972  1550  1283               	bcf	3,5	;RP0=0, select bank0
  8973  1551  1303               	bcf	3,6	;RP1=0, select bank0
  8974  1552  1087               	bcf	7,1	;volatile
  8975                           
  8976                           ;lcd4bit.h: 20: _delay((unsigned long)((10)*(20000000/4000.0)));
  8977  1553  3041               	movlw	65
  8978  1554  00F1               	movwf	??_LCD_Command+1
  8979  1555  30EE               	movlw	238
  8980  1556  00F0               	movwf	??_LCD_Command
  8981  1557                     u4457:
  8982  1557  0BF0               	decfsz	??_LCD_Command,f
  8983  1558  2D57               	goto	u4457
  8984  1559  0BF1               	decfsz	??_LCD_Command+1,f
  8985  155A  2D57               	goto	u4457
  8986  155B  0000               	nop
  8987  155C                     l2518:
  8988                           
  8989                           ;lcd4bit.h: 21: PORTB = (cmnd<<4);
  8990  155C  0872               	movf	LCD_Command@cmnd,w
  8991  155D  00F0               	movwf	??_LCD_Command
  8992  155E  3003               	movlw	3
  8993  155F                     u2595:
  8994  155F  1003               	clrc
  8995  1560  0DF0               	rlf	??_LCD_Command,f
  8996  1561  3EFF               	addlw	-1
  8997  1562  1D03               	skipz
  8998  1563  2D5F               	goto	u2595
  8999  1564  1003               	clrc
  9000  1565  0D70               	rlf	??_LCD_Command,w
  9001  1566  1283               	bcf	3,5	;RP0=0, select bank0
  9002  1567  1303               	bcf	3,6	;RP1=0, select bank0
  9003  1568  0086               	movwf	6	;volatile
  9004  1569                     l2520:
  9005                           
  9006                           ;lcd4bit.h: 22: RC1 = 1;
  9007  1569  1487               	bsf	7,1	;volatile
  9008  156A                     l2522:
  9009                           
  9010                           ;lcd4bit.h: 23: _delay((unsigned long)((10)*(20000000/4000.0)));
  9011  156A  3041               	movlw	65
  9012  156B  00F1               	movwf	??_LCD_Command+1
  9013  156C  30EE               	movlw	238
  9014  156D  00F0               	movwf	??_LCD_Command
  9015  156E                     u4467:
  9016  156E  0BF0               	decfsz	??_LCD_Command,f
  9017  156F  2D6E               	goto	u4467
  9018  1570  0BF1               	decfsz	??_LCD_Command+1,f
  9019  1571  2D6E               	goto	u4467
  9020  1572  0000               	nop
  9021  1573                     l2524:
  9022                           
  9023                           ;lcd4bit.h: 24: RC1 = 0;
  9024  1573  1283               	bcf	3,5	;RP0=0, select bank0
  9025  1574  1303               	bcf	3,6	;RP1=0, select bank0
  9026  1575  1087               	bcf	7,1	;volatile
  9027  1576                     l2526:
  9028                           
  9029                           ;lcd4bit.h: 25: _delay((unsigned long)((10)*(20000000/4000.0)));
  9030  1576  3041               	movlw	65
  9031  1577  00F1               	movwf	??_LCD_Command+1
  9032  1578  30EE               	movlw	238
  9033  1579  00F0               	movwf	??_LCD_Command
  9034  157A                     u4477:
  9035  157A  0BF0               	decfsz	??_LCD_Command,f
  9036  157B  2D7A               	goto	u4477
  9037  157C  0BF1               	decfsz	??_LCD_Command+1,f
  9038  157D  2D7A               	goto	u4477
  9039  157E  0000               	nop
  9040  157F                     l109:
  9041  157F  0008               	return
  9042  1580                     __end_of_LCD_Command:
  9043                           
  9044                           	psect	text52
  9045  0809                     __ptext52:	
  9046 ;; *************** function _ADC_Init *****************
  9047 ;; Defined at:
  9048 ;;		line 109 in file "main.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      void 
  9055 ;; Registers used:
  9056 ;;		wreg
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9062 ;;      Params:         0       0       0       0       0
  9063 ;;      Locals:         0       0       0       0       0
  9064 ;;      Temps:          2       0       0       0       0
  9065 ;;      Totals:         2       0       0       0       0
  9066 ;;Total ram usage:        2 bytes
  9067 ;; Hardware stack levels used: 1
  9068 ;; This function calls:
  9069 ;;		Nothing
  9070 ;; This function is called by:
  9071 ;;		_main
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _ADC_Init
  9077  0809                     _ADC_Init:
  9078  0809                     l2924:	
  9079                           ;incstack = 0
  9080                           ; Regs used in _ADC_Init: [wreg]
  9081                           
  9082                           
  9083                           ;main.c: 111: ADCON0 = 0x85;
  9084  0809  3085               	movlw	133
  9085  080A  1283               	bcf	3,5	;RP0=0, select bank0
  9086  080B  1303               	bcf	3,6	;RP1=0, select bank0
  9087  080C  009F               	movwf	31	;volatile
  9088                           
  9089                           ;main.c: 112: ADCON1 = 0xC0;
  9090  080D  30C0               	movlw	192
  9091  080E  1683               	bsf	3,5	;RP0=1, select bank1
  9092  080F  1303               	bcf	3,6	;RP1=0, select bank1
  9093  0810  009F               	movwf	31	;volatile
  9094                           
  9095                           ;main.c: 113: AV[0]= ((ADRESH<<8)+ADRESL);
  9096  0811  1283               	bcf	3,5	;RP0=0, select bank0
  9097  0812  1303               	bcf	3,6	;RP1=0, select bank0
  9098  0813  081E               	movf	30,w	;volatile
  9099  0814  1683               	bsf	3,5	;RP0=1, select bank3
  9100  0815  1703               	bsf	3,6	;RP1=1, select bank3
  9101  0816  0091               	movwf	(_AV+1)^(0+384)
  9102  0817  1683               	bsf	3,5	;RP0=1, select bank1
  9103  0818  1303               	bcf	3,6	;RP1=0, select bank1
  9104  0819  081E               	movf	30,w	;volatile
  9105  081A  1683               	bsf	3,5	;RP0=1, select bank3
  9106  081B  1703               	bsf	3,6	;RP1=1, select bank3
  9107  081C  0090               	movwf	_AV^(0+384)
  9108                           
  9109                           ;main.c: 115: _delay((unsigned long)((10)*(20000000/4000.0)));
  9110  081D  3041               	movlw	65
  9111  081E  00F1               	movwf	??_ADC_Init+1
  9112  081F  30EE               	movlw	238
  9113  0820  00F0               	movwf	??_ADC_Init
  9114  0821                     u4487:
  9115  0821  0BF0               	decfsz	??_ADC_Init,f
  9116  0822  2821               	goto	u4487
  9117  0823  0BF1               	decfsz	??_ADC_Init+1,f
  9118  0824  2821               	goto	u4487
  9119  0825  0000               	nop
  9120                           
  9121                           ;main.c: 116: ADCON0 = 0x8D;
  9122  0826  308D               	movlw	141
  9123  0827  1283               	bcf	3,5	;RP0=0, select bank0
  9124  0828  1303               	bcf	3,6	;RP1=0, select bank0
  9125  0829  009F               	movwf	31	;volatile
  9126                           
  9127                           ;main.c: 117: ADCON1 = 0xC0;
  9128  082A  30C0               	movlw	192
  9129  082B  1683               	bsf	3,5	;RP0=1, select bank1
  9130  082C  1303               	bcf	3,6	;RP1=0, select bank1
  9131  082D  009F               	movwf	31	;volatile
  9132                           
  9133                           ;main.c: 118: AV[1]= ((ADRESH<<8)+ADRESL);
  9134  082E  1283               	bcf	3,5	;RP0=0, select bank0
  9135  082F  1303               	bcf	3,6	;RP1=0, select bank0
  9136  0830  081E               	movf	30,w	;volatile
  9137  0831  1683               	bsf	3,5	;RP0=1, select bank3
  9138  0832  1703               	bsf	3,6	;RP1=1, select bank3
  9139  0833  0093               	movwf	((_AV+1)^(0+384)+2)
  9140  0834  1683               	bsf	3,5	;RP0=1, select bank1
  9141  0835  1303               	bcf	3,6	;RP1=0, select bank1
  9142  0836  081E               	movf	30,w	;volatile
  9143  0837  1683               	bsf	3,5	;RP0=1, select bank3
  9144  0838  1703               	bsf	3,6	;RP1=1, select bank3
  9145  0839  0092               	movwf	(_AV^(0+384)+2)
  9146                           
  9147                           ;main.c: 120: _delay((unsigned long)((10)*(20000000/4000.0)));
  9148  083A  3041               	movlw	65
  9149  083B  00F1               	movwf	??_ADC_Init+1
  9150  083C  30EE               	movlw	238
  9151  083D  00F0               	movwf	??_ADC_Init
  9152  083E                     u4497:
  9153  083E  0BF0               	decfsz	??_ADC_Init,f
  9154  083F  283E               	goto	u4497
  9155  0840  0BF1               	decfsz	??_ADC_Init+1,f
  9156  0841  283E               	goto	u4497
  9157  0842  0000               	nop
  9158                           
  9159                           ;main.c: 121: ADCON0 = 0x95;
  9160  0843  3095               	movlw	149
  9161  0844  1283               	bcf	3,5	;RP0=0, select bank0
  9162  0845  1303               	bcf	3,6	;RP1=0, select bank0
  9163  0846  009F               	movwf	31	;volatile
  9164                           
  9165                           ;main.c: 122: ADCON1 = 0xC0;
  9166  0847  30C0               	movlw	192
  9167  0848  1683               	bsf	3,5	;RP0=1, select bank1
  9168  0849  1303               	bcf	3,6	;RP1=0, select bank1
  9169  084A  009F               	movwf	31	;volatile
  9170                           
  9171                           ;main.c: 123: AV[2]= ((ADRESH<<8)+ADRESL);
  9172  084B  1283               	bcf	3,5	;RP0=0, select bank0
  9173  084C  1303               	bcf	3,6	;RP1=0, select bank0
  9174  084D  081E               	movf	30,w	;volatile
  9175  084E  1683               	bsf	3,5	;RP0=1, select bank3
  9176  084F  1703               	bsf	3,6	;RP1=1, select bank3
  9177  0850  0095               	movwf	((_AV+1)^(0+384)+4)
  9178  0851  1683               	bsf	3,5	;RP0=1, select bank1
  9179  0852  1303               	bcf	3,6	;RP1=0, select bank1
  9180  0853  081E               	movf	30,w	;volatile
  9181  0854  1683               	bsf	3,5	;RP0=1, select bank3
  9182  0855  1703               	bsf	3,6	;RP1=1, select bank3
  9183  0856  0094               	movwf	(_AV^(0+384)+4)
  9184                           
  9185                           ;main.c: 125: _delay((unsigned long)((10)*(20000000/4000.0)));
  9186  0857  3041               	movlw	65
  9187  0858  00F1               	movwf	??_ADC_Init+1
  9188  0859  30EE               	movlw	238
  9189  085A  00F0               	movwf	??_ADC_Init
  9190  085B                     u4507:
  9191  085B  0BF0               	decfsz	??_ADC_Init,f
  9192  085C  285B               	goto	u4507
  9193  085D  0BF1               	decfsz	??_ADC_Init+1,f
  9194  085E  285B               	goto	u4507
  9195  085F  0000               	nop
  9196                           
  9197                           ;main.c: 126: ADCON0 = 0x9D;
  9198  0860  309D               	movlw	157
  9199  0861  1283               	bcf	3,5	;RP0=0, select bank0
  9200  0862  1303               	bcf	3,6	;RP1=0, select bank0
  9201  0863  009F               	movwf	31	;volatile
  9202                           
  9203                           ;main.c: 127: ADCON1 = 0xC0;
  9204  0864  30C0               	movlw	192
  9205  0865  1683               	bsf	3,5	;RP0=1, select bank1
  9206  0866  1303               	bcf	3,6	;RP1=0, select bank1
  9207  0867  009F               	movwf	31	;volatile
  9208                           
  9209                           ;main.c: 128: AV[3]= ((ADRESH<<8)+ADRESL);
  9210  0868  1283               	bcf	3,5	;RP0=0, select bank0
  9211  0869  1303               	bcf	3,6	;RP1=0, select bank0
  9212  086A  081E               	movf	30,w	;volatile
  9213  086B  1683               	bsf	3,5	;RP0=1, select bank3
  9214  086C  1703               	bsf	3,6	;RP1=1, select bank3
  9215  086D  0097               	movwf	((_AV+1)^(0+384)+6)
  9216  086E  1683               	bsf	3,5	;RP0=1, select bank1
  9217  086F  1303               	bcf	3,6	;RP1=0, select bank1
  9218  0870  081E               	movf	30,w	;volatile
  9219  0871  1683               	bsf	3,5	;RP0=1, select bank3
  9220  0872  1703               	bsf	3,6	;RP1=1, select bank3
  9221  0873  0096               	movwf	(_AV^(0+384)+6)
  9222  0874                     l384:
  9223  0874  0008               	return
  9224  0875                     __end_of_ADC_Init:
  9225  007E                     btemp	set	126	;btemp
  9226  007E                     wtemp0	set	126
  9227                           
  9228                           	psect	idloc
  9229                           
  9230                           ;Config register IDLOC0 @ 0x2000
  9231                           ;	unspecified, using default values
  9232  2000                     	org	8192
  9233  2000  3FFF               	dw	16383
  9234                           
  9235                           ;Config register IDLOC1 @ 0x2001
  9236                           ;	unspecified, using default values
  9237  2001                     	org	8193
  9238  2001  3FFF               	dw	16383
  9239                           
  9240                           ;Config register IDLOC2 @ 0x2002
  9241                           ;	unspecified, using default values
  9242  2002                     	org	8194
  9243  2002  3FFF               	dw	16383
  9244                           
  9245                           ;Config register IDLOC3 @ 0x2003
  9246                           ;	unspecified, using default values
  9247  2003                     	org	8195
  9248  2003  3FFF               	dw	16383
  9249                           
  9250                           	psect	config
  9251                           
  9252                           ;Config register CONFIG @ 0x2007
  9253                           ;	Oscillator Selection bits
  9254                           ;	FOSC = HS, HS oscillator
  9255                           ;	Watchdog Timer Enable bit
  9256                           ;	WDTE = OFF, WDT disabled
  9257                           ;	Power-up Timer Enable bit
  9258                           ;	PWRTE = OFF, PWRT disabled
  9259                           ;	Brown-out Reset Enable bit
  9260                           ;	BOREN = ON, BOR enabled
  9261                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  9262                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  9263                           ;	Data EEPROM Memory Code Protection bit
  9264                           ;	CPD = OFF, Data EEPROM code protection off
  9265                           ;	Flash Program Memory Write Enable bits
  9266                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  9267                           ;	In-Circuit Debugger Mode bit
  9268                           ;	DEBUG = 0x1, unprogrammed default
  9269                           ;	Flash Program Memory Code Protection bit
  9270                           ;	CP = OFF, Code protection off
  9271  2007                     	org	8199
  9272  2007  3FFA               	dw	16378

Data Sizes:
    Strings     22
    Constant    76
    Data        4
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     38      79
    BANK1            80      0      79
    BANK3            96      0      11
    BANK2            96      0       0

Pointer List with Targets:

    show@s	PTR unsigned char  size(1) Largest target is 6
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _uncompensated_pressure->_bmp280_read_byte
    _bmp280_send_byte->_bmp280_send
    _rtc_terminal_data->_convup
    _rtc_lcd_data->_LCD_Char
    _rtc_lcd_data->_LCD_Command
    _rtc_getdata->_rtc_read_byte
    _rtc_read_byte->_rtc_send
    _print_serialnumber->_tx_sn
    _print_dht11data->_show_multidigits
    _print_dht11data->_tx_sn
    _LCD_num->___aldiv
    _bmp280_terminaldata->_tx_sn
    _tx_sn->___awdiv
    _bmp280_getdata->_bmp280_read_byte
    _bmp280_read_byte->_bmp280_send
    _bmp280_displaydata->_show_multidigits
    _show_multidigits->___awdiv
    _show->_LCD_Char
    _actual_pressure->___aldiv
    _actual_pressure->___lldiv
    ___aldiv->___lmul
    _LCD_init->_LCD_Command

Critical Paths under _main in BANK0

    _main->_print_analogvoltages
    _print_serialnumber->_tx_sn
    _print_dht11data->_show_multidigits
    _print_dht11data->_tx_sn
    _print_analogvoltages->_LCD_num
    _LCD_num->___aldiv
    _bmp280_terminaldata->_tx_sn
    _bmp280_displaydata->_show_multidigits
    _actual_pressure->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   46393
                                             35 BANK0      3     3      0
                           _ADC_Init
                        _LCD_Command
                           _LCD_init
                    _actual_pressure
                 _bmp280_displaydata
                     _bmp280_getdata
                        _bmp280_init
                _bmp280_terminaldata
               _print_analogvoltages
                    _print_dht11data
                 _print_serialnumber
                        _rtc_getdata
                            _rtc_int
                       _rtc_lcd_data
                  _rtc_terminal_data
                            _ser_int
                                 _tx
             _uncompensated_pressure
 ---------------------------------------------------------------------------------
 (1) _uncompensated_pressure                              25    25      0     278
                                              0 BANK0     25    25      0
                   _bmp280_read_byte
                   _bmp280_send_byte
 ---------------------------------------------------------------------------------
 (2) _bmp280_send_byte                                     2     1      1     142
                                              1 COMMON     2     1      1
                        _bmp280_send
                       _bmp280_start
                        _bmp280_stop
 ---------------------------------------------------------------------------------
 (3) _bmp280_start                                         0     0      0       0
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rtc_terminal_data                                    0     0      0      66
                              _convd
                             _convup
                                 _tx
 ---------------------------------------------------------------------------------
 (1) _rtc_lcd_data                                         0     0      0     132
                           _LCD_Char
                        _LCD_Command
                              _convd
                             _convup
 ---------------------------------------------------------------------------------
 (2) _convup                                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _convd                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rtc_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rtc_getdata                                          1     1      0      67
                                              4 COMMON     1     1      0
                      _rtc_read_byte
 ---------------------------------------------------------------------------------
 (2) _rtc_read_byte                                        3     3      0      67
                                              1 COMMON     3     3      0
                            _rtc_nak
                           _rtc_read
                            _rtc_res
                           _rtc_send
                           _rtc_stop
                           _waitmssp
 ---------------------------------------------------------------------------------
 (3) _rtc_stop                                             0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (3) _rtc_send                                             1     1      0      22
                                              0 COMMON     1     1      0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (3) _rtc_res                                              0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (3) _rtc_read                                             0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (3) _rtc_nak                                              0     0      0       0
                           _waitmssp
 ---------------------------------------------------------------------------------
 (3) _waitmssp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_serialnumber                                   0     0      0    6385
                                 _tx
                              _tx_sn
 ---------------------------------------------------------------------------------
 (1) _print_dht11data                                      8     8      0   13073
                                             14 BANK0      8     8      0
                      _CheckResponse
                        _LCD_Command
                           _ReadData
                        _StartSignal
                               _show
                   _show_multidigits
                                 _tx
                              _tx_sn
 ---------------------------------------------------------------------------------
 (2) _StartSignal                                          2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadData                                             4     4      0     114
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _CheckResponse                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _print_analogvoltages                                 5     5      0    8248
                                             30 BANK0      5     5      0
                           _LCD_Char
                            _LCD_num
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _LCD_num                                             18    14      4    8002
                                             14 BANK0     16    12      4
                           _LCD_Char
                            ___aldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
               _intdigits_chardigits
 ---------------------------------------------------------------------------------
 (3) _intdigits_chardigits                                 7     1      6     294
                                              0 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (1) _bmp280_terminaldata                                  0     0      0    6385
                                 _tx
                              _tx_sn
 ---------------------------------------------------------------------------------
 (2) _tx_sn                                               16    14      2    6363
                                              9 COMMON     2     0      2
                                              0 BANK0     14    14      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
                                 _tx
 ---------------------------------------------------------------------------------
 (1) _tx                                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bmp280_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bmp280_getdata                                       4     4      0      67
                                              4 COMMON     4     4      0
                   _bmp280_read_byte
 ---------------------------------------------------------------------------------
 (2) _bmp280_read_byte                                     3     3      0      67
                                              1 COMMON     3     3      0
                         _bmp280_nak
                        _bmp280_read
                     _bmp280_restart
                        _bmp280_send
                        _bmp280_stop
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (3) _bmp280_stop                                          0     0      0       0
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (3) _bmp280_send                                          1     1      0      22
                                              0 COMMON     1     1      0
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (3) _bmp280_restart                                       0     0      0       0
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (3) _bmp280_read                                          0     0      0       0
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (3) _bmp280_nak                                           0     0      0       0
                    _bmp280_waitmssp
 ---------------------------------------------------------------------------------
 (4) _bmp280_waitmssp                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bmp280_displaydata                                   0     0      0    6574
                        _LCD_Command
                               _show
                   _show_multidigits
 ---------------------------------------------------------------------------------
 (2) _show_multidigits                                    16    14      2    6309
                                              9 COMMON     2     0      2
                                              0 BANK0     14    14      0
                           _LCD_Char
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    1375
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1378
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1208
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1212
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _show                                                 2     2      0     221
                                              3 COMMON     2     2      0
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             3     3      0      44
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _actual_pressure                                     18    18      0    5008
                                             14 BANK0     18    18      0
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8    1916
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     466
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8    2580
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      44
                                              3 COMMON     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          3     3      0      44
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Command
   _LCD_init
     _LCD_Command
   _actual_pressure
     ___aldiv
       ___lmul (ARG)
     ___lldiv
     ___lmul
   _bmp280_displaydata
     _LCD_Command
     _show
       _LCD_Char
     _show_multidigits
       _LCD_Char
       ___awdiv
       ___awmod
       ___lwdiv
       ___lwmod
   _bmp280_getdata
     _bmp280_read_byte
       _bmp280_nak
         _bmp280_waitmssp
       _bmp280_read
         _bmp280_waitmssp
       _bmp280_restart
         _bmp280_waitmssp
       _bmp280_send
         _bmp280_waitmssp
       _bmp280_stop
         _bmp280_waitmssp
       _bmp280_waitmssp
   _bmp280_init
   _bmp280_terminaldata
     _tx
     _tx_sn
       ___awdiv
       ___awmod
       ___lwdiv
       ___lwmod
       _tx
   _print_analogvoltages
     _LCD_Char
     _LCD_num
       _LCD_Char
       ___aldiv
       ___lmul
       ___lwdiv
       ___lwmod
       _intdigits_chardigits
     _tx
   _print_dht11data
     _CheckResponse
     _LCD_Command
     _ReadData
     _StartSignal
     _show
     _show_multidigits
     _tx
     _tx_sn
   _print_serialnumber
     _tx
     _tx_sn
   _rtc_getdata
     _rtc_read_byte
       _rtc_nak
         _waitmssp
       _rtc_read
         _waitmssp
       _rtc_res
         _waitmssp
       _rtc_send
         _waitmssp
       _rtc_stop
         _waitmssp
       _waitmssp
   _rtc_int
   _rtc_lcd_data
     _LCD_Char
     _LCD_Command
     _convd
     _convup
   _rtc_terminal_data
     _convd
     _convup
     _tx
   _ser_int
   _tx
   _uncompensated_pressure
     _bmp280_read_byte
     _bmp280_send_byte
       _bmp280_send
       _bmp280_start
         _bmp280_waitmssp
       _bmp280_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       B       9       11.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     26      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B7      12        0.0%
ABS                  0      0      B7       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Jun 09 11:40:31 2022

   __size_of_bmp280_terminaldata 001D                                _p 0043                                pc 0002  
             ??_bmp280_read_byte 0071                     ?_LCD_Command 0070                               _AV 0190  
                             _RH 0032                               _Ch 003D                               _b0 00C0  
                             _b1 00BC                               _b2 00B8                               _b3 00B4  
                             _b4 00A4                               _b5 00B0                               _b6 0028  
                             _b7 00A0                     ___awdiv@sign 0076                               _x1 0024  
                             _x2 0020                               _aa 00D8                               _x3 00A8  
                             _ab 00D4                               _ac 00D0                               _ad 00CC  
                             _ae 00C8                               _af 00C4                               _sn 00ED  
                             _up 00AC                               _tx 12E1                               fsr 0004  
          print_analogvoltages@i 0068            print_analogvoltages@j 0069             bmp280_send_byte@addr 0072  
       ??_uncompensated_pressure 0047                ?_bmp280_send_byte 0071                              l112 15BF  
                            l201 1601                ??_bmp280_waitmssp 0070                              l115 1456  
                            l124 13FF                              l140 131C                              l109 157F  
                            l133 0FFF                              l301 12F7                              l221 1299  
                            l118 0A3E                              l230 134D                              l143 12E6  
                            l127 132B                              l223 129F                              l304 1492  
                            l224 12A0                              l240 14DA                              l137 0FFF  
                            l305 14A0                              l145 12EA                              l146 12EB  
                            l162 029C                              l402 0CAB                              l218 138B  
                            l227 1347                              l243 1504                              l411 0E6D  
                            l308 14CA                              l236 1303                              l252 12C3  
                            l421 0682                              l405 16D9                              l261 130F  
                            l422 07C5                              l414 0B07                              l158 029C  
                            l270 0808                              l431 13C2                              l183 13A5  
                            l239 14CC                              l264 1290                              l408 0D8C  
                            l273 12BA                              l193 15C1                              l249 12CC  
                            l417 0BD5                              l282 12D6                              l258 12E0  
                            l531 168B                              l291 132D                              l267 1375  
                            l428 153F                              l276 12B1                              l292 1336  
                            l188 1420                              l285 1291                              l198 15F2  
                            l287 1297                              l295 133C                              l375 0011  
                            l384 0874                              l288 1298                              l376 0038  
                            l553 1798                              l298 13E0                              l387 135F  
                            ?_tx 0070                              l397 08E2                              l582 08F7  
                            l670 17FF                              l592 097F                              l683 1732  
                            l789 1645                              l799 1490                              _RC0 0038  
                            _RC1 0039                              _PEN 048A                              _SEN 0488  
                            _ac1 00E7                              _ac2 00E5                              _ac3 00E3  
                            _ac4 00E1                              _Sum 0030                              _day 0039  
             ??_bmp280_send_byte 0072                              _hpa 002E                              _avv 00DC  
                            _min 003B                              _sec 003C                              _oss 006D  
                            fsr0 0004                              indf 0000                     ___awmod@sign 0076  
                            tx@a 0070                     _bmp280_start 0800           show_multidigits@digit1 004D  
          bmp280_send_byte@count 0071           show_multidigits@digit2 004F           show_multidigits@digit3 004B  
         show_multidigits@digit4 0047                             ??_tx 0070                  __end_of_LCD_num 0A3F  
                           l2000 08FB                             l2010 091D                             l2002 0906  
                           l2020 0957                             l2012 092A                             l2004 090A  
                           l2100 1707                             l2030 0977                             l2022 0958  
                           l2014 092E                             l2006 0912                             l2110 1729  
                           l2102 1711                             l2024 0961                             l2016 0937  
                           l2008 091A                             l2040 17A3                             l2112 172E  
                           l2104 1717                             l3000 0B1E                             l2018 0949  
                           l2026 0967                             l3010 029D                             l2050 17B4  
                           l2042 17A5                             l2034 1799                             l2106 171E  
                           l2130 1604                             l3002 0B29                             l2028 096C  
                           l3020 0629                             l3012 02D1                             l2060 17CC  
                           l2052 17BA                             l2044 17A9                             l2036 179A  
                           l2108 1724                             l2140 161C                             l2132 160A  
                           l3004 0B3D                             l3022 063D                             l3014 0307  
                           l2062 17DD                             l2054 17BD                             l2070 17F1  
                           l2046 17AE                             l2038 179E                             l2142 162D  
                           l2134 160D                             l2150 1641                             l3030 1511  
                           l3006 0B51                             l3024 0660                             l3016 033F  
                           l2072 17F6                             l2064 17E3                             l2056 17C4  
                           l2048 17B2                             l2080 16DB                             l2144 1633  
                           l2136 1614                             l2128 1602                             l2160 1467  
                           l3032 1517                             l3040 13A6                             l3008 0B65  
                           l3018 037A                             l2074 17FB                             l2066 17E4  
                           l2058 17C8                             l2090 16EF                             l2082 16DF  
                           l2146 1634                             l2138 1618                             l2170 1486  
                           l2162 146B                             l2154 1457                             l3034 1522  
                           l3026 1505                             l2068 17EB                             l2092 16F5  
                           l2084 16E4                             l2148 163B                             l2164 146F  
                           l2156 145D                             l2172 148C                             l3036 152E  
                           l3028 150B                             l3300 00A6                             l2510 1541  
                           l2094 16F8                             l2086 16E6                             l2078 16DA  
                           l2166 1479                             l2158 1460                             l3038 1534  
                           l3310 00EB                             l3302 00C5                             l2520 1569  
                           l2512 1544                             l2096 16FF                             l2088 16EA  
                           l2168 147F                             l2600 0F5E                             l3312 00F1  
                           l3304 00DC                             l2522 156A                             l2514 1546  
                           l2098 1703                             l2610 0FC9                             l2602 0F84  
                           l2530 0980                             l3314 00FF                             l3306 00E1  
                           l2524 1573                             l2516 1550                             l2612 0FDC  
                           l2604 0F88                             l2620 010B                             l2540 09F5  
                           l2532 09B4                             l2700 141C                             l3308 00E6  
                           l2526 1576                             l2518 155C                             l1910 1586  
                           l2614 0FE3                             l2606 0F9F                             l2630 0141  
                           l2622 0114                             l2550 0A2B                             l2542 0A0C  
                           l2534 09C7                             l2710 15CC                             l2702 15C0  
                           l2800 178A                             l1920 15B3                             l1912 1590  
                           l2552 13E2                             l2616 0FEC                             l2608 0FB2  
                           l2560 0E6E                             l2640 0172                             l2632 0145  
                           l2624 011C                             l2544 0A13                             l2536 09DA  
                           l2528 0980                             l2720 1600                             l2712 15D2  
                           l3280 0035                             l2802 1790                             l1922 15B6  
                           l1914 159C                             l1906 1581                             l2554 13E3  
                           l2618 0FF5                             l2570 0EA4                             l2562 0E77  
                           l2650 01CF                             l2642 017B                             l2634 0158  
                           l2626 0125                             l2546 0A19                             l2538 09F1  
                           l2714 15E3                             l1930 1342                             l2730 14E0  
                           l3290 0057                             l3282 003C                             l2900 1421  
                           l1916 15A9                             l1908 1584                             l2556 13EF  
                           l2580 0ED5                             l2572 0EA8                             l2564 0E7F  
                           l2660 01FB                             l2652 01D6                             l2644 01A1  
                           l2636 015F                             l2628 012E                             l1924 131D  
                           l2548 0A22                             l2716 15F6                             l2708 15C7  
                           l1940 1300                             l1932 12C4                             l2740 14FE  
                           l2732 14E6                             l2724 14CC                             l3292 005C  
                           l3284 0047                             l2902 1429                             l1918 15AA  
                           l2558 13F3                             l2590 0F32                             l2582 0EDE  
                           l2574 0EBB                             l2566 0E88                             l1926 12E2  
                           l2670 0266                             l2662 0221                             l2654 01DF  
                           l2646 01A5                             l2638 0169                             l2718 15FA  
                           l1950 12DB                             l1934 12C7                             l2734 14EB  
                           l2726 14D1                             l2910 1383                             l3294 0061  
                           l3286 004D                             l3278 0007                             l2904 144D  
                           l2592 0F39                             l2584 0F04                             l2576 0EC2  
                           l2568 0E91                             l1960 12A9                             l2912 1360  
                           l2672 0279                             l2664 0225                             l2648 01BC  
                           l2656 01E9                             l2680 138C                             l1936 12F8  
                           l1944 12BB                             l1928 133E                             l2736 14F1  
                           l2728 14D5                             l2744 1305                             l2920 0CAC  
                           l1952 0800                             l2760 13DB                             l2752 13C4  
                           l3296 0066                             l3288 0052                             l2594 0F42  
                           l2586 0F08                             l2578 0ECC                             l1890 1291  
                           l1962 12AC                             l1970 1331                             l2770 14AC  
                           l2762 1492                             l2914 136D                             l2674 0280  
                           l2666 023C                             l2658 01F2                             l2690 1403  
                           l2682 1392                             l1938 12FB                             l1946 12BE  
                           l2738 14F9                             l2922 0D8D                             l2906 1310  
                           l1954 0803                             l2754 13C9                             l3298 0087  
                           l2924 0809                             l1980 1646                             l2588 0F1F  
                           l2596 0F4C                             l1964 12CD                             l1972 12EC  
                           l1956 12B2                             l2772 14B1                             l2764 1497  
                           l2676 0289                             l2668 024F                             l2932 0878  
                           l2692 1408                             l2684 139A                             l2916 134E  
                           l1948 12D7                             l2908 1376                             l2748 128D  
                           l2756 13CF                             l2790 1757                             l2782 1733  
                           l1990 1683                             l1982 164E                             l2598 0F55  
                           l1966 12D1                             l1974 12EF                             l1958 12B5  
                           l2774 14B7                             l2766 149B                             l2678 0292  
                           l2950 08B6                             l2942 0897                             l2934 088E  
                           l2926 0875                             l2694 140E                             l2686 13A2  
                           l2918 168C                             l2758 13D5                             l2792 1760  
                           l2784 1743                             l1984 1652                             l1976 12F4  
                           l1968 132D                             l2776 14BF                             l2768 14A6  
                           l2960 08DC                             l2952 08BC                             l2944 08A2  
                           l2936 0894                             l2696 1412                             l2688 1400  
                           l1888 1299                             l1994 08E3                             l2794 1772  
                           l2786 1746                             l1986 1669                             l2778 14C4  
                           l2954 08C2                             l2946 08A9                             l2698 1418  
                           l2970 0C41                             l2962 0BD6                             l1996 08E6  
                           l2796 1780                             l2788 1753                             l1988 1672  
                           l2956 08C8                             l2948 08B0                             l2980 0C6C  
                           l2972 0C4F                             l2964 0BE0                             l1998 08EA  
                           l2798 1781                             l2958 08D6                             l2990 0C8F  
                           l2982 0C77                             l2974 0C55                             l2966 0BE7  
                           l2992 0C9A                             l2984 0C7D                             l2976 0C5B  
                           l2968 0C1C                             l2994 0CA5                             l2986 0C83  
                           l2978 0C61                             l2996 0A3F                             l2988 0C89  
                           l2998 0B08                             STR_1 1058                             STR_2 1052  
                           STR_3 105E                             STR_4 1063                             u1300 1683  
                           u1301 1682                             u1310 08EA                             u1230 12EA  
                           u1311 08E9                             u1231 12E9                             u1400 096C  
                           u1320 08FB                             u1240 134D                             u1401 096B  
                           u1321 08FA                             u1225 159F                             u1241 134C  
                           u1330 091A                             u1410 179E                             u1250 133C  
                           u1170 129F                             u1331 0919                             u1411 179D  
                           u1251 133B                             u1171 129E                             u1260 1652  
                           u1500 17F6                             u1420 17A9                             u1180 1297  
                           u1261 1651                             u1501 17F5                             u1421 17A8  
                           u1181 1296                             u1350 092E                             u1430 17BA  
                           u1510 16DF                             u1351 092D                             u1271 165B  
                           u1431 17B9                             u1511 16DE                             u1272 1662  
                           u1520 16EA                             u3200 136A                             u1345 091F  
                           u1273 1669                             u1521 16E9                             u3201 1366  
                           u1370 0949                             u1450 17CC                             u1530 16F5  
                           u1371 0948                             u1451 17CB                             u1531 16F4  
                           u1700 145D                             u3220 08A9                             u3300 0B90  
                           u1365 0930                             u1285 166B                             u1445 17BE  
                           u1701 145C                             u3221 08A8                             u1390 0967  
                           u1470 17DD                             u1550 1707                             u1630 160A  
                           u3214 136D                             u3230 08B6                             u3310 0B9A  
                           u1391 0966                             u1375 0945                             u1295 1673  
                           u1471 17DC                             u1551 1706                             u1631 1609  
                           u3231 08B5                             u3311 0B9B                             u3400 05A1  
                           u2600 13FF                             u1560 1711                             u1720 146F  
                           u3240 08C8                             u3320 0BAC                             u3312 0BA0  
                           u1385 0959                             u2601 13FE                             u1465 17CD  
                           u1561 1710                             u1545 16F9                             u1721 146E  
                           u3241 08C7                             u3321 0BAD                             u3313 0BA1  
                           u3305 0B8B                             u1490 17F1                             u1650 161C  
                           u1730 1479                             u2610 0E77                             u3250 08E2  
                           u3330 0BBD                             u3322 0BB2                             u3411 05DD  
                           u1491 17F0                             u1475 17D9                             u1651 161B  
                           u1731 1478                             u1715 1461                             u2611 0E76  
                           u3251 08E1                             u3323 0BB3                             u3420 0610  
                           u3412 05E0                             u3340 02B4                             u1580 1724  
                           u2620 0E88                             u2700 012E                             u3260 0BE7  
                           u3180 1380                             u3413 05E7                             u3405 059C  
                           u3341 02B7                             u1485 17E5                             u1581 1723  
                           u1565 170D                             u1645 160E                             u2621 0E87  
                           u2701 012D                             u3261 0BE6                             u3181 137C  
                           u3430 063D                             u3414 05EA                             u3350 03F7  
                           u3342 02BE                             u1590 1729                             u1670 162D  
                           u1750 148C                             u2630 0E91                             u2710 0172  
                           u3270 0C41                             u3431 063C                             u3415 05F1  
                           u3351 03F8                             u3343 02C1                             u1591 1728  
                           u1575 1718                             u1671 162C                             u1751 148B  
                           u1735 1475                             u2631 0E90                             u2711 0171  
                           u3271 0C40                             u3335 0BB8                             u3440 076D  
                           u3416 05F4                             u3360 0409                             u3352 03FD  
                           u2640 0ED5                             u2720 017B                             u3441 076E  
                           u3433 0639                             u3425 060B                             u3353 03FE  
                           u1665 161D                             u1745 1480                             u2641 0ED4  
                           u2721 017A                             u3442 0773                             u3370 0413  
                           u1690 1641                             u2650 0EDE                             u2730 01F2  
                           u2810 15F6                             u3194 1383                             u3290 0B7F  
                           u3443 0774                             u3371 0414                             u1691 1640  
                           u1675 1629                             u2651 0EDD                             u2731 01F1  
                           u2811 15F5                             u3275 0C3D                             u4307 00F9  
                           u2900 1772                             u3380 0520                             u3372 0419  
                           u2660 0F55                             u2740 01FB                             u2820 1600  
                           u2804 15EB                             u2901 1771                             u3381 0521  
                           u3373 041A                             u3365 0404                             u1685 1635  
                           u2661 0F54                             u2741 01FA                             u2821 15FF  
                           u2805 15E9                             u4317 0B24                             u3285 0B0D  
                           u3390 0567                             u3382 0526                             u2670 0F5E  
                           u2750 140E                             u2830 14E0                             u3391 056A  
                           u3383 0527                             u4407 1597                             u2671 0F5D  
                           u2751 140D                             u4327 1396                             u2831 14DF  
                           u3295 0B7A                             u2920 1790                             u3392 0571  
                           u2680 0114                             u2760 1418                             u2921 178F  
                           u2905 176E                             u3393 0574                             u4417 15AE  
                           u2681 0113                             u2761 1417                             u4337 139F  
                           u2850 14A6                             u2690 0125                             u2770 15C7  
                           u4507 085B                             u2595 155F                             u2915 1782  
                           u4427 15BA                             u2851 14A5                             u2691 0124  
                           u4347 15C9                             u2771 15C6                             u2860 1743  
                           u2780 15D2                             u4437 1451                             u2861 1742  
                           u4357 1405                             u2781 15D1                             u2845 1308  
                           u4447 154B                             u4367 1410                             u2880 1757  
                           u4457 1557                             u2881 1756                             u4377 141A  
                           u4297 0042                             u2794 15DA                             u4467 156E  
                           u2875 1748                             u4387 08D0                             u2795 15D8  
                           _RCEN 048B                             _RCIF 0065                             u4477 157A  
                           u4397 158B                             u3870 003C                             u4487 0821  
                           u2895 1759                             u3871 003B                             u4497 083E  
         show_multidigits@result 0049                             _RSEN 0489                             _TXIF 0064  
   __end_of_print_analogvoltages 08E3                             _Temp 0034                             _date 0038  
                           _main 0007                             _hour 003A                             _show 13E1  
                           _year 0036                             btemp 007E                 __end_of_ADC_Init 0875  
                           start 0000       __size_of_rtc_terminal_data 00E1                 __end_of_LCD_Char 15C0  
                   LCD_Char@data 0072                 __end_of_LCD_init 1457                  ??_rtc_read_byte 0071  
                __end_of___aldiv 0980                            ?_main 0070                            _ACKEN 048C  
                          _ACKDT 048D                  __end_of___awdiv 1800                  __end_of___awmod 1733  
                          ?_show 0070                  __end_of___lldiv 1799                  ___awdiv@divisor 0070  
                __end_of___lwdiv 1646                  __end_of___lwmod 1491                  ___awdiv@counter 0075  
                          _RCREG 001A                            _RCSTA 0018          show_multidigits@result1 0051  
                          _SPBRG 0099                            _PORTB 0006                            _SSPIF 0063  
                          _TXREG 0019                            _TXSTA 0098                            _Check 0042  
            ___lmul@multiplicand 0074                            _convd 128C                            _errno 00DF  
                          _month 0037                            _tx_sn 010B                  __end_of_ser_int 131D  
                          pclath 000A               _print_serialnumber 134E                  __end_of_rtc_nak 12E1  
                __end_of_rtc_int 138C                  __end_of_rtc_res 12C4                            show@s 0074  
                 _bmp280_getdata 0A3F                            status 0003                            wtemp0 007E  
            ?_print_serialnumber 0070                   _bmp280_restart 12A9                  __initialization 07C6  
                   __end_of_main 010B                ??_actual_pressure 0055                     __end_of_show 1400  
               __end_of_ReadData 1602                           ??_main 006A  __size_of_uncompensated_pressure 00CE  
                         ??_show 0073                   LCD_num@result1 0061             _intdigits_chardigits 131D  
                      ??_LCD_num 007E             ??_print_serialnumber 007B                           _ADCON0 001F  
                         _ADCON1 009F                           ?_convd 0070                           _ADRESH 001E  
                         _ADRESL 009E                 ___awdiv@dividend 0072           __end_of_bmp280_getdata 0B08  
                         ?_tx_sn 0079                           _SSPADD 0093                           _TRISC3 043B  
                         _TRISC4 043C                           _SSPCON 0014                           _SSPBUF 0013  
         __end_of_bmp280_restart 12B2                           ___lmul 1646                        ??___aldiv 007D  
                      ??___awdiv 0074                        ??___awmod 0074                        ??___lldiv 0078  
                      ??___lwdiv 0074                        ??___lwmod 0074                           _convup 1304  
               ___awdiv@quotient 0077                  ___awmod@divisor 0070                  ___awmod@counter 0075  
           _print_analogvoltages 0875             __size_of_LCD_Command 0040              bmp280_read_byte@rec 0073  
          ?_intdigits_chardigits 0070           __size_of_CheckResponse 0021                        ?_ADC_Init 0070  
           _actual_pressure$1207 0063                 __end_of_rtc_read 1304                 __end_of_waitmssp 12A1  
               __end_of_rtc_send 134E                        ??_ser_int 0070                     ?_rtc_getdata 0070  
               __end_of_rtc_stop 12CD                        ??_rtc_nak 0070                        ??_rtc_int 0070  
                      ??_rtc_res 0070              _bmp280_terminaldata 13A6                  ?_bmp280_getdata 0070  
      __size_of_show_multidigits 0192                 __end_ofexp@coeff 102E                 __end_oflog@coeff 1052  
         _uncompensated_pressure 0B08                        ?_LCD_Char 0070          __end_of__initialization 07FC  
                      ?_LCD_init 0070                  ?_bmp280_restart 0070                       _bmp280_nak 12CD  
                _bmp280_waitmssp 1291                   __pcstackCOMMON 0070         __size_of_print_dht11data 00D6  
           ?_bmp280_terminaldata 0070                     __pidataBANK0 0005                     __pidataBANK1 0003  
                  ??_StartSignal 0070                    __end_of_convd 1291      __size_of_bmp280_displaydata 003B  
                  __end_of_tx_sn 029D            ?_print_analogvoltages 0070                       __end_of_tx 12EC  
                     ??_ADC_Init 0070        __size_of_bmp280_read_byte 003A                          ??_convd 0070  
                        ??_tx_sn 007B                       __pbssBANK0 0020                       __pbssBANK1 00A0  
                     __pbssBANK3 0190                    ??_bmp280_init 0070                    ??_bmp280_read 0070  
                  ??_bmp280_send 0070                    ??_bmp280_stop 0070        __size_of_bmp280_send_byte 001E  
                      ?_ReadData 0070                   tx_sn@remainder 0053                       ??_LCD_Char 0070  
                     ??_LCD_init 0073                    _CheckResponse 1400                     tx_sn@result1 0051  
                     __pmaintext 0007            ??_bmp280_terminaldata 007B                          ?___lmul 0070  
                        ?_convup 0070                          _ACKSTAT 048E                   ___lmul@product 0079  
         ??_intdigits_chardigits 0076              __end_of_StartSignal 13A6                          _LCD_num 0980  
                     __stringtab 1000              show_multidigits@val 0079                       ??_ReadData 0070  
        __end_of_bmp280_waitmssp 1299                  _actual_pressure 029D                   ?_CheckResponse 0070  
                    ?_bmp280_nak 0070                          _T_byte1 0041                          _T_byte2 0040  
            __end_of_bmp280_init 1376              __end_of_bmp280_read 12F8              __end_of_bmp280_send 133D  
            __end_of_bmp280_stop 12BB                        ?_rtc_read 0070                        ?_waitmssp 0070  
                        ___aldiv 08E3                        ?_rtc_send 0070                        ?_rtc_stop 0070  
                        ___awdiv 1799                  __size_of___lmul 0046                          ___awmod 16DA  
                        ___lldiv 1733                          ___lwdiv 1602                          ___lwmod 1457  
         ??_print_analogvoltages 0065                  __size_of_convup 000C                          __ptext1 0B08  
                        __ptext2 13C3                          __ptext3 0800                          __ptext4 1310  
                        __ptext5 0D8D                          __ptext6 0CAC                          __ptext7 1304  
                        __ptext8 128C                          __ptext9 1376                ??_print_dht11data 0055  
          __end_of_rtc_read_byte 1505                          _message 0198                 ___awmod@dividend 0072  
               ___aldiv@dividend 004B                          _ser_int 1310                          _rtc_nak 12D7  
                        _rtc_int 1376                          _rtc_res 12BB                          clrloop0 12A2  
           bmp280_read_byte@addr 0072             __size_of_rtc_getdata 004E             end_of_initialization 07FC  
               _show_multidigits 0E6E                  ___lldiv@divisor 0070                  ___lldiv@counter 007D  
                  ?_rtc_lcd_data 0070                 ___aldiv@quotient 0051                       ??_rtc_read 0070  
                     ??_waitmssp 0070                       ??_rtc_send 0070                       ??_rtc_stop 0070  
                    _StartSignal 138C                        _PORTDbits 0008                 rtc_read_byte@rec 0073  
            __size_of_bmp280_nak 000A                 ??_bmp280_getdata 0074                 _bmp280_read_byte 1491  
    __size_of_print_serialnumber 0012                        _TRISBbits 0086                        _TRISCbits 0087  
                      _TRISDbits 0088          __end_of_actual_pressure 07C6                __size_of_ADC_Init 006C  
        ?_uncompensated_pressure 0070                 ??_bmp280_restart 0070                  ??_CheckResponse 0070  
               _bmp280_send_byte 13C3                      _bmp280_init 1360                      _bmp280_read 12EC  
                    _bmp280_send 132C                      _bmp280_stop 12B2                 ?_bmp280_waitmssp 0070  
                      ReadData@i 0072                        ReadData@j 0073                __size_of_LCD_Char 0040  
                 ??_rtc_lcd_data 0073                __size_of_LCD_init 0036                    ??_LCD_Command 0070  
                 __end_of___lmul 168C                   __end_of_convup 1310              start_initialization 07C6  
                  ?_bmp280_start 0070   __end_of_uncompensated_pressure 0BD6                    LCD_num@digit1 0059  
                  LCD_num@digit2 005B                    LCD_num@digit3 005D                       LCD_num@val 0055  
                  LCD_num@result 005F                __size_of_ReadData 0042       __end_of_bmp280_displaydata 1540  
                       ??___lmul 0078                      __pdataBANK0 006D                      __pdataBANK1 00ED  
                       ??_convup 0070                 LCD_num@remainder 0063              __end_of_LCD_Command 1580  
                 ??_bmp280_start 0070                         ?_LCD_num 0055                        ___latbits 0002  
                  __pcstackBANK0 0047                 ?_actual_pressure 0070      __end_of_bmp280_terminaldata 13C3  
                   ??_bmp280_nak 0070                      tx_sn@digit1 004D                      tx_sn@digit2 004F  
                    tx_sn@digit3 004B                      tx_sn@digit4 0047                 ___lwdiv@dividend 0072  
                _print_dht11data 0BD6                      tx_sn@result 0049                         ?___aldiv 0047  
                       ?___awdiv 0070                         ?___awmod 0070                         ?___lldiv 0070  
                       ?___lwdiv 0070                         ?___lwmod 0070         __end_of_show_multidigits 1000  
              __size_of_rtc_read 000C                __size_of_waitmssp 0008                __size_of_rtc_send 0011  
              __size_of_rtc_stop 0009                        __pstrings 1000    __size_of_intdigits_chardigits 000F  
                       _ADC_Init 0809             __end_of_rtc_lcd_data 0D8D               __end_of_bmp280_nak 12D7  
                       ?_ser_int 0070                         ?_rtc_nak 0070                         ?_rtc_int 0070  
                       ?_rtc_res 0070                 ___lwdiv@quotient 0075                   __size_of_convd 0005  
                 __size_of_tx_sn 0192                      __size_of_tx 000B                  ___aldiv@divisor 0047  
                       _LCD_Char 1580                  ___aldiv@counter 004F                         _LCD_init 1421  
                      clear_ram0 12A1         __end_of_bmp280_read_byte 14CB                         _GO_nDONE 00FA  
                   ?_StartSignal 0070                      _LCD_Command 1540         __end_of_bmp280_send_byte 13E1  
  __size_of_print_analogvoltages 006E                      __stringbase 1005                         _RH_byte1 003F  
                       _RH_byte2 003E                    ??_rtc_getdata 0074                 __size_of_LCD_num 00BF  
              ___lmul@multiplier 0070                        convup@bcd 0071            intdigits_chardigits@a 0070  
          intdigits_chardigits@b 0072            intdigits_chardigits@c 0074                     ?_bmp280_init 0070  
                   ?_bmp280_read 0070                     ?_bmp280_send 0070          __end_of_print_dht11data 0CAC  
                       _ReadData 15C0                     ?_bmp280_stop 0070                   bmp280_send@dat 0070  
         __size_of_rtc_read_byte 003A             __end_of_bmp280_start 0809                 __size_of___aldiv 009D  
               __size_of___awdiv 0067                 __size_of___awmod 0059                 __size_of___lldiv 0066  
               __size_of___lwdiv 0044                 __size_of___lwmod 003A               __end_of__stringtab 1006  
     __end_of_print_serialnumber 1360                  ___lwdiv@divisor 0070                  ___lwdiv@counter 0077  
                       __ptext10 168C                         __ptext11 14CB                         __ptext20 138C  
                       __ptext12 12C4                         __ptext21 15C0                         __ptext13 133D  
                       __ptext30 0A3F                         __ptext22 1400                         __ptext14 12BB  
                       __ptext31 1491                         __ptext23 0875                         __ptext15 12F8  
                       __ptext40 1457                         __ptext32 12B2                         __ptext24 0980  
                       __ptext16 12D7                         __ptext41 1602                         __ptext33 132C  
                       __ptext25 131D                         __ptext17 1299                         __ptext50 1421  
                       __ptext42 16DA                         __ptext34 12A9                         __ptext26 13A6  
                       __ptext18 134E                         __ptext51 1540                         __ptext43 1799  
                       __ptext35 12EC                         __ptext27 010B                         __ptext19 0BD6  
                       __ptext52 0809                         __ptext44 13E1                         __ptext36 12CD  
                       __ptext28 12E1                         __ptext45 1580                         __ptext37 1291  
                       __ptext29 1360                         __ptext46 029D                         __ptext38 1505  
                       __ptext47 1646                         __ptext39 0E6E                         __ptext48 1733  
                       __ptext49 08E3                 __size_of_ser_int 000D                 __size_of_rtc_nak 000A  
                       _altitude 002C                 __size_of_rtc_int 0016                 __size_of_rtc_res 0009  
      uncompensated_pressure@ff6 0054        uncompensated_pressure@ff7 0058        uncompensated_pressure@ff8 005C  
            __end_of_rtc_getdata 16DA            __end_of_CheckResponse 1421                    __size_of_main 0104  
                  __size_of_show 001F                         _humidity 00EB         __size_of_bmp280_waitmssp 0008  
              _rtc_terminal_data 0D8D                         _rtc_read 12F8                         _waitmssp 1299  
                       _rtc_send 133D                         _rtc_stop 12C4               ?_rtc_terminal_data 0070  
                      rtc_send@a 0070                         convd@bcd 0070            __size_of_rtc_lcd_data 00E1  
                       exp@coeff 1006                         log@coeff 102E               _bmp280_displaydata 1505  
            ??_rtc_terminal_data 0072                    _rtc_read_byte 14CB                  LCD_Command@cmnd 0072  
            ?_bmp280_displaydata 0070                 ?_print_dht11data 0070                 ___lwmod@dividend 0072  
               ___lldiv@dividend 0074          __size_of_bmp280_getdata 00C9                        stringcode 1000  
      __end_of_rtc_terminal_data 0E6E                     _rtc_lcd_data 0CAC          __size_of_bmp280_restart 0009  
           ??_bmp280_displaydata 007B        show_multidigits@remainder 0053                ?_show_multidigits 0079  
           __size_of_StartSignal 001A               ??_show_multidigits 007B                      _temperature 00E9  
                       tx_sn@val 0079                   ?_rtc_read_byte 0070                 ___lldiv@quotient 0079  
                ___lwmod@divisor 0070                  ___lwmod@counter 0075                         stringdir 1000  
                       stringtab 1000                     ___aldiv@sign 0050                      _rtc_getdata 168C  
              rtc_read_byte@addr 0072            __size_of_bmp280_start 0009         __size_of_actual_pressure 0529  
   __end_of_intdigits_chardigits 132C             __size_of_bmp280_init 0016             __size_of_bmp280_read 000C  
           __size_of_bmp280_send 0011             __size_of_bmp280_stop 0009                ?_bmp280_read_byte 0070  
